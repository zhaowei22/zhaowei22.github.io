{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/uploads/touxiang.jpg","path":"uploads/touxiang.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1547901650000},{"_id":"source/CNAME","hash":"b24324b351ff05952791996e5e6503d289b420eb","modified":1555685384310},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1547901650000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1547901650000},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1547901650000},{"_id":"source/robots.txt","hash":"c46402a23eb2846da4eab9812e7fec5635a50c93","modified":1555597948417},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1547901650000},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1547901650000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1547901650000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1547901650000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1547901650000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1547901650000},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1547901650000},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1547901650000},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1547901650000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1547901650000},{"_id":"themes/next/gulpfile.js","hash":"5d1b989a376a2d4be5586eaab8ee9d8e8704808d","modified":1548514140000},{"_id":"themes/next/_config.yml","hash":"07f899f55e165bee28ddf351b0b692870637f098","modified":1555683663295},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1547901650000},{"_id":"source/_posts/debug.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556108174601},{"_id":"source/_posts/celery.md","hash":"f359b7e23d716f5e7bbcca9fff38e1895f382b93","modified":1556108842874},{"_id":"source/_posts/CDN详解.md","hash":"8171c71a9fc15a0f28fb2bbe9f214f9ffe4a240f","modified":1556108842875},{"_id":"source/_posts/docker 学习笔记.md","hash":"8349a291cd406d9824c07b15fe1911a2da2895ed","modified":1556108842876},{"_id":"source/_posts/MySQL 数据库安装和配置.md","hash":"73523bb889c64fc3cc03df57586f7824dc63fe6d","modified":1556108842876},{"_id":"source/_posts/logging 日志系统.md","hash":"d3677e3b38e2963bdcc82d8c867783657d46d076","modified":1556108842877},{"_id":"source/_posts/python 虚拟环境的创建.md","hash":"fb47190bbdab22ec89bda0af5920057bf90b0f76","modified":1556108842878},{"_id":"source/_posts/python 读取大文件.md","hash":"a8bf257a21b0de8e8db92892290a4cba42f02add","modified":1556108842878},{"_id":"source/_posts/python代码规范PEP8.md","hash":"e22f31ccf0ff443822f5ce5b08c64053042d9eda","modified":1556108842882},{"_id":"source/_posts/screen.md","hash":"f4605e41155f6c862b071a82297cd6bc5733b1c7","modified":1556108842883},{"_id":"source/_posts/使用SQLAlchemy.md","hash":"bf60d543c8e45139d4c0c0b07060bda40d35113b","modified":1556108842879},{"_id":"source/_posts/密码学习.md","hash":"5907e44301f0eaedd4f80f80896bc10fc4d926ab","modified":1556108842882},{"_id":"source/_posts/数据库.md","hash":"368e42e317508c9ced576afdf8327560074a1788","modified":1556108842881},{"_id":"source/about/index.md","hash":"cbc2f18c8ded1b4fca056a5cfd7bc3607f74e98c","modified":1550285906000},{"_id":"source/categories/index.md","hash":"79d06f311144e6f44332d4b84791044f3dfc5039","modified":1547967404000},{"_id":"source/life/index.md","hash":"43cc3b835bd260aacf154c735194c2f094b07459","modified":1547967688000},{"_id":"source/schedule/index.md","hash":"22531c21c53fe8e56a06bb51360f3103f1bc5747","modified":1547970874000},{"_id":"source/tags/index.md","hash":"c144a29f24e7fa904f2e2656d2ce7f3d26df538f","modified":1547967420000},{"_id":"source/uploads/touxiang.jpg","hash":"737676a2603b7852c3c27e8a15124a817dadda50","modified":1442491168000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1547901650000},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1547901650000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1547901640000},{"_id":"themes/next/.git/index","hash":"44a68265b7fc472f941f00075e0695a019f73777","modified":1547901650000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1547901650000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1547901650000},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1547901650000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1547901650000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1547901650000},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1547901650000},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1547901650000},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1547901650000},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1547901650000},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1547901650000},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1547901650000},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1547901650000},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1547901650000},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1547901650000},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1547901650000},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1547901650000},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1547901650000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"b38cefff5c0efb912a50dc5ad93ccfce383c6476","modified":1547973242000},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1547901650000},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1547901650000},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1547901650000},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1547901650000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1547901650000},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1547901650000},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1547901650000},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1547901650000},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1547901650000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1547901650000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1547901650000},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1547901650000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1547901650000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1547901650000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1547901650000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1547901650000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547901650000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1547901640000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1547901640000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1547901640000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1547901640000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1547901640000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1547901640000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1547901640000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1547901640000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1547901640000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1547901640000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1547901640000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1547901640000},{"_id":"themes/next/.git/logs/HEAD","hash":"d9569202c7bf92529cf8492796553acbbe6b4180","modified":1547901650000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547901650000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547901650000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"6b74aeeddad2e8aa0c6f60c466dba411a861b603","modified":1547952456000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1547901650000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1547901650000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f6f400aa504def97745ed16aa1556a31345b4d5d","modified":1547973186000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1547901650000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1547901650000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1547901650000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1547901650000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"795cb3be22d57042ae4c0170fe9b0979cbddf000","modified":1547956718000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1547901650000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1547901650000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1547901650000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1547901650000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1547901650000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1547901650000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1547901650000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1547901650000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1547901650000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1547901650000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1547901650000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1547901650000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1547901650000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1547901650000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1547901650000},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1547901650000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1547901650000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1547901650000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1547901650000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1547901650000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1547901650000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1547901650000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1547901650000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1547901650000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1547901650000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547901650000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1547901650000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1547901650000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547901650000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1547901650000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1547901650000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1547901650000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1547901650000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1547901650000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547901650000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1547901650000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547901650000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1547901650000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547901650000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1547901650000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547901650000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1547901650000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547901650000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547901650000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547901650000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547901650000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547901650000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547901650000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547901650000},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1547901650000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1547901650000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1547901650000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1547901650000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1547901650000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1547901650000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1547901650000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1547901650000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1547901650000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1547901650000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1547901650000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547901650000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1547901650000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1547901650000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1547901650000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1547901650000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1547901650000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1547901650000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1547901650000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"fd3d152b61d7dfbaf0fd1aca342c3c5144c72933","modified":1547954730000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1547901650000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1547901650000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1547901650000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1547901650000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1547901650000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1547901650000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"854492fa17adf9e5d023aa51b05393acefef6e44","modified":1550288118000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1547901650000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1547901650000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1547901650000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1547901650000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1547901650000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1547901650000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1547901650000},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1547901650000},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1547901650000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1547901650000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1547901650000},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1547901650000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547901650000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1547901650000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1547901650000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1547901650000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1547901650000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1547901650000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1547901650000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1547901650000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1547901650000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1547901650000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1547901650000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1547901650000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1547901650000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1547901650000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1547901650000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1547901650000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547901650000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1547901650000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1547901650000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1547901650000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1547901650000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1547901650000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1547901650000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1547901650000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1547901650000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1547901650000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1547901650000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d9569202c7bf92529cf8492796553acbbe6b4180","modified":1547901650000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1547901650000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1547901650000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1547901650000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1547901650000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1547901650000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1547901650000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1547901650000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1547901650000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1547901650000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1547901650000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1547901650000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547901650000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1547901650000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1547901650000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547901650000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1547901650000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d9569202c7bf92529cf8492796553acbbe6b4180","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3760f17f92cca58c97c6a9dc1d9d949e5f04dc12","modified":1547968158000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"0af44b7cb936e9ade3da66b3e379debce12e66c1","modified":1547954404000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1547901650000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547901650000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547901650000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1547901650000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547901650000},{"_id":"themes/next/.git/objects/pack/pack-2e8bfe0bbc40ee78847e36e8d3edd701735c6f4e.idx","hash":"50fb014b44992cfb2c56176f1defd1be870f96b9","modified":1547901650000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1547901650000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1547901650000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547901650000},{"_id":"themes/next/.git/objects/pack/pack-2e8bfe0bbc40ee78847e36e8d3edd701735c6f4e.pack","hash":"85a7403d5a07a998880356d55082d480ab60cff4","modified":1547901650000},{"_id":"public/baidusitemap.xml","hash":"a0615342557e8a6544c0d45348c54f8891e5e5bb","modified":1556110001475},{"_id":"public/search.xml","hash":"dd005c0221ff9a36eea0b184680d82af3760548c","modified":1556110001475},{"_id":"public/sitemap.xml","hash":"c7c2c26c40b87a9f4b5c6ea734d1aa1660da2f20","modified":1556110001496},{"_id":"public/about/index.html","hash":"a43ac78e3df82e989d6e68f1e62dc7071e16935e","modified":1556110001508},{"_id":"public/life/index.html","hash":"862456c6c9977b9fa42ac61d8b95d368155113d1","modified":1556110001508},{"_id":"public/schedule/index.html","hash":"251dff354b93013ccff0b4d76847b6c1c55c9985","modified":1556110001508},{"_id":"public/categories/index.html","hash":"b3f3611d6e80c542378f06062d8ecf719b29e1cd","modified":1556110001508},{"_id":"public/tags/index.html","hash":"93d4144d77347e38ab363623c569beb86f19694d","modified":1556110001508},{"_id":"public/3523045194/index.html","hash":"cfb1eb5417e8071a3f18d63f195a6b3faeff3283","modified":1556110001508},{"_id":"public/1884161696/index.html","hash":"8c981b4a3a5481c0175a039313aa4acccef32027","modified":1556110001508},{"_id":"public/1232847187/index.html","hash":"571c28128ae1347ad991df7163f71f532d07cdb7","modified":1556110001508},{"_id":"public/2728557103/index.html","hash":"1216e93a8508a0b3893ee400d861f70589918502","modified":1556110001508},{"_id":"public/3677998467/index.html","hash":"dcbb63e1c575a5cc48234c4b847520168280ea74","modified":1556110001508},{"_id":"public/945033781/index.html","hash":"e88836698a5de411519726727e8de0c251634ea1","modified":1556110001508},{"_id":"public/1699526646/index.html","hash":"835362fb4daf201253fb2690dac303ef761c63e3","modified":1556110001508},{"_id":"public/1260038886/index.html","hash":"bb290d9acedd669ea4a4db1a9656096486c3c550","modified":1556110001508},{"_id":"public/3133172261/index.html","hash":"44b0ff9a5e7308b6a6b6473289839ee17c05d290","modified":1556110001508},{"_id":"public/3786913082/index.html","hash":"7b8cda511676cc3bf2be185f82859baa9b6e30b0","modified":1556110001509},{"_id":"public/2653527150/index.html","hash":"e78847b1a62cd5db2c86cbea097363598c0b5ea2","modified":1556110001509},{"_id":"public/2547638477/index.html","hash":"448c11df54778487e6688d52ce206051449ac878","modified":1556110001509},{"_id":"public/archives/index.html","hash":"ab306c89ee76e0f59687155afd0b74563a10f001","modified":1556110001509},{"_id":"public/archives/page/2/index.html","hash":"6155eef55219c363b204e512ea0a1fba2ac2d7cf","modified":1556110001509},{"_id":"public/archives/2019/index.html","hash":"f245823b09aa380683f668c35bfa13ac82a67221","modified":1556110001509},{"_id":"public/archives/2019/page/2/index.html","hash":"1d97df42b5211dd12488eb6f1efe4a51ffa59a86","modified":1556110001509},{"_id":"public/archives/2019/01/index.html","hash":"278212028b43b73078dc6ef8177ff4fdec7d7bea","modified":1556110001509},{"_id":"public/archives/2019/03/index.html","hash":"7b885a9486c2a0f230d7d64908d2189fba07bcb8","modified":1556110001509},{"_id":"public/categories/组件使用/index.html","hash":"df9dde09eeafa22f8c13ee54e1b5c9b701f71930","modified":1556110001509},{"_id":"public/categories/环境搭建/index.html","hash":"605a480e44a2bbef899be5a6b6efcaa5ba08b4b8","modified":1556110001509},{"_id":"public/categories/数据库/index.html","hash":"cd0abf33db69c88c3d6efa17b6db79c2349c74e1","modified":1556110001509},{"_id":"public/categories/学习笔记/index.html","hash":"69700a38413894b8eef3f8f8e271c5bb6d54705d","modified":1556110001509},{"_id":"public/categories/操作系统/index.html","hash":"a6f552a71bf8a27ebb51717051333946e9d47a08","modified":1556110001509},{"_id":"public/index.html","hash":"a939b08239ea59659200a7840acc6fc8b8d8f87d","modified":1556110001510},{"_id":"public/page/2/index.html","hash":"e97289683a38fd130103cf052aa4747c25ee4b78","modified":1556110001510},{"_id":"public/tags/组件/index.html","hash":"c09ed74c8af8c57d5eccc4dc90c3b6aaf3393740","modified":1556110001510},{"_id":"public/tags/学习笔记/index.html","hash":"65f80eb3601f39a36806dc4e72952c025b628f0a","modified":1556110001510},{"_id":"public/tags/mysql/index.html","hash":"21cfa861c7b2ddeca91045f50a39bf6326d81560","modified":1556110001510},{"_id":"public/tags/python/index.html","hash":"b8c86a31fcc4a2b4785d94dc30afd3856638420b","modified":1556110001510},{"_id":"public/tags/docker/index.html","hash":"0b2a0acc653878bfc0f9621d25d2ef726e9c9a26","modified":1556110001510},{"_id":"public/tags/密码/index.html","hash":"617d11e42625173211acdc6deec7a00290e3ddff","modified":1556110001510},{"_id":"public/tags/Linux/index.html","hash":"a399cb24d304d9e8bba33ad7436fc0acfb90219d","modified":1556110001510},{"_id":"public/CNAME","hash":"b24324b351ff05952791996e5e6503d289b420eb","modified":1556110001525},{"_id":"public/robots.txt","hash":"c46402a23eb2846da4eab9812e7fec5635a50c93","modified":1556110001525},{"_id":"public/uploads/touxiang.jpg","hash":"737676a2603b7852c3c27e8a15124a817dadda50","modified":1556110001525},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1556110001525},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1556110001525},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1556110001525},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1556110001525},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1556110001525},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1556110001525},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1556110001525},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1556110001525},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1556110001526},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1556110001526},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1556110001526},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1556110001526},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1556110001526},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556110001526},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1556110001526},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556110001526},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1556110001526},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1556110001526},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1556110001526},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1556110001526},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1556110001526},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1556110001526},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1556110001526},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1556110001526},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1556110001526},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1556110001526},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1556110001526},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1556110001526},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1556110001526},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1556110001526},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1556110001526},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1556110001526},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1556110001527},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556110002331},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556110002337},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1556110002350},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1556110002350},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1556110002352},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1556110002352},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1556110002353},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1556110002353},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1556110002353},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1556110002353},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1556110002353},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1556110002353},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1556110002353},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1556110002353},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1556110002354},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1556110002354},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1556110002354},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1556110002354},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1556110002354},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1556110002355},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1556110002355},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1556110002355},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1556110002355},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1556110002355},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1556110002355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1556110002355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1556110002355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1556110002355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1556110002355},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1556110002355},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1556110002355},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1556110002355},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1556110002356},{"_id":"public/css/main.css","hash":"c3acce46fcba13b17791478bec5ec6e00f0aff3f","modified":1556110002356},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1556110002356},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556110002356},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1556110002356},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1556110002364},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1556110002364},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1556110002365},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1556110002365},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1556110002365},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1556110002365},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1556110002365},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1556110002365},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1556110002372},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1556110002372},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1556110002385},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1556110002385},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1556110002392},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1556110002392},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1556110002392},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1556110002392},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1556110002393},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1556110002393},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1556110002393},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1556110002404},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1556110002404},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1556110002411},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1556110002411},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1556110002422},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1556110002443},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1556110002443},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1556110002452},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1556110002537},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1556110002570}],"Category":[{"name":"组件使用","_id":"cjuv7ppki00047rs6sbroz2cx"},{"name":"环境搭建","_id":"cjuv7ppkw000b7rs6yiyxgz67"},{"name":"数据库","_id":"cjuv7ppl4000h7rs6dx0huktn"},{"name":"学习笔记","_id":"cjuv7ppl9000n7rs69gx5bel9"},{"name":"操作系统","_id":"cjuv7ppw5001i7rs6itjbtbu1"}],"Data":[],"Page":[{"title":"about","date":"2019-02-16T02:54:09.000Z","type":"about","_content":"# 个人简介","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-02-16 10:54:09\ntype: about\n---\n# 个人简介","updated":"2019-02-16T02:58:26.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjuv7ppka00017rs63e2fcr7m","content":"<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1>"},{"title":"生活","date":"2019-01-20T07:00:57.000Z","type":"life","_content":"","source":"life/index.md","raw":"---\ntitle: 生活\ndate: 2019-01-20 15:00:57\ntype: life\n---\n","updated":"2019-01-20T07:01:28.000Z","path":"life/index.html","comments":1,"layout":"page","_id":"cjuv7ppkf00037rs62ldaycy7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"日程表","date":"2019-01-20T07:53:34.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: 日程表\ndate: 2019-01-20 15:53:34\ntype: schedule\n---\n","updated":"2019-01-20T07:54:34.000Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjuv7ppko00077rs621xlz0q8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2019-01-20T02:25:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-01-20 10:25:13\ntype: categories\n---\n","updated":"2019-01-20T06:56:44.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjuv7ppkr00097rs6hr5pt35f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-01-20T02:24:52.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-01-20 10:24:52\ntype: tags\n---\n","updated":"2019-01-20T06:57:00.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjuv7ppvy001f7rs6ye8qhxbv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"celery","abbrlink":1699526646,"date":"2019-01-19T13:43:28.000Z","updated":"2019-02-15T14:22:22.000Z","_content":"# celery 和 Flask + redis\n\nCelery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。\n\n它是一个专注于实时处理的任务队列，同时也支持任务调度。\n\nCelery 需要一个发送和接受消息的传输者。RabbitMQ 和 Redis 中间人的消息传输支持所有特性，但也提供大量其他实验性方案的支持，包括用 SQLite 进行本地开发。\n\nCelery 可以单机运行，也可以在多台机器上运行，甚至可以跨越数据中心运行。\n\n### celery 配置\n文件目录树：\n\n```\nserver/\n├── apis\n│     └── api.raml\n├── xxxx\n│   ├── xxxx.py\n│   ├── models.py\n│   ├── transforms.py\n│   ├── users.py\n│   └── views\n│         ├── __init__.py\n│         ├── tasks.py\n│         └── xxxx.py\n├── celery_worker.py\n├── run.py\n└── settings.py\n\n```\n在settings.py文件中配置cellery\n\n```\nclass Config(object):\n    # celery config\n    CELERY_BROKER_URL = 'redis://:@localhost:6379/'\n    CELERY_RESULT_BACKEND = 'redis://:@localhost:6379/'\n```\n\n在__init__.py文件下和app一起配置：\n\n```\nfrom flask import Flask, render_template, redirect, url_for,\\\n     _request_ctx_stack, request, abort\nfrom flask.ext.security import Security, SQLAlchemyUserDatastore\nfrom .models import db, User, Role\nfrom celery import Celery\nimport logging\n\nCELERY = Celery('ddu',broker='redis://:@localhost:6379/1')\n\ndef _log_config(app):\n    if not app.debug and not app.testing:\n        from logging.handlers import RotatingFileHandler\n        file_handler = RotatingFileHandler(\n            app.config.get('LOGGING_PATH'),\n            maxBytes=app.config.get('LOGGING_SIZE'))\n        file_handler.setLevel(logging.WARNING)\n        app.logger.addHandler(file_handler)\n\ndef create_app(config):\n    app = Flask(\n        __name__,\n        template_folder='../../votingmanage/templates',\n        static_folder='../../votingmanage/dist',\n        static_url_path=\"/static\")\n    app.config.from_object(config)\n    \n    app.db = db\n    db.init_app(app)\n    \n    user_datastore = SQLAlchemyUserDatastore(db, User, Role)\n    security = Security(app, user_datastore)\n    app.user_datastore = user_datastore\n    \n    @app.route('/')\n    def to_app():\n        return redirect(url_for('ngapp.home'))\n\n    app.apns = APNs(use_sandbox=True,\n                    cert_file=path.join(app.root_path, 'ck.pem'),\n                    key_file=path.join(app.root_path, 'ck.pem'))\n                    \n    import users\n    app.register_blueprint(users.bp, url_prefix='/api/users')  \n    \n    # Poplulate user information if the token is specified\n    @app.before_request\n    def populate_user():\n        header_key = app.config.get('SECURITY_TOKEN_AUTHENTICATION_HEADER', 'Authentication-Token')\n        args_key = app.config.get('SECURITY_TOKEN_AUTHENTICATION_KEY', 'token')\n        header_token = request.headers.get(header_key, None)\n        token = request.args.get(args_key, header_token)\n        if request.get_json(silent=True):\n            token = request.json.get(args_key, token)\n\n        if token:\n            user = app.extensions['security'].login_manager.token_callback(token)\n            _request_ctx_stack.top.user = user\n    \n    global CELERY #全局变量CELERY\n    \n    def make_celery(app):   #此处app为创建的实例对象\n        celery = Celery(app.import_name, broker=app.config['CELERY_BROKER_URL'],\n                        backend=app.config['CELERY_RESULT_BACKEND'])\n        celery.conf.update(app.config)\n        TaskBase = celery.Task\n\n        class ContextTask(TaskBase):\n            abstract = True\n\n            def __call__(self, *args, **kwargs):\n                with app.app_context():\n                    return TaskBase.__call__(self, *args, **kwargs)\n\n        celery.Task = ContextTask\n        return celery\n\n    CELERY = make_celery(app) \n    \n    return app\n```\n创建celery的启动文件celery_worker.py：\n\n```\nfrom ddu import create_app, CELERY\n\nfrom settings import DEV as PROD\napp = create_app(PROD)\napp.app_context().push()\n\n```\n编写tasks.py文件，完成定时任务：\n\n```\n# -*- coding:utf-8 -*-\nfrom .. import CELERY\nfrom ..models import User, Work, Remid, GZHUser\nfrom datetime import datetime,timedelta\nfrom flask import current_app, request\nimport requests\nimport json\n\n@CELERY.on_after_configure.connect\ndef setup_periodic_tasks(sender, **kwargs):\n    # 添加定时任务，设置时间\n    # sender.add_periodic_task(10.0, test1.s('world'), expires=10)\n    sender.add_periodic_task(60.0, weixin_remid.s())\n    sender.add_periodic_task(10.0, user_unionid.s())\n    sender.add_periodic_task(120.0, get_list.s())\n    \n@CELERY.task\ndef test1(arg1=\"arg1\"):\n    print arg1,111\n    return 5\n    \n@CELERY.task\ndef user_unionid():\n    count = get_people_unionid()\n    print str(count) + 'user unionid...'\n```\n编写xxx.py文件，完成异步任务：\n\n```\ntask.add.apply_async(args=[3,7],expires=10)\n# expires：任务过期时间，参数类型可以是 int，也可以是 datetime\n# eta (estimated time of arrival)：指定任务被调度的具体时间，参数类型是 datetime\n# countdown：指定多少秒后执行任务\n```\n\n### celery 启动\n在celery_worker.py文件下：\n> celery -A celery_worker.CELERY worker --loglevel=info --beat\n\n### 注意：\n1. 编写完tasks.py文件后，在启动Flask项目时，应该在主文件中导入tasks.py文件\n> from .tasks import test1\n2. 定时任务，也可以在配置文件中进行配置描述（此方法未试验成功，setting配置无响应）\n\n```\nfrom datetime import timedelta\n\nCELERYBEAT_SCHEDULE = {\n    'add-every-30-seconds': {\n        'task': 'tasks.add',\n        'schedule': timedelta(seconds=30),\n        'args': (16, 16)\n    },\n}\n\nCELERY_TIMEZONE = 'UTC'\n```\n\n```\nfrom celery.schedules import crontab\n\nCELERYBEAT_SCHEDULE = {\n    # Executes every Monday morning at 7:30 A.M\n    'add-every-monday-morning': {\n        'task': 'tasks.add',\n        'schedule': crontab(hour=7, minute=30, day_of_week=1),\n        'args': (16, 16),\n    },\n}\n```\n\n3. celery 和 Flask 同时使用时一定要注意实例的config配置问题，以免出现混乱\n4. 上文为celery读取数据库进行定时任务（未涉及任务结果的重新保存）","source":"_posts/celery.md","raw":"---\ntitle: celery\ntags:\n  - 组件\ncategories: 组件使用\nabbrlink: 1699526646\ndate: 2019-01-19 21:43:28\nupdated: 2019-02-15 22:22:22\n---\n# celery 和 Flask + redis\n\nCelery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。\n\n它是一个专注于实时处理的任务队列，同时也支持任务调度。\n\nCelery 需要一个发送和接受消息的传输者。RabbitMQ 和 Redis 中间人的消息传输支持所有特性，但也提供大量其他实验性方案的支持，包括用 SQLite 进行本地开发。\n\nCelery 可以单机运行，也可以在多台机器上运行，甚至可以跨越数据中心运行。\n\n### celery 配置\n文件目录树：\n\n```\nserver/\n├── apis\n│     └── api.raml\n├── xxxx\n│   ├── xxxx.py\n│   ├── models.py\n│   ├── transforms.py\n│   ├── users.py\n│   └── views\n│         ├── __init__.py\n│         ├── tasks.py\n│         └── xxxx.py\n├── celery_worker.py\n├── run.py\n└── settings.py\n\n```\n在settings.py文件中配置cellery\n\n```\nclass Config(object):\n    # celery config\n    CELERY_BROKER_URL = 'redis://:@localhost:6379/'\n    CELERY_RESULT_BACKEND = 'redis://:@localhost:6379/'\n```\n\n在__init__.py文件下和app一起配置：\n\n```\nfrom flask import Flask, render_template, redirect, url_for,\\\n     _request_ctx_stack, request, abort\nfrom flask.ext.security import Security, SQLAlchemyUserDatastore\nfrom .models import db, User, Role\nfrom celery import Celery\nimport logging\n\nCELERY = Celery('ddu',broker='redis://:@localhost:6379/1')\n\ndef _log_config(app):\n    if not app.debug and not app.testing:\n        from logging.handlers import RotatingFileHandler\n        file_handler = RotatingFileHandler(\n            app.config.get('LOGGING_PATH'),\n            maxBytes=app.config.get('LOGGING_SIZE'))\n        file_handler.setLevel(logging.WARNING)\n        app.logger.addHandler(file_handler)\n\ndef create_app(config):\n    app = Flask(\n        __name__,\n        template_folder='../../votingmanage/templates',\n        static_folder='../../votingmanage/dist',\n        static_url_path=\"/static\")\n    app.config.from_object(config)\n    \n    app.db = db\n    db.init_app(app)\n    \n    user_datastore = SQLAlchemyUserDatastore(db, User, Role)\n    security = Security(app, user_datastore)\n    app.user_datastore = user_datastore\n    \n    @app.route('/')\n    def to_app():\n        return redirect(url_for('ngapp.home'))\n\n    app.apns = APNs(use_sandbox=True,\n                    cert_file=path.join(app.root_path, 'ck.pem'),\n                    key_file=path.join(app.root_path, 'ck.pem'))\n                    \n    import users\n    app.register_blueprint(users.bp, url_prefix='/api/users')  \n    \n    # Poplulate user information if the token is specified\n    @app.before_request\n    def populate_user():\n        header_key = app.config.get('SECURITY_TOKEN_AUTHENTICATION_HEADER', 'Authentication-Token')\n        args_key = app.config.get('SECURITY_TOKEN_AUTHENTICATION_KEY', 'token')\n        header_token = request.headers.get(header_key, None)\n        token = request.args.get(args_key, header_token)\n        if request.get_json(silent=True):\n            token = request.json.get(args_key, token)\n\n        if token:\n            user = app.extensions['security'].login_manager.token_callback(token)\n            _request_ctx_stack.top.user = user\n    \n    global CELERY #全局变量CELERY\n    \n    def make_celery(app):   #此处app为创建的实例对象\n        celery = Celery(app.import_name, broker=app.config['CELERY_BROKER_URL'],\n                        backend=app.config['CELERY_RESULT_BACKEND'])\n        celery.conf.update(app.config)\n        TaskBase = celery.Task\n\n        class ContextTask(TaskBase):\n            abstract = True\n\n            def __call__(self, *args, **kwargs):\n                with app.app_context():\n                    return TaskBase.__call__(self, *args, **kwargs)\n\n        celery.Task = ContextTask\n        return celery\n\n    CELERY = make_celery(app) \n    \n    return app\n```\n创建celery的启动文件celery_worker.py：\n\n```\nfrom ddu import create_app, CELERY\n\nfrom settings import DEV as PROD\napp = create_app(PROD)\napp.app_context().push()\n\n```\n编写tasks.py文件，完成定时任务：\n\n```\n# -*- coding:utf-8 -*-\nfrom .. import CELERY\nfrom ..models import User, Work, Remid, GZHUser\nfrom datetime import datetime,timedelta\nfrom flask import current_app, request\nimport requests\nimport json\n\n@CELERY.on_after_configure.connect\ndef setup_periodic_tasks(sender, **kwargs):\n    # 添加定时任务，设置时间\n    # sender.add_periodic_task(10.0, test1.s('world'), expires=10)\n    sender.add_periodic_task(60.0, weixin_remid.s())\n    sender.add_periodic_task(10.0, user_unionid.s())\n    sender.add_periodic_task(120.0, get_list.s())\n    \n@CELERY.task\ndef test1(arg1=\"arg1\"):\n    print arg1,111\n    return 5\n    \n@CELERY.task\ndef user_unionid():\n    count = get_people_unionid()\n    print str(count) + 'user unionid...'\n```\n编写xxx.py文件，完成异步任务：\n\n```\ntask.add.apply_async(args=[3,7],expires=10)\n# expires：任务过期时间，参数类型可以是 int，也可以是 datetime\n# eta (estimated time of arrival)：指定任务被调度的具体时间，参数类型是 datetime\n# countdown：指定多少秒后执行任务\n```\n\n### celery 启动\n在celery_worker.py文件下：\n> celery -A celery_worker.CELERY worker --loglevel=info --beat\n\n### 注意：\n1. 编写完tasks.py文件后，在启动Flask项目时，应该在主文件中导入tasks.py文件\n> from .tasks import test1\n2. 定时任务，也可以在配置文件中进行配置描述（此方法未试验成功，setting配置无响应）\n\n```\nfrom datetime import timedelta\n\nCELERYBEAT_SCHEDULE = {\n    'add-every-30-seconds': {\n        'task': 'tasks.add',\n        'schedule': timedelta(seconds=30),\n        'args': (16, 16)\n    },\n}\n\nCELERY_TIMEZONE = 'UTC'\n```\n\n```\nfrom celery.schedules import crontab\n\nCELERYBEAT_SCHEDULE = {\n    # Executes every Monday morning at 7:30 A.M\n    'add-every-monday-morning': {\n        'task': 'tasks.add',\n        'schedule': crontab(hour=7, minute=30, day_of_week=1),\n        'args': (16, 16),\n    },\n}\n```\n\n3. celery 和 Flask 同时使用时一定要注意实例的config配置问题，以免出现混乱\n4. 上文为celery读取数据库进行定时任务（未涉及任务结果的重新保存）","slug":"celery","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppk100007rs683k3ucg5","content":"<h1 id=\"celery-和-Flask-redis\"><a href=\"#celery-和-Flask-redis\" class=\"headerlink\" title=\"celery 和 Flask + redis\"></a>celery 和 Flask + redis</h1><p>Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。</p>\n<p>它是一个专注于实时处理的任务队列，同时也支持任务调度。</p>\n<p>Celery 需要一个发送和接受消息的传输者。RabbitMQ 和 Redis 中间人的消息传输支持所有特性，但也提供大量其他实验性方案的支持，包括用 SQLite 进行本地开发。</p>\n<p>Celery 可以单机运行，也可以在多台机器上运行，甚至可以跨越数据中心运行。</p>\n<h3 id=\"celery-配置\"><a href=\"#celery-配置\" class=\"headerlink\" title=\"celery 配置\"></a>celery 配置</h3><p>文件目录树：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server/</span><br><span class=\"line\">├── apis</span><br><span class=\"line\">│     └── api.raml</span><br><span class=\"line\">├── xxxx</span><br><span class=\"line\">│   ├── xxxx.py</span><br><span class=\"line\">│   ├── models.py</span><br><span class=\"line\">│   ├── transforms.py</span><br><span class=\"line\">│   ├── users.py</span><br><span class=\"line\">│   └── views</span><br><span class=\"line\">│         ├── __init__.py</span><br><span class=\"line\">│         ├── tasks.py</span><br><span class=\"line\">│         └── xxxx.py</span><br><span class=\"line\">├── celery_worker.py</span><br><span class=\"line\">├── run.py</span><br><span class=\"line\">└── settings.py</span><br></pre></td></tr></table></figure>\n<p>在settings.py文件中配置cellery</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Config(object):</span><br><span class=\"line\">    # celery config</span><br><span class=\"line\">    CELERY_BROKER_URL = &apos;redis://:@localhost:6379/&apos;</span><br><span class=\"line\">    CELERY_RESULT_BACKEND = &apos;redis://:@localhost:6379/&apos;</span><br></pre></td></tr></table></figure>\n<p>在<strong>init</strong>.py文件下和app一起配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template, redirect, url_for,\\</span><br><span class=\"line\">     _request_ctx_stack, request, abort</span><br><span class=\"line\">from flask.ext.security import Security, SQLAlchemyUserDatastore</span><br><span class=\"line\">from .models import db, User, Role</span><br><span class=\"line\">from celery import Celery</span><br><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">CELERY = Celery(&apos;ddu&apos;,broker=&apos;redis://:@localhost:6379/1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def _log_config(app):</span><br><span class=\"line\">    if not app.debug and not app.testing:</span><br><span class=\"line\">        from logging.handlers import RotatingFileHandler</span><br><span class=\"line\">        file_handler = RotatingFileHandler(</span><br><span class=\"line\">            app.config.get(&apos;LOGGING_PATH&apos;),</span><br><span class=\"line\">            maxBytes=app.config.get(&apos;LOGGING_SIZE&apos;))</span><br><span class=\"line\">        file_handler.setLevel(logging.WARNING)</span><br><span class=\"line\">        app.logger.addHandler(file_handler)</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app(config):</span><br><span class=\"line\">    app = Flask(</span><br><span class=\"line\">        __name__,</span><br><span class=\"line\">        template_folder=&apos;../../votingmanage/templates&apos;,</span><br><span class=\"line\">        static_folder=&apos;../../votingmanage/dist&apos;,</span><br><span class=\"line\">        static_url_path=&quot;/static&quot;)</span><br><span class=\"line\">    app.config.from_object(config)</span><br><span class=\"line\">    </span><br><span class=\"line\">    app.db = db</span><br><span class=\"line\">    db.init_app(app)</span><br><span class=\"line\">    </span><br><span class=\"line\">    user_datastore = SQLAlchemyUserDatastore(db, User, Role)</span><br><span class=\"line\">    security = Security(app, user_datastore)</span><br><span class=\"line\">    app.user_datastore = user_datastore</span><br><span class=\"line\">    </span><br><span class=\"line\">    @app.route(&apos;/&apos;)</span><br><span class=\"line\">    def to_app():</span><br><span class=\"line\">        return redirect(url_for(&apos;ngapp.home&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">    app.apns = APNs(use_sandbox=True,</span><br><span class=\"line\">                    cert_file=path.join(app.root_path, &apos;ck.pem&apos;),</span><br><span class=\"line\">                    key_file=path.join(app.root_path, &apos;ck.pem&apos;))</span><br><span class=\"line\">                    </span><br><span class=\"line\">    import users</span><br><span class=\"line\">    app.register_blueprint(users.bp, url_prefix=&apos;/api/users&apos;)  </span><br><span class=\"line\">    </span><br><span class=\"line\">    # Poplulate user information if the token is specified</span><br><span class=\"line\">    @app.before_request</span><br><span class=\"line\">    def populate_user():</span><br><span class=\"line\">        header_key = app.config.get(&apos;SECURITY_TOKEN_AUTHENTICATION_HEADER&apos;, &apos;Authentication-Token&apos;)</span><br><span class=\"line\">        args_key = app.config.get(&apos;SECURITY_TOKEN_AUTHENTICATION_KEY&apos;, &apos;token&apos;)</span><br><span class=\"line\">        header_token = request.headers.get(header_key, None)</span><br><span class=\"line\">        token = request.args.get(args_key, header_token)</span><br><span class=\"line\">        if request.get_json(silent=True):</span><br><span class=\"line\">            token = request.json.get(args_key, token)</span><br><span class=\"line\"></span><br><span class=\"line\">        if token:</span><br><span class=\"line\">            user = app.extensions[&apos;security&apos;].login_manager.token_callback(token)</span><br><span class=\"line\">            _request_ctx_stack.top.user = user</span><br><span class=\"line\">    </span><br><span class=\"line\">    global CELERY #全局变量CELERY</span><br><span class=\"line\">    </span><br><span class=\"line\">    def make_celery(app):   #此处app为创建的实例对象</span><br><span class=\"line\">        celery = Celery(app.import_name, broker=app.config[&apos;CELERY_BROKER_URL&apos;],</span><br><span class=\"line\">                        backend=app.config[&apos;CELERY_RESULT_BACKEND&apos;])</span><br><span class=\"line\">        celery.conf.update(app.config)</span><br><span class=\"line\">        TaskBase = celery.Task</span><br><span class=\"line\"></span><br><span class=\"line\">        class ContextTask(TaskBase):</span><br><span class=\"line\">            abstract = True</span><br><span class=\"line\"></span><br><span class=\"line\">            def __call__(self, *args, **kwargs):</span><br><span class=\"line\">                with app.app_context():</span><br><span class=\"line\">                    return TaskBase.__call__(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">        celery.Task = ContextTask</span><br><span class=\"line\">        return celery</span><br><span class=\"line\"></span><br><span class=\"line\">    CELERY = make_celery(app) </span><br><span class=\"line\">    </span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure>\n<p>创建celery的启动文件celery_worker.py：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from ddu import create_app, CELERY</span><br><span class=\"line\"></span><br><span class=\"line\">from settings import DEV as PROD</span><br><span class=\"line\">app = create_app(PROD)</span><br><span class=\"line\">app.app_context().push()</span><br></pre></td></tr></table></figure>\n<p>编写tasks.py文件，完成定时任务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">from .. import CELERY</span><br><span class=\"line\">from ..models import User, Work, Remid, GZHUser</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">from flask import current_app, request</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">@CELERY.on_after_configure.connect</span><br><span class=\"line\">def setup_periodic_tasks(sender, **kwargs):</span><br><span class=\"line\">    # 添加定时任务，设置时间</span><br><span class=\"line\">    # sender.add_periodic_task(10.0, test1.s(&apos;world&apos;), expires=10)</span><br><span class=\"line\">    sender.add_periodic_task(60.0, weixin_remid.s())</span><br><span class=\"line\">    sender.add_periodic_task(10.0, user_unionid.s())</span><br><span class=\"line\">    sender.add_periodic_task(120.0, get_list.s())</span><br><span class=\"line\">    </span><br><span class=\"line\">@CELERY.task</span><br><span class=\"line\">def test1(arg1=&quot;arg1&quot;):</span><br><span class=\"line\">    print arg1,111</span><br><span class=\"line\">    return 5</span><br><span class=\"line\">    </span><br><span class=\"line\">@CELERY.task</span><br><span class=\"line\">def user_unionid():</span><br><span class=\"line\">    count = get_people_unionid()</span><br><span class=\"line\">    print str(count) + &apos;user unionid...&apos;</span><br></pre></td></tr></table></figure>\n<p>编写xxx.py文件，完成异步任务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.add.apply_async(args=[3,7],expires=10)</span><br><span class=\"line\"># expires：任务过期时间，参数类型可以是 int，也可以是 datetime</span><br><span class=\"line\"># eta (estimated time of arrival)：指定任务被调度的具体时间，参数类型是 datetime</span><br><span class=\"line\"># countdown：指定多少秒后执行任务</span><br></pre></td></tr></table></figure>\n<h3 id=\"celery-启动\"><a href=\"#celery-启动\" class=\"headerlink\" title=\"celery 启动\"></a>celery 启动</h3><p>在celery_worker.py文件下：</p>\n<blockquote>\n<p>celery -A celery_worker.CELERY worker –loglevel=info –beat</p>\n</blockquote>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ol>\n<li>编写完tasks.py文件后，在启动Flask项目时，应该在主文件中导入tasks.py文件<blockquote>\n<p>from .tasks import test1</p>\n</blockquote>\n</li>\n<li>定时任务，也可以在配置文件中进行配置描述（此方法未试验成功，setting配置无响应）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from datetime import timedelta</span><br><span class=\"line\"></span><br><span class=\"line\">CELERYBEAT_SCHEDULE = &#123;</span><br><span class=\"line\">    &apos;add-every-30-seconds&apos;: &#123;</span><br><span class=\"line\">        &apos;task&apos;: &apos;tasks.add&apos;,</span><br><span class=\"line\">        &apos;schedule&apos;: timedelta(seconds=30),</span><br><span class=\"line\">        &apos;args&apos;: (16, 16)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CELERY_TIMEZONE = &apos;UTC&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery.schedules import crontab</span><br><span class=\"line\"></span><br><span class=\"line\">CELERYBEAT_SCHEDULE = &#123;</span><br><span class=\"line\">    # Executes every Monday morning at 7:30 A.M</span><br><span class=\"line\">    &apos;add-every-monday-morning&apos;: &#123;</span><br><span class=\"line\">        &apos;task&apos;: &apos;tasks.add&apos;,</span><br><span class=\"line\">        &apos;schedule&apos;: crontab(hour=7, minute=30, day_of_week=1),</span><br><span class=\"line\">        &apos;args&apos;: (16, 16),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>celery 和 Flask 同时使用时一定要注意实例的config配置问题，以免出现混乱</li>\n<li>上文为celery读取数据库进行定时任务（未涉及任务结果的重新保存）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"celery-和-Flask-redis\"><a href=\"#celery-和-Flask-redis\" class=\"headerlink\" title=\"celery 和 Flask + redis\"></a>celery 和 Flask + redis</h1><p>Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。</p>\n<p>它是一个专注于实时处理的任务队列，同时也支持任务调度。</p>\n<p>Celery 需要一个发送和接受消息的传输者。RabbitMQ 和 Redis 中间人的消息传输支持所有特性，但也提供大量其他实验性方案的支持，包括用 SQLite 进行本地开发。</p>\n<p>Celery 可以单机运行，也可以在多台机器上运行，甚至可以跨越数据中心运行。</p>\n<h3 id=\"celery-配置\"><a href=\"#celery-配置\" class=\"headerlink\" title=\"celery 配置\"></a>celery 配置</h3><p>文件目录树：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server/</span><br><span class=\"line\">├── apis</span><br><span class=\"line\">│     └── api.raml</span><br><span class=\"line\">├── xxxx</span><br><span class=\"line\">│   ├── xxxx.py</span><br><span class=\"line\">│   ├── models.py</span><br><span class=\"line\">│   ├── transforms.py</span><br><span class=\"line\">│   ├── users.py</span><br><span class=\"line\">│   └── views</span><br><span class=\"line\">│         ├── __init__.py</span><br><span class=\"line\">│         ├── tasks.py</span><br><span class=\"line\">│         └── xxxx.py</span><br><span class=\"line\">├── celery_worker.py</span><br><span class=\"line\">├── run.py</span><br><span class=\"line\">└── settings.py</span><br></pre></td></tr></table></figure>\n<p>在settings.py文件中配置cellery</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Config(object):</span><br><span class=\"line\">    # celery config</span><br><span class=\"line\">    CELERY_BROKER_URL = &apos;redis://:@localhost:6379/&apos;</span><br><span class=\"line\">    CELERY_RESULT_BACKEND = &apos;redis://:@localhost:6379/&apos;</span><br></pre></td></tr></table></figure>\n<p>在<strong>init</strong>.py文件下和app一起配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template, redirect, url_for,\\</span><br><span class=\"line\">     _request_ctx_stack, request, abort</span><br><span class=\"line\">from flask.ext.security import Security, SQLAlchemyUserDatastore</span><br><span class=\"line\">from .models import db, User, Role</span><br><span class=\"line\">from celery import Celery</span><br><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">CELERY = Celery(&apos;ddu&apos;,broker=&apos;redis://:@localhost:6379/1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def _log_config(app):</span><br><span class=\"line\">    if not app.debug and not app.testing:</span><br><span class=\"line\">        from logging.handlers import RotatingFileHandler</span><br><span class=\"line\">        file_handler = RotatingFileHandler(</span><br><span class=\"line\">            app.config.get(&apos;LOGGING_PATH&apos;),</span><br><span class=\"line\">            maxBytes=app.config.get(&apos;LOGGING_SIZE&apos;))</span><br><span class=\"line\">        file_handler.setLevel(logging.WARNING)</span><br><span class=\"line\">        app.logger.addHandler(file_handler)</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app(config):</span><br><span class=\"line\">    app = Flask(</span><br><span class=\"line\">        __name__,</span><br><span class=\"line\">        template_folder=&apos;../../votingmanage/templates&apos;,</span><br><span class=\"line\">        static_folder=&apos;../../votingmanage/dist&apos;,</span><br><span class=\"line\">        static_url_path=&quot;/static&quot;)</span><br><span class=\"line\">    app.config.from_object(config)</span><br><span class=\"line\">    </span><br><span class=\"line\">    app.db = db</span><br><span class=\"line\">    db.init_app(app)</span><br><span class=\"line\">    </span><br><span class=\"line\">    user_datastore = SQLAlchemyUserDatastore(db, User, Role)</span><br><span class=\"line\">    security = Security(app, user_datastore)</span><br><span class=\"line\">    app.user_datastore = user_datastore</span><br><span class=\"line\">    </span><br><span class=\"line\">    @app.route(&apos;/&apos;)</span><br><span class=\"line\">    def to_app():</span><br><span class=\"line\">        return redirect(url_for(&apos;ngapp.home&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">    app.apns = APNs(use_sandbox=True,</span><br><span class=\"line\">                    cert_file=path.join(app.root_path, &apos;ck.pem&apos;),</span><br><span class=\"line\">                    key_file=path.join(app.root_path, &apos;ck.pem&apos;))</span><br><span class=\"line\">                    </span><br><span class=\"line\">    import users</span><br><span class=\"line\">    app.register_blueprint(users.bp, url_prefix=&apos;/api/users&apos;)  </span><br><span class=\"line\">    </span><br><span class=\"line\">    # Poplulate user information if the token is specified</span><br><span class=\"line\">    @app.before_request</span><br><span class=\"line\">    def populate_user():</span><br><span class=\"line\">        header_key = app.config.get(&apos;SECURITY_TOKEN_AUTHENTICATION_HEADER&apos;, &apos;Authentication-Token&apos;)</span><br><span class=\"line\">        args_key = app.config.get(&apos;SECURITY_TOKEN_AUTHENTICATION_KEY&apos;, &apos;token&apos;)</span><br><span class=\"line\">        header_token = request.headers.get(header_key, None)</span><br><span class=\"line\">        token = request.args.get(args_key, header_token)</span><br><span class=\"line\">        if request.get_json(silent=True):</span><br><span class=\"line\">            token = request.json.get(args_key, token)</span><br><span class=\"line\"></span><br><span class=\"line\">        if token:</span><br><span class=\"line\">            user = app.extensions[&apos;security&apos;].login_manager.token_callback(token)</span><br><span class=\"line\">            _request_ctx_stack.top.user = user</span><br><span class=\"line\">    </span><br><span class=\"line\">    global CELERY #全局变量CELERY</span><br><span class=\"line\">    </span><br><span class=\"line\">    def make_celery(app):   #此处app为创建的实例对象</span><br><span class=\"line\">        celery = Celery(app.import_name, broker=app.config[&apos;CELERY_BROKER_URL&apos;],</span><br><span class=\"line\">                        backend=app.config[&apos;CELERY_RESULT_BACKEND&apos;])</span><br><span class=\"line\">        celery.conf.update(app.config)</span><br><span class=\"line\">        TaskBase = celery.Task</span><br><span class=\"line\"></span><br><span class=\"line\">        class ContextTask(TaskBase):</span><br><span class=\"line\">            abstract = True</span><br><span class=\"line\"></span><br><span class=\"line\">            def __call__(self, *args, **kwargs):</span><br><span class=\"line\">                with app.app_context():</span><br><span class=\"line\">                    return TaskBase.__call__(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">        celery.Task = ContextTask</span><br><span class=\"line\">        return celery</span><br><span class=\"line\"></span><br><span class=\"line\">    CELERY = make_celery(app) </span><br><span class=\"line\">    </span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure>\n<p>创建celery的启动文件celery_worker.py：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from ddu import create_app, CELERY</span><br><span class=\"line\"></span><br><span class=\"line\">from settings import DEV as PROD</span><br><span class=\"line\">app = create_app(PROD)</span><br><span class=\"line\">app.app_context().push()</span><br></pre></td></tr></table></figure>\n<p>编写tasks.py文件，完成定时任务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">from .. import CELERY</span><br><span class=\"line\">from ..models import User, Work, Remid, GZHUser</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">from flask import current_app, request</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">@CELERY.on_after_configure.connect</span><br><span class=\"line\">def setup_periodic_tasks(sender, **kwargs):</span><br><span class=\"line\">    # 添加定时任务，设置时间</span><br><span class=\"line\">    # sender.add_periodic_task(10.0, test1.s(&apos;world&apos;), expires=10)</span><br><span class=\"line\">    sender.add_periodic_task(60.0, weixin_remid.s())</span><br><span class=\"line\">    sender.add_periodic_task(10.0, user_unionid.s())</span><br><span class=\"line\">    sender.add_periodic_task(120.0, get_list.s())</span><br><span class=\"line\">    </span><br><span class=\"line\">@CELERY.task</span><br><span class=\"line\">def test1(arg1=&quot;arg1&quot;):</span><br><span class=\"line\">    print arg1,111</span><br><span class=\"line\">    return 5</span><br><span class=\"line\">    </span><br><span class=\"line\">@CELERY.task</span><br><span class=\"line\">def user_unionid():</span><br><span class=\"line\">    count = get_people_unionid()</span><br><span class=\"line\">    print str(count) + &apos;user unionid...&apos;</span><br></pre></td></tr></table></figure>\n<p>编写xxx.py文件，完成异步任务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.add.apply_async(args=[3,7],expires=10)</span><br><span class=\"line\"># expires：任务过期时间，参数类型可以是 int，也可以是 datetime</span><br><span class=\"line\"># eta (estimated time of arrival)：指定任务被调度的具体时间，参数类型是 datetime</span><br><span class=\"line\"># countdown：指定多少秒后执行任务</span><br></pre></td></tr></table></figure>\n<h3 id=\"celery-启动\"><a href=\"#celery-启动\" class=\"headerlink\" title=\"celery 启动\"></a>celery 启动</h3><p>在celery_worker.py文件下：</p>\n<blockquote>\n<p>celery -A celery_worker.CELERY worker –loglevel=info –beat</p>\n</blockquote>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ol>\n<li>编写完tasks.py文件后，在启动Flask项目时，应该在主文件中导入tasks.py文件<blockquote>\n<p>from .tasks import test1</p>\n</blockquote>\n</li>\n<li>定时任务，也可以在配置文件中进行配置描述（此方法未试验成功，setting配置无响应）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from datetime import timedelta</span><br><span class=\"line\"></span><br><span class=\"line\">CELERYBEAT_SCHEDULE = &#123;</span><br><span class=\"line\">    &apos;add-every-30-seconds&apos;: &#123;</span><br><span class=\"line\">        &apos;task&apos;: &apos;tasks.add&apos;,</span><br><span class=\"line\">        &apos;schedule&apos;: timedelta(seconds=30),</span><br><span class=\"line\">        &apos;args&apos;: (16, 16)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CELERY_TIMEZONE = &apos;UTC&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from celery.schedules import crontab</span><br><span class=\"line\"></span><br><span class=\"line\">CELERYBEAT_SCHEDULE = &#123;</span><br><span class=\"line\">    # Executes every Monday morning at 7:30 A.M</span><br><span class=\"line\">    &apos;add-every-monday-morning&apos;: &#123;</span><br><span class=\"line\">        &apos;task&apos;: &apos;tasks.add&apos;,</span><br><span class=\"line\">        &apos;schedule&apos;: crontab(hour=7, minute=30, day_of_week=1),</span><br><span class=\"line\">        &apos;args&apos;: (16, 16),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>celery 和 Flask 同时使用时一定要注意实例的config配置问题，以免出现混乱</li>\n<li>上文为celery读取数据库进行定时任务（未涉及任务结果的重新保存）</li>\n</ol>\n"},{"title":"CDN详解","abbrlink":3523045194,"date":"2019-03-23T15:00:22.000Z","updated":"2019-03-23T15:01:34.000Z","_content":"### 概念\n> **CDN** 的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。   ---百度百科\n\n### 基本思路\n> 基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。\n\nCDN 主要是为了解决网络拥挤的状况，避免网络不佳带来的延迟，同时也解决了不同运营商之间的带宽限制，提高用户的访问速度\n\n### 关键技术\n> **内容发布**：它借助于建立索引、缓存、流分裂、组播（Multicast）等技术，将内容发布或投递到距离用户最近的远程服务点（POP）处\n\n> **内容路由**：它是整体性的网络负载均衡技术，通过内容路由器中的重定向（DNS）机制，在多个远程POP上均衡用户的请求，以使用户请求得到最近内容源的响应\n\n> **内容交换**：它根据内容的可用性、服务器的可用性以及用户的背景，在POP的缓存服务器上，利用应用层交换、流分裂、重定向（ICP、WCCP）等技术，智能地平衡负载流量\n\n> **性能管理**：它通过内部和外部监控系统，获取网络部件的状况信息，测量内容发布的端到端性能（如包丢失、延时、平均带宽、启动时间、帧速率等），保证网络处于最佳的运行状态。\n\n### CDN的优势\n\n- CDN能几乎涵盖国内所有线路。而在可靠性上， CDN 在结构上实现了多点的冗余，即使某一个节点由于意外发生故障，对网站的访问能够被自动导向其他的健康节点进行响应。CDN能轻松实现网站的全国铺设，不必考虑服务器的投入与托管、不必考虑新增带宽的成本、不必考虑多台服务器的镜像同步、不必考虑更多的管理维护技术人员。\n- 消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量。\n- 广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种D.D.o.S攻击对网站的影响，同时保证较好的服务质量 。\n\n\n### CDN 基本工作流程\n\n#### 正常用户请求流程\n1. 用户在自己的浏览器中输入要访问的网站域名。\n2. 浏览器向本地DNS服务器请求对该域名的解析。\n3. 本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求。\n4. 本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以递归方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器。\n5. 浏览器得到域名解析结果，就是该域名相应的服务设备的IP地址。\n6. 浏览器向服务器请求内容。\n7. 服务器将用户请求内容传送给浏览器。\n\n#### 添加CDN后 用户请求流程\n\n1. 当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。\n2. CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。\n3. 用户向CDN的全局负载均衡设备发起内容URL访问请求。\n4. CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。\n5. 区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。\n6. 全局负载均衡设备把服务器的IP地址返回给用户。\n7. 用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。\n\n### CDN 名词解释\n[阿里云 CDN 名词解释](https://help.aliyun.com/document_detail/27102.html?spm=a2c4g.11186623.6.554.4b4579c6Hk2aHJ)\n\n\n### CDN 配置流程（阿里CDN配置流程）\n\n1. 开通CDN服务\n2. 添加加速域名\n3. 配置CNAME\n\n\n#### 参考链接：\n[CDN的基本工作过程](http://book.51cto.com/art/201205/338756.htm)\n\n[百度知道 CDN词条](https://baike.baidu.com/item/CDN/420951?fr=aladdin)\n\n[阿里CDN配置](https://help.aliyun.com/document_detail/27112.html?spm=a2c4g.11186623.6.565.69d223f8hQdosq)\n\n","source":"_posts/CDN详解.md","raw":"---\ntitle: CDN详解\ntags:\n  - 学习笔记\ncategories: 环境搭建\nabbrlink: 3523045194\ndate: 2019-03-23 23:00:22\nupdated: 2019-03-23 23:01:34\n---\n### 概念\n> **CDN** 的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。   ---百度百科\n\n### 基本思路\n> 基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。\n\nCDN 主要是为了解决网络拥挤的状况，避免网络不佳带来的延迟，同时也解决了不同运营商之间的带宽限制，提高用户的访问速度\n\n### 关键技术\n> **内容发布**：它借助于建立索引、缓存、流分裂、组播（Multicast）等技术，将内容发布或投递到距离用户最近的远程服务点（POP）处\n\n> **内容路由**：它是整体性的网络负载均衡技术，通过内容路由器中的重定向（DNS）机制，在多个远程POP上均衡用户的请求，以使用户请求得到最近内容源的响应\n\n> **内容交换**：它根据内容的可用性、服务器的可用性以及用户的背景，在POP的缓存服务器上，利用应用层交换、流分裂、重定向（ICP、WCCP）等技术，智能地平衡负载流量\n\n> **性能管理**：它通过内部和外部监控系统，获取网络部件的状况信息，测量内容发布的端到端性能（如包丢失、延时、平均带宽、启动时间、帧速率等），保证网络处于最佳的运行状态。\n\n### CDN的优势\n\n- CDN能几乎涵盖国内所有线路。而在可靠性上， CDN 在结构上实现了多点的冗余，即使某一个节点由于意外发生故障，对网站的访问能够被自动导向其他的健康节点进行响应。CDN能轻松实现网站的全国铺设，不必考虑服务器的投入与托管、不必考虑新增带宽的成本、不必考虑多台服务器的镜像同步、不必考虑更多的管理维护技术人员。\n- 消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量。\n- 广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种D.D.o.S攻击对网站的影响，同时保证较好的服务质量 。\n\n\n### CDN 基本工作流程\n\n#### 正常用户请求流程\n1. 用户在自己的浏览器中输入要访问的网站域名。\n2. 浏览器向本地DNS服务器请求对该域名的解析。\n3. 本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求。\n4. 本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以递归方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器。\n5. 浏览器得到域名解析结果，就是该域名相应的服务设备的IP地址。\n6. 浏览器向服务器请求内容。\n7. 服务器将用户请求内容传送给浏览器。\n\n#### 添加CDN后 用户请求流程\n\n1. 当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。\n2. CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。\n3. 用户向CDN的全局负载均衡设备发起内容URL访问请求。\n4. CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。\n5. 区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。\n6. 全局负载均衡设备把服务器的IP地址返回给用户。\n7. 用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。\n\n### CDN 名词解释\n[阿里云 CDN 名词解释](https://help.aliyun.com/document_detail/27102.html?spm=a2c4g.11186623.6.554.4b4579c6Hk2aHJ)\n\n\n### CDN 配置流程（阿里CDN配置流程）\n\n1. 开通CDN服务\n2. 添加加速域名\n3. 配置CNAME\n\n\n#### 参考链接：\n[CDN的基本工作过程](http://book.51cto.com/art/201205/338756.htm)\n\n[百度知道 CDN词条](https://baike.baidu.com/item/CDN/420951?fr=aladdin)\n\n[阿里CDN配置](https://help.aliyun.com/document_detail/27112.html?spm=a2c4g.11186623.6.565.69d223f8hQdosq)\n\n","slug":"CDN详解","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppkc00027rs63ozjphbb","content":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p><strong>CDN</strong> 的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。   —百度百科</p>\n</blockquote>\n<h3 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h3><blockquote>\n<p>基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</p>\n</blockquote>\n<p>CDN 主要是为了解决网络拥挤的状况，避免网络不佳带来的延迟，同时也解决了不同运营商之间的带宽限制，提高用户的访问速度</p>\n<h3 id=\"关键技术\"><a href=\"#关键技术\" class=\"headerlink\" title=\"关键技术\"></a>关键技术</h3><blockquote>\n<p><strong>内容发布</strong>：它借助于建立索引、缓存、流分裂、组播（Multicast）等技术，将内容发布或投递到距离用户最近的远程服务点（POP）处</p>\n</blockquote>\n<blockquote>\n<p><strong>内容路由</strong>：它是整体性的网络负载均衡技术，通过内容路由器中的重定向（DNS）机制，在多个远程POP上均衡用户的请求，以使用户请求得到最近内容源的响应</p>\n</blockquote>\n<blockquote>\n<p><strong>内容交换</strong>：它根据内容的可用性、服务器的可用性以及用户的背景，在POP的缓存服务器上，利用应用层交换、流分裂、重定向（ICP、WCCP）等技术，智能地平衡负载流量</p>\n</blockquote>\n<blockquote>\n<p><strong>性能管理</strong>：它通过内部和外部监控系统，获取网络部件的状况信息，测量内容发布的端到端性能（如包丢失、延时、平均带宽、启动时间、帧速率等），保证网络处于最佳的运行状态。</p>\n</blockquote>\n<h3 id=\"CDN的优势\"><a href=\"#CDN的优势\" class=\"headerlink\" title=\"CDN的优势\"></a>CDN的优势</h3><ul>\n<li>CDN能几乎涵盖国内所有线路。而在可靠性上， CDN 在结构上实现了多点的冗余，即使某一个节点由于意外发生故障，对网站的访问能够被自动导向其他的健康节点进行响应。CDN能轻松实现网站的全国铺设，不必考虑服务器的投入与托管、不必考虑新增带宽的成本、不必考虑多台服务器的镜像同步、不必考虑更多的管理维护技术人员。</li>\n<li>消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量。</li>\n<li>广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种D.D.o.S攻击对网站的影响，同时保证较好的服务质量 。</li>\n</ul>\n<h3 id=\"CDN-基本工作流程\"><a href=\"#CDN-基本工作流程\" class=\"headerlink\" title=\"CDN 基本工作流程\"></a>CDN 基本工作流程</h3><h4 id=\"正常用户请求流程\"><a href=\"#正常用户请求流程\" class=\"headerlink\" title=\"正常用户请求流程\"></a>正常用户请求流程</h4><ol>\n<li>用户在自己的浏览器中输入要访问的网站域名。</li>\n<li>浏览器向本地DNS服务器请求对该域名的解析。</li>\n<li>本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求。</li>\n<li>本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以递归方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器。</li>\n<li>浏览器得到域名解析结果，就是该域名相应的服务设备的IP地址。</li>\n<li>浏览器向服务器请求内容。</li>\n<li>服务器将用户请求内容传送给浏览器。</li>\n</ol>\n<h4 id=\"添加CDN后-用户请求流程\"><a href=\"#添加CDN后-用户请求流程\" class=\"headerlink\" title=\"添加CDN后 用户请求流程\"></a>添加CDN后 用户请求流程</h4><ol>\n<li>当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。</li>\n<li>CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。</li>\n<li>用户向CDN的全局负载均衡设备发起内容URL访问请求。</li>\n<li>CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</li>\n<li>区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</li>\n<li>全局负载均衡设备把服务器的IP地址返回给用户。</li>\n<li>用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</li>\n</ol>\n<h3 id=\"CDN-名词解释\"><a href=\"#CDN-名词解释\" class=\"headerlink\" title=\"CDN 名词解释\"></a>CDN 名词解释</h3><p><a href=\"https://help.aliyun.com/document_detail/27102.html?spm=a2c4g.11186623.6.554.4b4579c6Hk2aHJ\" target=\"_blank\" rel=\"noopener\">阿里云 CDN 名词解释</a></p>\n<h3 id=\"CDN-配置流程（阿里CDN配置流程）\"><a href=\"#CDN-配置流程（阿里CDN配置流程）\" class=\"headerlink\" title=\"CDN 配置流程（阿里CDN配置流程）\"></a>CDN 配置流程（阿里CDN配置流程）</h3><ol>\n<li>开通CDN服务</li>\n<li>添加加速域名</li>\n<li>配置CNAME</li>\n</ol>\n<h4 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h4><p><a href=\"http://book.51cto.com/art/201205/338756.htm\" target=\"_blank\" rel=\"noopener\">CDN的基本工作过程</a></p>\n<p><a href=\"https://baike.baidu.com/item/CDN/420951?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度知道 CDN词条</a></p>\n<p><a href=\"https://help.aliyun.com/document_detail/27112.html?spm=a2c4g.11186623.6.565.69d223f8hQdosq\" target=\"_blank\" rel=\"noopener\">阿里CDN配置</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p><strong>CDN</strong> 的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。   —百度百科</p>\n</blockquote>\n<h3 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h3><blockquote>\n<p>基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</p>\n</blockquote>\n<p>CDN 主要是为了解决网络拥挤的状况，避免网络不佳带来的延迟，同时也解决了不同运营商之间的带宽限制，提高用户的访问速度</p>\n<h3 id=\"关键技术\"><a href=\"#关键技术\" class=\"headerlink\" title=\"关键技术\"></a>关键技术</h3><blockquote>\n<p><strong>内容发布</strong>：它借助于建立索引、缓存、流分裂、组播（Multicast）等技术，将内容发布或投递到距离用户最近的远程服务点（POP）处</p>\n</blockquote>\n<blockquote>\n<p><strong>内容路由</strong>：它是整体性的网络负载均衡技术，通过内容路由器中的重定向（DNS）机制，在多个远程POP上均衡用户的请求，以使用户请求得到最近内容源的响应</p>\n</blockquote>\n<blockquote>\n<p><strong>内容交换</strong>：它根据内容的可用性、服务器的可用性以及用户的背景，在POP的缓存服务器上，利用应用层交换、流分裂、重定向（ICP、WCCP）等技术，智能地平衡负载流量</p>\n</blockquote>\n<blockquote>\n<p><strong>性能管理</strong>：它通过内部和外部监控系统，获取网络部件的状况信息，测量内容发布的端到端性能（如包丢失、延时、平均带宽、启动时间、帧速率等），保证网络处于最佳的运行状态。</p>\n</blockquote>\n<h3 id=\"CDN的优势\"><a href=\"#CDN的优势\" class=\"headerlink\" title=\"CDN的优势\"></a>CDN的优势</h3><ul>\n<li>CDN能几乎涵盖国内所有线路。而在可靠性上， CDN 在结构上实现了多点的冗余，即使某一个节点由于意外发生故障，对网站的访问能够被自动导向其他的健康节点进行响应。CDN能轻松实现网站的全国铺设，不必考虑服务器的投入与托管、不必考虑新增带宽的成本、不必考虑多台服务器的镜像同步、不必考虑更多的管理维护技术人员。</li>\n<li>消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量。</li>\n<li>广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种D.D.o.S攻击对网站的影响，同时保证较好的服务质量 。</li>\n</ul>\n<h3 id=\"CDN-基本工作流程\"><a href=\"#CDN-基本工作流程\" class=\"headerlink\" title=\"CDN 基本工作流程\"></a>CDN 基本工作流程</h3><h4 id=\"正常用户请求流程\"><a href=\"#正常用户请求流程\" class=\"headerlink\" title=\"正常用户请求流程\"></a>正常用户请求流程</h4><ol>\n<li>用户在自己的浏览器中输入要访问的网站域名。</li>\n<li>浏览器向本地DNS服务器请求对该域名的解析。</li>\n<li>本地DNS服务器中如果缓存有这个域名的解析结果，则直接响应用户的解析请求。</li>\n<li>本地DNS服务器中如果没有关于这个域名的解析结果的缓存，则以递归方式向整个DNS系统请求解析，获得应答后将结果反馈给浏览器。</li>\n<li>浏览器得到域名解析结果，就是该域名相应的服务设备的IP地址。</li>\n<li>浏览器向服务器请求内容。</li>\n<li>服务器将用户请求内容传送给浏览器。</li>\n</ol>\n<h4 id=\"添加CDN后-用户请求流程\"><a href=\"#添加CDN后-用户请求流程\" class=\"headerlink\" title=\"添加CDN后 用户请求流程\"></a>添加CDN后 用户请求流程</h4><ol>\n<li>当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。</li>\n<li>CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。</li>\n<li>用户向CDN的全局负载均衡设备发起内容URL访问请求。</li>\n<li>CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</li>\n<li>区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</li>\n<li>全局负载均衡设备把服务器的IP地址返回给用户。</li>\n<li>用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</li>\n</ol>\n<h3 id=\"CDN-名词解释\"><a href=\"#CDN-名词解释\" class=\"headerlink\" title=\"CDN 名词解释\"></a>CDN 名词解释</h3><p><a href=\"https://help.aliyun.com/document_detail/27102.html?spm=a2c4g.11186623.6.554.4b4579c6Hk2aHJ\" target=\"_blank\" rel=\"noopener\">阿里云 CDN 名词解释</a></p>\n<h3 id=\"CDN-配置流程（阿里CDN配置流程）\"><a href=\"#CDN-配置流程（阿里CDN配置流程）\" class=\"headerlink\" title=\"CDN 配置流程（阿里CDN配置流程）\"></a>CDN 配置流程（阿里CDN配置流程）</h3><ol>\n<li>开通CDN服务</li>\n<li>添加加速域名</li>\n<li>配置CNAME</li>\n</ol>\n<h4 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h4><p><a href=\"http://book.51cto.com/art/201205/338756.htm\" target=\"_blank\" rel=\"noopener\">CDN的基本工作过程</a></p>\n<p><a href=\"https://baike.baidu.com/item/CDN/420951?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度知道 CDN词条</a></p>\n<p><a href=\"https://help.aliyun.com/document_detail/27112.html?spm=a2c4g.11186623.6.565.69d223f8hQdosq\" target=\"_blank\" rel=\"noopener\">阿里CDN配置</a></p>\n"},{"title":"MySQL数据库","abbrlink":2653527150,"date":"2019-01-19T13:43:28.000Z","updated":"2019-02-15T14:22:22.000Z","_content":"# MySQL数据库相关操作\n\n#### 1.安装MySQL数据库\n\n查看mysql支持的存储引擎，\"show engines;\" \n\n| Engine| Support | Comment | Transactions | XA   | Savepoints |\n---|---|---|----|---|---\n| MyISAM  | YES | MyISAM storage engine           | NO           | NO   | NO         |\n| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |\n| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |\n| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |\n| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |\n| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |\n| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |\n| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |\n| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |\n\n关于存储引擎的介绍：\n[四种mysql存储引擎](https://www.cnblogs.com/wcwen1990/p/6655416.html)\n\n\nDEFAULT为默认存储引擎，因为MyISAM引擎（一般为默认）不支持事务也不支持外键，所以需要用到Innodb引擎，于是将mysql的默认引擎设置为innodb\n\n在配置文件my.cnf中的 [mysqld] 下面修改default-storage-engine=INNODB，如果没有则添加\n\n重启mysql服务器：service mysqld restart \n\n查看数据库默认使用的存储引擎：\n\n> show variables like '%storage_engine%';\n\n查看已有表的存储引擎：\n\n> show create table Tablename(表名);\n\n\n#### 2.设置MySQL数据库的编码格式\nutf-8编码可能2个字节、3个字节、4个字节的字符，但是MySQL的utf8编码只支持3字节的数据，而移动端的表情数据是4个字节的字符。如果直接往采用utf-8编码的数据库中插入表情数据，Java程序中将报SQL异常\n\n可以对4字节的字符进行编码存储，然后取出来的时候，再进行解码。但是这样做会使得任何使用该字符的地方都要进行编码与解码。\n\nutf8mb4编码是utf8编码的超集，兼容utf8，并且能存储4字节的表情字符。 \n采用utf8mb4编码的好处是：存储与获取数据的时候，不用再考虑表情字符的编码与解码问题\n\n##### 更改数据库的编码为utf8mb4\n**MySQL的版本**:utf8mb4的最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本\n\n**修改MySQL配置文件**:\n\n修改mysql配置文件my.cnf（windows为my.ini）\n\nmy.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容： \n\n[client] \n\ndefault-character-set = utf8mb4 \n\n[mysql] \n\ndefault-character-set = utf8mb4 \n\n[mysqld] \n\ncharacter-set-client-handshake = FALSE \n\ncharacter-set-server = utf8mb4 \n\ncollation-server = utf8mb4_unicode_ci \n\ninit_connect='SET NAMES utf8mb4'\n\n**重启数据库，检查变量**\n> SHOW VARIABLES WHERE Variable_name LIKE 'character_set_%' OR Variable_name LIKE 'collation%';\n\nVariable_name  | Value | 描述\n---|---|---\ncharacter_set_client | utf8mb4 | 客户端来源数据使用的字符集\ncharacter_set_connection |  utf8mb4|连接层字符集\ncharacter_set_database | utf8mb4 | 当前选中数据库的默认字符集\ncharacter_set_filesystem | binary\ncharacter_set_results | utf8mb4 | 查询结果字符集\ncharacter_set_server | utf8mb4 | 默认的内部操作字符集\ncharacter_set_system | utf8\ncollation_connection | utf8mb4_unicode_ci\ncollation_database | utf8mb4_unicode_ci\ncollation_server | utf8mb4_unicode_ci\n\n**数据库连接的配置**\n\n数据库连接参数中: \n\ncharacterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。 \n\n而autoReconnect=true是必须加上的。\n\n**将数据库和已经建好的表也转换成utf8mb4**\n\n**更改数据库编码**：ALTER DATABASE caitu99 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\n\n**更改表编码**：ALTER TABLE TABLE_NAME CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; \n\n如有必要，还可以更改列的编码\n\n#### 3.更改数据库的存储路径\n\n**在mysql下查看数据存储路径**(默认位置如下)\n```\nmysql> show variables like '%datadir%';\n\n+---------------+-----------------+\n| Variable_name | Value           |\n+---------------+-----------------+\n| datadir       | /var/lib/mysql/ |\n+---------------+-----------------+\n1 row in set (0.04 sec)\n```\n**关闭mysql**\n> [root@mysql ~]# systemctl stop mysql　　　　 //停止mysql\n\n> [root@mysql ~]# mv /var/lib/mysql   /var/lib/mysql.BAK　　　　//数据改名备份一下，方便回滚\n\n> [root@mysql ~]# mkdir /data　　　　//这里新建一个假设的新目录/data/\n\n> [root@mysql ~]# rsync -av  /var/lib/mysql   /data/　　　　//复制数据到新目录。rsync命令没有可以用yum安装；也可以用cp命令复制;此处也有很多人在用mv直接移动,省去权限问题的麻烦,如果直接用mv记得要备份好原数据\n\n**更改my.cnf文件**\n> [root@mysql ~]# vim /etc/my.cnf　　　//编辑 my.cnf。如果默认没有，可以\"cp /usr/share/mysql/my-default.cnf  /etc/my.cnf\"\n\n[client]\n\nport = 3306\nsocket = /data/mysql/mysql.sock\n\n[mysqld]\n\ndatadir = /data/mysql\n \nsocket = /data/mysql/mysql.sock\n\n备注：其实socke可以不用改的  只要改下 datadir就行了 如果安装innodb 那么 innodbdir 也要改\n\n[mysqld_safe]\n\nsocket = /home/mysql/mysql.sock\n\n[mysql.server]\n\nsocket = /home/mysql/mysql.sock\n\n**再次启动mysql**\n> [root@mysql ~]# systemctl start mysql\n\n**启动失败解决办法**\n\n在出现报错情况下，优先去查看日志去分析问题\n\n1. 检查selinux\n\n一个简单的解决办法是使用命令暂时关闭selinux，以便让你的操作可以继续下去\n\nsetenforce 0\n\n但最好使用一个永久方法，以便在重启后继续不要这货\n\n修改/etc/selinux/config文件中设置SELINUX=disabled ，然后重启或等待下次重启。（如果没有这个就看下面的方法)\n\n2. 检查apparmor\n\n它也对mysql所能使用的目录权限做了限制\n\n在 /etc/apparmor.d/usr.sbin.mysqld 这个文件中，有这两行，规定了mysql使用的数据文件路径权限\n\n/var/lib/mysql/ r,\n\n/var/lib/mysql/** rwk,\n\n我想把数据文件移动到/data/mysql下，那么为了使mysqld可以使用/data/mysql这个目录，照上面那两条，增加下面这两条就可以了\n\n/data/mysql/ r,\n\n/data/mysql/** rwk,\n\n重启: sudo service apparmor restart\n\n如有必要,将socket新目录也添加上\n","source":"_posts/MySQL 数据库安装和配置.md","raw":"---\ntitle: MySQL数据库\ntags:\n  - mysql\ncategories: 数据库\nabbrlink: 2653527150\ndate: 2019-01-19 21:43:28\nupdated: 2019-02-15 22:22:22\n---\n# MySQL数据库相关操作\n\n#### 1.安装MySQL数据库\n\n查看mysql支持的存储引擎，\"show engines;\" \n\n| Engine| Support | Comment | Transactions | XA   | Savepoints |\n---|---|---|----|---|---\n| MyISAM  | YES | MyISAM storage engine           | NO           | NO   | NO         |\n| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |\n| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |\n| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |\n| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |\n| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |\n| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |\n| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |\n| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |\n\n关于存储引擎的介绍：\n[四种mysql存储引擎](https://www.cnblogs.com/wcwen1990/p/6655416.html)\n\n\nDEFAULT为默认存储引擎，因为MyISAM引擎（一般为默认）不支持事务也不支持外键，所以需要用到Innodb引擎，于是将mysql的默认引擎设置为innodb\n\n在配置文件my.cnf中的 [mysqld] 下面修改default-storage-engine=INNODB，如果没有则添加\n\n重启mysql服务器：service mysqld restart \n\n查看数据库默认使用的存储引擎：\n\n> show variables like '%storage_engine%';\n\n查看已有表的存储引擎：\n\n> show create table Tablename(表名);\n\n\n#### 2.设置MySQL数据库的编码格式\nutf-8编码可能2个字节、3个字节、4个字节的字符，但是MySQL的utf8编码只支持3字节的数据，而移动端的表情数据是4个字节的字符。如果直接往采用utf-8编码的数据库中插入表情数据，Java程序中将报SQL异常\n\n可以对4字节的字符进行编码存储，然后取出来的时候，再进行解码。但是这样做会使得任何使用该字符的地方都要进行编码与解码。\n\nutf8mb4编码是utf8编码的超集，兼容utf8，并且能存储4字节的表情字符。 \n采用utf8mb4编码的好处是：存储与获取数据的时候，不用再考虑表情字符的编码与解码问题\n\n##### 更改数据库的编码为utf8mb4\n**MySQL的版本**:utf8mb4的最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本\n\n**修改MySQL配置文件**:\n\n修改mysql配置文件my.cnf（windows为my.ini）\n\nmy.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容： \n\n[client] \n\ndefault-character-set = utf8mb4 \n\n[mysql] \n\ndefault-character-set = utf8mb4 \n\n[mysqld] \n\ncharacter-set-client-handshake = FALSE \n\ncharacter-set-server = utf8mb4 \n\ncollation-server = utf8mb4_unicode_ci \n\ninit_connect='SET NAMES utf8mb4'\n\n**重启数据库，检查变量**\n> SHOW VARIABLES WHERE Variable_name LIKE 'character_set_%' OR Variable_name LIKE 'collation%';\n\nVariable_name  | Value | 描述\n---|---|---\ncharacter_set_client | utf8mb4 | 客户端来源数据使用的字符集\ncharacter_set_connection |  utf8mb4|连接层字符集\ncharacter_set_database | utf8mb4 | 当前选中数据库的默认字符集\ncharacter_set_filesystem | binary\ncharacter_set_results | utf8mb4 | 查询结果字符集\ncharacter_set_server | utf8mb4 | 默认的内部操作字符集\ncharacter_set_system | utf8\ncollation_connection | utf8mb4_unicode_ci\ncollation_database | utf8mb4_unicode_ci\ncollation_server | utf8mb4_unicode_ci\n\n**数据库连接的配置**\n\n数据库连接参数中: \n\ncharacterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。 \n\n而autoReconnect=true是必须加上的。\n\n**将数据库和已经建好的表也转换成utf8mb4**\n\n**更改数据库编码**：ALTER DATABASE caitu99 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\n\n**更改表编码**：ALTER TABLE TABLE_NAME CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; \n\n如有必要，还可以更改列的编码\n\n#### 3.更改数据库的存储路径\n\n**在mysql下查看数据存储路径**(默认位置如下)\n```\nmysql> show variables like '%datadir%';\n\n+---------------+-----------------+\n| Variable_name | Value           |\n+---------------+-----------------+\n| datadir       | /var/lib/mysql/ |\n+---------------+-----------------+\n1 row in set (0.04 sec)\n```\n**关闭mysql**\n> [root@mysql ~]# systemctl stop mysql　　　　 //停止mysql\n\n> [root@mysql ~]# mv /var/lib/mysql   /var/lib/mysql.BAK　　　　//数据改名备份一下，方便回滚\n\n> [root@mysql ~]# mkdir /data　　　　//这里新建一个假设的新目录/data/\n\n> [root@mysql ~]# rsync -av  /var/lib/mysql   /data/　　　　//复制数据到新目录。rsync命令没有可以用yum安装；也可以用cp命令复制;此处也有很多人在用mv直接移动,省去权限问题的麻烦,如果直接用mv记得要备份好原数据\n\n**更改my.cnf文件**\n> [root@mysql ~]# vim /etc/my.cnf　　　//编辑 my.cnf。如果默认没有，可以\"cp /usr/share/mysql/my-default.cnf  /etc/my.cnf\"\n\n[client]\n\nport = 3306\nsocket = /data/mysql/mysql.sock\n\n[mysqld]\n\ndatadir = /data/mysql\n \nsocket = /data/mysql/mysql.sock\n\n备注：其实socke可以不用改的  只要改下 datadir就行了 如果安装innodb 那么 innodbdir 也要改\n\n[mysqld_safe]\n\nsocket = /home/mysql/mysql.sock\n\n[mysql.server]\n\nsocket = /home/mysql/mysql.sock\n\n**再次启动mysql**\n> [root@mysql ~]# systemctl start mysql\n\n**启动失败解决办法**\n\n在出现报错情况下，优先去查看日志去分析问题\n\n1. 检查selinux\n\n一个简单的解决办法是使用命令暂时关闭selinux，以便让你的操作可以继续下去\n\nsetenforce 0\n\n但最好使用一个永久方法，以便在重启后继续不要这货\n\n修改/etc/selinux/config文件中设置SELINUX=disabled ，然后重启或等待下次重启。（如果没有这个就看下面的方法)\n\n2. 检查apparmor\n\n它也对mysql所能使用的目录权限做了限制\n\n在 /etc/apparmor.d/usr.sbin.mysqld 这个文件中，有这两行，规定了mysql使用的数据文件路径权限\n\n/var/lib/mysql/ r,\n\n/var/lib/mysql/** rwk,\n\n我想把数据文件移动到/data/mysql下，那么为了使mysqld可以使用/data/mysql这个目录，照上面那两条，增加下面这两条就可以了\n\n/data/mysql/ r,\n\n/data/mysql/** rwk,\n\n重启: sudo service apparmor restart\n\n如有必要,将socket新目录也添加上\n","slug":"MySQL 数据库安装和配置","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppkm00067rs6hrio5mga","content":"<h1 id=\"MySQL数据库相关操作\"><a href=\"#MySQL数据库相关操作\" class=\"headerlink\" title=\"MySQL数据库相关操作\"></a>MySQL数据库相关操作</h1><h4 id=\"1-安装MySQL数据库\"><a href=\"#1-安装MySQL数据库\" class=\"headerlink\" title=\"1.安装MySQL数据库\"></a>1.安装MySQL数据库</h4><p>查看mysql支持的存储引擎，”show engines;” </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Engine</th>\n<th>Support</th>\n<th>Comment</th>\n<th>Transactions</th>\n<th>XA</th>\n<th>Savepoints</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>MyISAM</td>\n<td>YES</td>\n<td>MyISAM storage engine</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>CSV</td>\n<td>YES</td>\n<td>CSV storage engine</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>MRG_MYISAM</td>\n<td>YES</td>\n<td>Collection of identical MyISAM tables</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>BLACKHOLE</td>\n<td>YES</td>\n<td>/dev/null storage engine (anything you write to it disappears)</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>PERFORMANCE_SCHEMA</td>\n<td>YES</td>\n<td>Performance Schema</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>InnoDB</td>\n<td>DEFAULT</td>\n<td>Supports transactions, row-level locking, and foreign keys</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ARCHIVE</td>\n<td>YES</td>\n<td>Archive storage engine</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>MEMORY</td>\n<td>YES</td>\n<td>Hash based, stored in memory, useful for temporary tables</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>FEDERATED</td>\n<td>NO</td>\n<td>Federated MySQL storage engine</td>\n<td>NULL</td>\n<td>NULL</td>\n<td>NULL</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>关于存储引擎的介绍：<br><a href=\"https://www.cnblogs.com/wcwen1990/p/6655416.html\" target=\"_blank\" rel=\"noopener\">四种mysql存储引擎</a></p>\n<p>DEFAULT为默认存储引擎，因为MyISAM引擎（一般为默认）不支持事务也不支持外键，所以需要用到Innodb引擎，于是将mysql的默认引擎设置为innodb</p>\n<p>在配置文件my.cnf中的 [mysqld] 下面修改default-storage-engine=INNODB，如果没有则添加</p>\n<p>重启mysql服务器：service mysqld restart </p>\n<p>查看数据库默认使用的存储引擎：</p>\n<blockquote>\n<p>show variables like ‘%storage_engine%’;</p>\n</blockquote>\n<p>查看已有表的存储引擎：</p>\n<blockquote>\n<p>show create table Tablename(表名);</p>\n</blockquote>\n<h4 id=\"2-设置MySQL数据库的编码格式\"><a href=\"#2-设置MySQL数据库的编码格式\" class=\"headerlink\" title=\"2.设置MySQL数据库的编码格式\"></a>2.设置MySQL数据库的编码格式</h4><p>utf-8编码可能2个字节、3个字节、4个字节的字符，但是MySQL的utf8编码只支持3字节的数据，而移动端的表情数据是4个字节的字符。如果直接往采用utf-8编码的数据库中插入表情数据，Java程序中将报SQL异常</p>\n<p>可以对4字节的字符进行编码存储，然后取出来的时候，再进行解码。但是这样做会使得任何使用该字符的地方都要进行编码与解码。</p>\n<p>utf8mb4编码是utf8编码的超集，兼容utf8，并且能存储4字节的表情字符。<br>采用utf8mb4编码的好处是：存储与获取数据的时候，不用再考虑表情字符的编码与解码问题</p>\n<h5 id=\"更改数据库的编码为utf8mb4\"><a href=\"#更改数据库的编码为utf8mb4\" class=\"headerlink\" title=\"更改数据库的编码为utf8mb4\"></a>更改数据库的编码为utf8mb4</h5><p><strong>MySQL的版本</strong>:utf8mb4的最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本</p>\n<p><strong>修改MySQL配置文件</strong>:</p>\n<p>修改mysql配置文件my.cnf（windows为my.ini）</p>\n<p>my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容： </p>\n<p>[client] </p>\n<p>default-character-set = utf8mb4 </p>\n<p>[mysql] </p>\n<p>default-character-set = utf8mb4 </p>\n<p>[mysqld] </p>\n<p>character-set-client-handshake = FALSE </p>\n<p>character-set-server = utf8mb4 </p>\n<p>collation-server = utf8mb4_unicode_ci </p>\n<p>init_connect=’SET NAMES utf8mb4’</p>\n<p><strong>重启数据库，检查变量</strong></p>\n<blockquote>\n<p>SHOW VARIABLES WHERE Variable_name LIKE ‘character_set_%’ OR Variable_name LIKE ‘collation%’;</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Variable_name</th>\n<th>Value</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>character_set_client</td>\n<td>utf8mb4</td>\n<td>客户端来源数据使用的字符集</td>\n</tr>\n<tr>\n<td>character_set_connection</td>\n<td>utf8mb4</td>\n<td>连接层字符集</td>\n</tr>\n<tr>\n<td>character_set_database</td>\n<td>utf8mb4</td>\n<td>当前选中数据库的默认字符集</td>\n</tr>\n<tr>\n<td>character_set_filesystem</td>\n<td>binary</td>\n</tr>\n<tr>\n<td>character_set_results</td>\n<td>utf8mb4</td>\n<td>查询结果字符集</td>\n</tr>\n<tr>\n<td>character_set_server</td>\n<td>utf8mb4</td>\n<td>默认的内部操作字符集</td>\n</tr>\n<tr>\n<td>character_set_system</td>\n<td>utf8</td>\n</tr>\n<tr>\n<td>collation_connection</td>\n<td>utf8mb4_unicode_ci</td>\n</tr>\n<tr>\n<td>collation_database</td>\n<td>utf8mb4_unicode_ci</td>\n</tr>\n<tr>\n<td>collation_server</td>\n<td>utf8mb4_unicode_ci</td>\n</tr>\n</tbody>\n</table>\n<p><strong>数据库连接的配置</strong></p>\n<p>数据库连接参数中: </p>\n<p>characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。 </p>\n<p>而autoReconnect=true是必须加上的。</p>\n<p><strong>将数据库和已经建好的表也转换成utf8mb4</strong></p>\n<p><strong>更改数据库编码</strong>：ALTER DATABASE caitu99 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</p>\n<p><strong>更改表编码</strong>：ALTER TABLE TABLE_NAME CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; </p>\n<p>如有必要，还可以更改列的编码</p>\n<h4 id=\"3-更改数据库的存储路径\"><a href=\"#3-更改数据库的存储路径\" class=\"headerlink\" title=\"3.更改数据库的存储路径\"></a>3.更改数据库的存储路径</h4><p><strong>在mysql下查看数据存储路径</strong>(默认位置如下)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;%datadir%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">+---------------+-----------------+</span><br><span class=\"line\">| Variable_name | Value           |</span><br><span class=\"line\">+---------------+-----------------+</span><br><span class=\"line\">| datadir       | /var/lib/mysql/ |</span><br><span class=\"line\">+---------------+-----------------+</span><br><span class=\"line\">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure></p>\n<p><strong>关闭mysql</strong></p>\n<blockquote>\n<p>[root@mysql ~]# systemctl stop mysql　　　　 //停止mysql</p>\n</blockquote>\n<blockquote>\n<p>[root@mysql ~]# mv /var/lib/mysql   /var/lib/mysql.BAK　　　　//数据改名备份一下，方便回滚</p>\n</blockquote>\n<blockquote>\n<p>[root@mysql ~]# mkdir /data　　　　//这里新建一个假设的新目录/data/</p>\n</blockquote>\n<blockquote>\n<p>[root@mysql ~]# rsync -av  /var/lib/mysql   /data/　　　　//复制数据到新目录。rsync命令没有可以用yum安装；也可以用cp命令复制;此处也有很多人在用mv直接移动,省去权限问题的麻烦,如果直接用mv记得要备份好原数据</p>\n</blockquote>\n<p><strong>更改my.cnf文件</strong></p>\n<blockquote>\n<p>[root@mysql ~]# vim /etc/my.cnf　　　//编辑 my.cnf。如果默认没有，可以”cp /usr/share/mysql/my-default.cnf  /etc/my.cnf”</p>\n</blockquote>\n<p>[client]</p>\n<p>port = 3306<br>socket = /data/mysql/mysql.sock</p>\n<p>[mysqld]</p>\n<p>datadir = /data/mysql</p>\n<p>socket = /data/mysql/mysql.sock</p>\n<p>备注：其实socke可以不用改的  只要改下 datadir就行了 如果安装innodb 那么 innodbdir 也要改</p>\n<p>[mysqld_safe]</p>\n<p>socket = /home/mysql/mysql.sock</p>\n<p>[mysql.server]</p>\n<p>socket = /home/mysql/mysql.sock</p>\n<p><strong>再次启动mysql</strong></p>\n<blockquote>\n<p>[root@mysql ~]# systemctl start mysql</p>\n</blockquote>\n<p><strong>启动失败解决办法</strong></p>\n<p>在出现报错情况下，优先去查看日志去分析问题</p>\n<ol>\n<li>检查selinux</li>\n</ol>\n<p>一个简单的解决办法是使用命令暂时关闭selinux，以便让你的操作可以继续下去</p>\n<p>setenforce 0</p>\n<p>但最好使用一个永久方法，以便在重启后继续不要这货</p>\n<p>修改/etc/selinux/config文件中设置SELINUX=disabled ，然后重启或等待下次重启。（如果没有这个就看下面的方法)</p>\n<ol start=\"2\">\n<li>检查apparmor</li>\n</ol>\n<p>它也对mysql所能使用的目录权限做了限制</p>\n<p>在 /etc/apparmor.d/usr.sbin.mysqld 这个文件中，有这两行，规定了mysql使用的数据文件路径权限</p>\n<p>/var/lib/mysql/ r,</p>\n<p>/var/lib/mysql/** rwk,</p>\n<p>我想把数据文件移动到/data/mysql下，那么为了使mysqld可以使用/data/mysql这个目录，照上面那两条，增加下面这两条就可以了</p>\n<p>/data/mysql/ r,</p>\n<p>/data/mysql/** rwk,</p>\n<p>重启: sudo service apparmor restart</p>\n<p>如有必要,将socket新目录也添加上</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL数据库相关操作\"><a href=\"#MySQL数据库相关操作\" class=\"headerlink\" title=\"MySQL数据库相关操作\"></a>MySQL数据库相关操作</h1><h4 id=\"1-安装MySQL数据库\"><a href=\"#1-安装MySQL数据库\" class=\"headerlink\" title=\"1.安装MySQL数据库\"></a>1.安装MySQL数据库</h4><p>查看mysql支持的存储引擎，”show engines;” </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Engine</th>\n<th>Support</th>\n<th>Comment</th>\n<th>Transactions</th>\n<th>XA</th>\n<th>Savepoints</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>MyISAM</td>\n<td>YES</td>\n<td>MyISAM storage engine</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>CSV</td>\n<td>YES</td>\n<td>CSV storage engine</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>MRG_MYISAM</td>\n<td>YES</td>\n<td>Collection of identical MyISAM tables</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>BLACKHOLE</td>\n<td>YES</td>\n<td>/dev/null storage engine (anything you write to it disappears)</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>PERFORMANCE_SCHEMA</td>\n<td>YES</td>\n<td>Performance Schema</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>InnoDB</td>\n<td>DEFAULT</td>\n<td>Supports transactions, row-level locking, and foreign keys</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ARCHIVE</td>\n<td>YES</td>\n<td>Archive storage engine</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>MEMORY</td>\n<td>YES</td>\n<td>Hash based, stored in memory, useful for temporary tables</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>FEDERATED</td>\n<td>NO</td>\n<td>Federated MySQL storage engine</td>\n<td>NULL</td>\n<td>NULL</td>\n<td>NULL</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>关于存储引擎的介绍：<br><a href=\"https://www.cnblogs.com/wcwen1990/p/6655416.html\" target=\"_blank\" rel=\"noopener\">四种mysql存储引擎</a></p>\n<p>DEFAULT为默认存储引擎，因为MyISAM引擎（一般为默认）不支持事务也不支持外键，所以需要用到Innodb引擎，于是将mysql的默认引擎设置为innodb</p>\n<p>在配置文件my.cnf中的 [mysqld] 下面修改default-storage-engine=INNODB，如果没有则添加</p>\n<p>重启mysql服务器：service mysqld restart </p>\n<p>查看数据库默认使用的存储引擎：</p>\n<blockquote>\n<p>show variables like ‘%storage_engine%’;</p>\n</blockquote>\n<p>查看已有表的存储引擎：</p>\n<blockquote>\n<p>show create table Tablename(表名);</p>\n</blockquote>\n<h4 id=\"2-设置MySQL数据库的编码格式\"><a href=\"#2-设置MySQL数据库的编码格式\" class=\"headerlink\" title=\"2.设置MySQL数据库的编码格式\"></a>2.设置MySQL数据库的编码格式</h4><p>utf-8编码可能2个字节、3个字节、4个字节的字符，但是MySQL的utf8编码只支持3字节的数据，而移动端的表情数据是4个字节的字符。如果直接往采用utf-8编码的数据库中插入表情数据，Java程序中将报SQL异常</p>\n<p>可以对4字节的字符进行编码存储，然后取出来的时候，再进行解码。但是这样做会使得任何使用该字符的地方都要进行编码与解码。</p>\n<p>utf8mb4编码是utf8编码的超集，兼容utf8，并且能存储4字节的表情字符。<br>采用utf8mb4编码的好处是：存储与获取数据的时候，不用再考虑表情字符的编码与解码问题</p>\n<h5 id=\"更改数据库的编码为utf8mb4\"><a href=\"#更改数据库的编码为utf8mb4\" class=\"headerlink\" title=\"更改数据库的编码为utf8mb4\"></a>更改数据库的编码为utf8mb4</h5><p><strong>MySQL的版本</strong>:utf8mb4的最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本</p>\n<p><strong>修改MySQL配置文件</strong>:</p>\n<p>修改mysql配置文件my.cnf（windows为my.ini）</p>\n<p>my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容： </p>\n<p>[client] </p>\n<p>default-character-set = utf8mb4 </p>\n<p>[mysql] </p>\n<p>default-character-set = utf8mb4 </p>\n<p>[mysqld] </p>\n<p>character-set-client-handshake = FALSE </p>\n<p>character-set-server = utf8mb4 </p>\n<p>collation-server = utf8mb4_unicode_ci </p>\n<p>init_connect=’SET NAMES utf8mb4’</p>\n<p><strong>重启数据库，检查变量</strong></p>\n<blockquote>\n<p>SHOW VARIABLES WHERE Variable_name LIKE ‘character_set_%’ OR Variable_name LIKE ‘collation%’;</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Variable_name</th>\n<th>Value</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>character_set_client</td>\n<td>utf8mb4</td>\n<td>客户端来源数据使用的字符集</td>\n</tr>\n<tr>\n<td>character_set_connection</td>\n<td>utf8mb4</td>\n<td>连接层字符集</td>\n</tr>\n<tr>\n<td>character_set_database</td>\n<td>utf8mb4</td>\n<td>当前选中数据库的默认字符集</td>\n</tr>\n<tr>\n<td>character_set_filesystem</td>\n<td>binary</td>\n</tr>\n<tr>\n<td>character_set_results</td>\n<td>utf8mb4</td>\n<td>查询结果字符集</td>\n</tr>\n<tr>\n<td>character_set_server</td>\n<td>utf8mb4</td>\n<td>默认的内部操作字符集</td>\n</tr>\n<tr>\n<td>character_set_system</td>\n<td>utf8</td>\n</tr>\n<tr>\n<td>collation_connection</td>\n<td>utf8mb4_unicode_ci</td>\n</tr>\n<tr>\n<td>collation_database</td>\n<td>utf8mb4_unicode_ci</td>\n</tr>\n<tr>\n<td>collation_server</td>\n<td>utf8mb4_unicode_ci</td>\n</tr>\n</tbody>\n</table>\n<p><strong>数据库连接的配置</strong></p>\n<p>数据库连接参数中: </p>\n<p>characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。 </p>\n<p>而autoReconnect=true是必须加上的。</p>\n<p><strong>将数据库和已经建好的表也转换成utf8mb4</strong></p>\n<p><strong>更改数据库编码</strong>：ALTER DATABASE caitu99 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</p>\n<p><strong>更改表编码</strong>：ALTER TABLE TABLE_NAME CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; </p>\n<p>如有必要，还可以更改列的编码</p>\n<h4 id=\"3-更改数据库的存储路径\"><a href=\"#3-更改数据库的存储路径\" class=\"headerlink\" title=\"3.更改数据库的存储路径\"></a>3.更改数据库的存储路径</h4><p><strong>在mysql下查看数据存储路径</strong>(默认位置如下)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;%datadir%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">+---------------+-----------------+</span><br><span class=\"line\">| Variable_name | Value           |</span><br><span class=\"line\">+---------------+-----------------+</span><br><span class=\"line\">| datadir       | /var/lib/mysql/ |</span><br><span class=\"line\">+---------------+-----------------+</span><br><span class=\"line\">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure></p>\n<p><strong>关闭mysql</strong></p>\n<blockquote>\n<p>[root@mysql ~]# systemctl stop mysql　　　　 //停止mysql</p>\n</blockquote>\n<blockquote>\n<p>[root@mysql ~]# mv /var/lib/mysql   /var/lib/mysql.BAK　　　　//数据改名备份一下，方便回滚</p>\n</blockquote>\n<blockquote>\n<p>[root@mysql ~]# mkdir /data　　　　//这里新建一个假设的新目录/data/</p>\n</blockquote>\n<blockquote>\n<p>[root@mysql ~]# rsync -av  /var/lib/mysql   /data/　　　　//复制数据到新目录。rsync命令没有可以用yum安装；也可以用cp命令复制;此处也有很多人在用mv直接移动,省去权限问题的麻烦,如果直接用mv记得要备份好原数据</p>\n</blockquote>\n<p><strong>更改my.cnf文件</strong></p>\n<blockquote>\n<p>[root@mysql ~]# vim /etc/my.cnf　　　//编辑 my.cnf。如果默认没有，可以”cp /usr/share/mysql/my-default.cnf  /etc/my.cnf”</p>\n</blockquote>\n<p>[client]</p>\n<p>port = 3306<br>socket = /data/mysql/mysql.sock</p>\n<p>[mysqld]</p>\n<p>datadir = /data/mysql</p>\n<p>socket = /data/mysql/mysql.sock</p>\n<p>备注：其实socke可以不用改的  只要改下 datadir就行了 如果安装innodb 那么 innodbdir 也要改</p>\n<p>[mysqld_safe]</p>\n<p>socket = /home/mysql/mysql.sock</p>\n<p>[mysql.server]</p>\n<p>socket = /home/mysql/mysql.sock</p>\n<p><strong>再次启动mysql</strong></p>\n<blockquote>\n<p>[root@mysql ~]# systemctl start mysql</p>\n</blockquote>\n<p><strong>启动失败解决办法</strong></p>\n<p>在出现报错情况下，优先去查看日志去分析问题</p>\n<ol>\n<li>检查selinux</li>\n</ol>\n<p>一个简单的解决办法是使用命令暂时关闭selinux，以便让你的操作可以继续下去</p>\n<p>setenforce 0</p>\n<p>但最好使用一个永久方法，以便在重启后继续不要这货</p>\n<p>修改/etc/selinux/config文件中设置SELINUX=disabled ，然后重启或等待下次重启。（如果没有这个就看下面的方法)</p>\n<ol start=\"2\">\n<li>检查apparmor</li>\n</ol>\n<p>它也对mysql所能使用的目录权限做了限制</p>\n<p>在 /etc/apparmor.d/usr.sbin.mysqld 这个文件中，有这两行，规定了mysql使用的数据文件路径权限</p>\n<p>/var/lib/mysql/ r,</p>\n<p>/var/lib/mysql/** rwk,</p>\n<p>我想把数据文件移动到/data/mysql下，那么为了使mysqld可以使用/data/mysql这个目录，照上面那两条，增加下面这两条就可以了</p>\n<p>/data/mysql/ r,</p>\n<p>/data/mysql/** rwk,</p>\n<p>重启: sudo service apparmor restart</p>\n<p>如有必要,将socket新目录也添加上</p>\n"},{"title":"logging 日志模块","abbrlink":2728557103,"date":"2019-01-19T13:43:28.000Z","updated":"2019-01-25T14:22:22.000Z","_content":"# logging 日志系统\n[toc]\n### 日志级别\n\n\n 等级 | 数值 | 描述\n---|---|---\nNOTSET | 0 |\nDEBUG | 10 | 详细信息，通常仅在诊断问题时才有意义\nINFO | 20 | 确认事情按预期工作\nWARNING | 30 | 警告信息\nERROR | 40 | 由于更严重的问题，该软件无法执行某些功能\nCRITICAL | 50 | 严重错误，表明程序本身可能无法继续运行\n\n默认级别为 WARNING，这意味着将仅跟踪此级别及更高级别的事件，除非日志包已配置为执行其他操作。\n\n### 记录器\nLogger对象有三重的工作。首先，它们向应用程序代码公开了几种方法，以便应用程序可以在运行时记录消息 其次，记录器对象根据严重性（默认过滤工具）或过滤器对象确定要处理的日志消息。第三，记录器对象将相关的日志消息传递给所有感兴趣的日志处理程序。\n\n记录器对象上使用最广泛的方法分为两类：配置和消息发送。\n\n- Logger.setLevel() 指定记录器将处理的最低严重性日志消息，其中debug是最低内置严重性级别，critical是最高内置严重性级别。例如，如果严重性级别为INFO，则记录器将仅处理INFO，WARNING，ERROR和CRITICAL消息，并将忽略DEBUG消息。\n\n- Logger.addHandler()并Logger.removeHandler()从logger对象添加和删除处理程序对象。处理程序中详细介绍了处理程序。\n\n- Logger.addFilter()并Logger.removeFilter()从记录器对象中添加和删除过滤器对象。过滤器对象中详细介绍了 过滤器。\n\n### 处理程序\nHandler对象负责将适当的日志消息（基于日志消息的严重性）分派给处理程序的指定目标。 Logger对象可以使用addHandler()方法向自己添加零个或多个处理程序对象。作为示例场景，应用程序可能希望将所有日志消息发送到日志文件，将错误或更高的所有日志消息发送到标准输出，以及对电子邮件地址至关重要的所有消息。此方案需要三个单独的处理程序，其中每个处理程序负责将特定严重性的消息发送到特定位置。\n\n标准库包含很多处理程序类型（请参阅 有用的处理程序）; 教程主要使用StreamHandler并 FileHandler在其示例中使用。\n\n处理程序中很少有方法可供应用程序开发人员关注。与使用内置处理程序对象（即不创建自定义处理程序）的应用程序开发人员相关的唯一处理程序方法是以下配置方法：\n\n- 该setLevel()方法与logger对象一样，指定将分派到适当目标的最低严重性。为什么有两种setLevel()方法？记录器中设置的级别确定将传递给其处理程序的消息的严重性。每个处理程序中设置的级别确定处理程序将发送哪些消息。\n- setFormatter() 选择要使用的此处理程序的Formatter对象。\n- addFilter()并removeFilter()分别在处理程序上配置和取消配置过滤器对象。\n\n应用程序代码不应直接实例化和使用实例 Handler。相反，Handler该类是一个基类，它定义了所有处理程序应具有的接口，并建立了子类可以使用（或覆盖）的一些默认行为\n\n### 常见处理程序\n除了基Handler类之外，还提供了许多有用的子类：\n\n- StreamHandler 实例将消息发送到流（类文件对象）。\n- FileHandler 实例将消息发送到磁盘文件。\n- BaseRotatingHandler是在某个点旋转日志文件的处理程序的基类。它并不意味着直接实例化。相反，使用RotatingFileHandler或 TimedRotatingFileHandler。\n- RotatingFileHandler 实例将消息发送到磁盘文件，支持最大日志文件大小和日志文件轮换。\n- TimedRotatingFileHandler 实例将消息发送到磁盘文件，以特定的时间间隔旋转日志文件。\n- SocketHandler实例将消息发送到TCP / IP套接字。从3.4开始，也支持Unix域套接字。\n- DatagramHandler实例将消息发送到UDP套接字。从3.4开始，也支持Unix域套接字。\n- SMTPHandler 实例将消息发送到指定的电子邮件地址。\n- SysLogHandler 实例将消息发送到Unix syslog守护程序，可能在远程计算机上。\n- NTEventLogHandler 实例将消息发送到Windows NT / 2000 / XP事件日志。\n- MemoryHandler 实例将消息发送到内存中的缓冲区，只要满足特定条件，就会刷新。\n- HTTPHandler实例使用任一语义GET或POST语义将消息发送到HTTP服务器。\n- WatchedFileHandler实例会监视他们要登录的文件。如果文件发生更改，则会关闭该文件并使用文件名重新打开。此处理程序仅在类Unix系统上有用; Windows不支持使用的基础机制。\n- QueueHandler实例将消息发送到队列，例如在queue或multiprocessing模块中实现的那些队列。\n- NullHandler实例不执行任何错误消息。它们由想要使用日志记录的库开发人员使用，但是希望避免“如果库用户没有配置日志记录，则可以显示”没有找到记录器XXX的处理程序“消息。有关更多信息，请参阅配置库的日志记录。\n\n新的3.1版：的NullHandler类。\n\n新版本3.2：在QueueHandler类。\n\n### 基本配置\n> logging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)\n\n基本配置过程为：获取logger，获取对应Handler并设置参数，然后将Handler添加到logger，有些模块包含创建logger的方法\n\n在flask中的配置\n\n```\nimport logging\n\ndef _log_config(app):\n    if not app.debug and not app.testing:\n        from logging.handlers import RotatingFileHandler\n        file_handler = RotatingFileHandler(\n            app.config.get('LOGGING_PATH'),\n            maxBytes=app.config.get('LOGGING_SIZE'))\n        file_handler.setLevel(logging.WARNING)\n        app.logger.addHandler(file_handler)\n        \n# 然后在创建app的时候执行此函数 _log_config(app)\ndef create_app(config):\n    app = Flask()\n    ...\n    _log_config(app)\n    ...\n```\n\n参考连接：\n\n[Logging Cookbook](https://docs.python.org/3.6/howto/logging-cookbook.html#logging-cookbook)\n\n[Logging handlers](https://docs.python.org/3.6/library/logging.handlers.html#logging.handlers.RotatingFileHandler)\n\n[logging](https://docs.python.org/3.6/library/logging.html#logging.Formatter)\n\n[flask logging](http://flask.pocoo.org/docs/1.0/logging/?highlight=logging)","source":"_posts/logging 日志系统.md","raw":"---\ntitle: logging 日志模块\ntags:\n  - python\ncategories: 学习笔记\nabbrlink: 2728557103\ndate: 2019-01-19 21:43:28\nupdated: 2019-01-25 22:22:22\n---\n# logging 日志系统\n[toc]\n### 日志级别\n\n\n 等级 | 数值 | 描述\n---|---|---\nNOTSET | 0 |\nDEBUG | 10 | 详细信息，通常仅在诊断问题时才有意义\nINFO | 20 | 确认事情按预期工作\nWARNING | 30 | 警告信息\nERROR | 40 | 由于更严重的问题，该软件无法执行某些功能\nCRITICAL | 50 | 严重错误，表明程序本身可能无法继续运行\n\n默认级别为 WARNING，这意味着将仅跟踪此级别及更高级别的事件，除非日志包已配置为执行其他操作。\n\n### 记录器\nLogger对象有三重的工作。首先，它们向应用程序代码公开了几种方法，以便应用程序可以在运行时记录消息 其次，记录器对象根据严重性（默认过滤工具）或过滤器对象确定要处理的日志消息。第三，记录器对象将相关的日志消息传递给所有感兴趣的日志处理程序。\n\n记录器对象上使用最广泛的方法分为两类：配置和消息发送。\n\n- Logger.setLevel() 指定记录器将处理的最低严重性日志消息，其中debug是最低内置严重性级别，critical是最高内置严重性级别。例如，如果严重性级别为INFO，则记录器将仅处理INFO，WARNING，ERROR和CRITICAL消息，并将忽略DEBUG消息。\n\n- Logger.addHandler()并Logger.removeHandler()从logger对象添加和删除处理程序对象。处理程序中详细介绍了处理程序。\n\n- Logger.addFilter()并Logger.removeFilter()从记录器对象中添加和删除过滤器对象。过滤器对象中详细介绍了 过滤器。\n\n### 处理程序\nHandler对象负责将适当的日志消息（基于日志消息的严重性）分派给处理程序的指定目标。 Logger对象可以使用addHandler()方法向自己添加零个或多个处理程序对象。作为示例场景，应用程序可能希望将所有日志消息发送到日志文件，将错误或更高的所有日志消息发送到标准输出，以及对电子邮件地址至关重要的所有消息。此方案需要三个单独的处理程序，其中每个处理程序负责将特定严重性的消息发送到特定位置。\n\n标准库包含很多处理程序类型（请参阅 有用的处理程序）; 教程主要使用StreamHandler并 FileHandler在其示例中使用。\n\n处理程序中很少有方法可供应用程序开发人员关注。与使用内置处理程序对象（即不创建自定义处理程序）的应用程序开发人员相关的唯一处理程序方法是以下配置方法：\n\n- 该setLevel()方法与logger对象一样，指定将分派到适当目标的最低严重性。为什么有两种setLevel()方法？记录器中设置的级别确定将传递给其处理程序的消息的严重性。每个处理程序中设置的级别确定处理程序将发送哪些消息。\n- setFormatter() 选择要使用的此处理程序的Formatter对象。\n- addFilter()并removeFilter()分别在处理程序上配置和取消配置过滤器对象。\n\n应用程序代码不应直接实例化和使用实例 Handler。相反，Handler该类是一个基类，它定义了所有处理程序应具有的接口，并建立了子类可以使用（或覆盖）的一些默认行为\n\n### 常见处理程序\n除了基Handler类之外，还提供了许多有用的子类：\n\n- StreamHandler 实例将消息发送到流（类文件对象）。\n- FileHandler 实例将消息发送到磁盘文件。\n- BaseRotatingHandler是在某个点旋转日志文件的处理程序的基类。它并不意味着直接实例化。相反，使用RotatingFileHandler或 TimedRotatingFileHandler。\n- RotatingFileHandler 实例将消息发送到磁盘文件，支持最大日志文件大小和日志文件轮换。\n- TimedRotatingFileHandler 实例将消息发送到磁盘文件，以特定的时间间隔旋转日志文件。\n- SocketHandler实例将消息发送到TCP / IP套接字。从3.4开始，也支持Unix域套接字。\n- DatagramHandler实例将消息发送到UDP套接字。从3.4开始，也支持Unix域套接字。\n- SMTPHandler 实例将消息发送到指定的电子邮件地址。\n- SysLogHandler 实例将消息发送到Unix syslog守护程序，可能在远程计算机上。\n- NTEventLogHandler 实例将消息发送到Windows NT / 2000 / XP事件日志。\n- MemoryHandler 实例将消息发送到内存中的缓冲区，只要满足特定条件，就会刷新。\n- HTTPHandler实例使用任一语义GET或POST语义将消息发送到HTTP服务器。\n- WatchedFileHandler实例会监视他们要登录的文件。如果文件发生更改，则会关闭该文件并使用文件名重新打开。此处理程序仅在类Unix系统上有用; Windows不支持使用的基础机制。\n- QueueHandler实例将消息发送到队列，例如在queue或multiprocessing模块中实现的那些队列。\n- NullHandler实例不执行任何错误消息。它们由想要使用日志记录的库开发人员使用，但是希望避免“如果库用户没有配置日志记录，则可以显示”没有找到记录器XXX的处理程序“消息。有关更多信息，请参阅配置库的日志记录。\n\n新的3.1版：的NullHandler类。\n\n新版本3.2：在QueueHandler类。\n\n### 基本配置\n> logging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)\n\n基本配置过程为：获取logger，获取对应Handler并设置参数，然后将Handler添加到logger，有些模块包含创建logger的方法\n\n在flask中的配置\n\n```\nimport logging\n\ndef _log_config(app):\n    if not app.debug and not app.testing:\n        from logging.handlers import RotatingFileHandler\n        file_handler = RotatingFileHandler(\n            app.config.get('LOGGING_PATH'),\n            maxBytes=app.config.get('LOGGING_SIZE'))\n        file_handler.setLevel(logging.WARNING)\n        app.logger.addHandler(file_handler)\n        \n# 然后在创建app的时候执行此函数 _log_config(app)\ndef create_app(config):\n    app = Flask()\n    ...\n    _log_config(app)\n    ...\n```\n\n参考连接：\n\n[Logging Cookbook](https://docs.python.org/3.6/howto/logging-cookbook.html#logging-cookbook)\n\n[Logging handlers](https://docs.python.org/3.6/library/logging.handlers.html#logging.handlers.RotatingFileHandler)\n\n[logging](https://docs.python.org/3.6/library/logging.html#logging.Formatter)\n\n[flask logging](http://flask.pocoo.org/docs/1.0/logging/?highlight=logging)","slug":"logging 日志系统","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppkp00087rs6lhi0x4zh","content":"<h1 id=\"logging-日志系统\"><a href=\"#logging-日志系统\" class=\"headerlink\" title=\"logging 日志系统\"></a>logging 日志系统</h1><p>[toc]</p>\n<h3 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h3><table>\n<thead>\n<tr>\n<th>等级</th>\n<th>数值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NOTSET</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>DEBUG</td>\n<td>10</td>\n<td>详细信息，通常仅在诊断问题时才有意义</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>20</td>\n<td>确认事情按预期工作</td>\n</tr>\n<tr>\n<td>WARNING</td>\n<td>30</td>\n<td>警告信息</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>40</td>\n<td>由于更严重的问题，该软件无法执行某些功能</td>\n</tr>\n<tr>\n<td>CRITICAL</td>\n<td>50</td>\n<td>严重错误，表明程序本身可能无法继续运行</td>\n</tr>\n</tbody>\n</table>\n<p>默认级别为 WARNING，这意味着将仅跟踪此级别及更高级别的事件，除非日志包已配置为执行其他操作。</p>\n<h3 id=\"记录器\"><a href=\"#记录器\" class=\"headerlink\" title=\"记录器\"></a>记录器</h3><p>Logger对象有三重的工作。首先，它们向应用程序代码公开了几种方法，以便应用程序可以在运行时记录消息 其次，记录器对象根据严重性（默认过滤工具）或过滤器对象确定要处理的日志消息。第三，记录器对象将相关的日志消息传递给所有感兴趣的日志处理程序。</p>\n<p>记录器对象上使用最广泛的方法分为两类：配置和消息发送。</p>\n<ul>\n<li><p>Logger.setLevel() 指定记录器将处理的最低严重性日志消息，其中debug是最低内置严重性级别，critical是最高内置严重性级别。例如，如果严重性级别为INFO，则记录器将仅处理INFO，WARNING，ERROR和CRITICAL消息，并将忽略DEBUG消息。</p>\n</li>\n<li><p>Logger.addHandler()并Logger.removeHandler()从logger对象添加和删除处理程序对象。处理程序中详细介绍了处理程序。</p>\n</li>\n<li><p>Logger.addFilter()并Logger.removeFilter()从记录器对象中添加和删除过滤器对象。过滤器对象中详细介绍了 过滤器。</p>\n</li>\n</ul>\n<h3 id=\"处理程序\"><a href=\"#处理程序\" class=\"headerlink\" title=\"处理程序\"></a>处理程序</h3><p>Handler对象负责将适当的日志消息（基于日志消息的严重性）分派给处理程序的指定目标。 Logger对象可以使用addHandler()方法向自己添加零个或多个处理程序对象。作为示例场景，应用程序可能希望将所有日志消息发送到日志文件，将错误或更高的所有日志消息发送到标准输出，以及对电子邮件地址至关重要的所有消息。此方案需要三个单独的处理程序，其中每个处理程序负责将特定严重性的消息发送到特定位置。</p>\n<p>标准库包含很多处理程序类型（请参阅 有用的处理程序）; 教程主要使用StreamHandler并 FileHandler在其示例中使用。</p>\n<p>处理程序中很少有方法可供应用程序开发人员关注。与使用内置处理程序对象（即不创建自定义处理程序）的应用程序开发人员相关的唯一处理程序方法是以下配置方法：</p>\n<ul>\n<li>该setLevel()方法与logger对象一样，指定将分派到适当目标的最低严重性。为什么有两种setLevel()方法？记录器中设置的级别确定将传递给其处理程序的消息的严重性。每个处理程序中设置的级别确定处理程序将发送哪些消息。</li>\n<li>setFormatter() 选择要使用的此处理程序的Formatter对象。</li>\n<li>addFilter()并removeFilter()分别在处理程序上配置和取消配置过滤器对象。</li>\n</ul>\n<p>应用程序代码不应直接实例化和使用实例 Handler。相反，Handler该类是一个基类，它定义了所有处理程序应具有的接口，并建立了子类可以使用（或覆盖）的一些默认行为</p>\n<h3 id=\"常见处理程序\"><a href=\"#常见处理程序\" class=\"headerlink\" title=\"常见处理程序\"></a>常见处理程序</h3><p>除了基Handler类之外，还提供了许多有用的子类：</p>\n<ul>\n<li>StreamHandler 实例将消息发送到流（类文件对象）。</li>\n<li>FileHandler 实例将消息发送到磁盘文件。</li>\n<li>BaseRotatingHandler是在某个点旋转日志文件的处理程序的基类。它并不意味着直接实例化。相反，使用RotatingFileHandler或 TimedRotatingFileHandler。</li>\n<li>RotatingFileHandler 实例将消息发送到磁盘文件，支持最大日志文件大小和日志文件轮换。</li>\n<li>TimedRotatingFileHandler 实例将消息发送到磁盘文件，以特定的时间间隔旋转日志文件。</li>\n<li>SocketHandler实例将消息发送到TCP / IP套接字。从3.4开始，也支持Unix域套接字。</li>\n<li>DatagramHandler实例将消息发送到UDP套接字。从3.4开始，也支持Unix域套接字。</li>\n<li>SMTPHandler 实例将消息发送到指定的电子邮件地址。</li>\n<li>SysLogHandler 实例将消息发送到Unix syslog守护程序，可能在远程计算机上。</li>\n<li>NTEventLogHandler 实例将消息发送到Windows NT / 2000 / XP事件日志。</li>\n<li>MemoryHandler 实例将消息发送到内存中的缓冲区，只要满足特定条件，就会刷新。</li>\n<li>HTTPHandler实例使用任一语义GET或POST语义将消息发送到HTTP服务器。</li>\n<li>WatchedFileHandler实例会监视他们要登录的文件。如果文件发生更改，则会关闭该文件并使用文件名重新打开。此处理程序仅在类Unix系统上有用; Windows不支持使用的基础机制。</li>\n<li>QueueHandler实例将消息发送到队列，例如在queue或multiprocessing模块中实现的那些队列。</li>\n<li>NullHandler实例不执行任何错误消息。它们由想要使用日志记录的库开发人员使用，但是希望避免“如果库用户没有配置日志记录，则可以显示”没有找到记录器XXX的处理程序“消息。有关更多信息，请参阅配置库的日志记录。</li>\n</ul>\n<p>新的3.1版：的NullHandler类。</p>\n<p>新版本3.2：在QueueHandler类。</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><blockquote>\n<p>logging.basicConfig(filename=’example.log’, filemode=’w’, level=logging.DEBUG)</p>\n</blockquote>\n<p>基本配置过程为：获取logger，获取对应Handler并设置参数，然后将Handler添加到logger，有些模块包含创建logger的方法</p>\n<p>在flask中的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">def _log_config(app):</span><br><span class=\"line\">    if not app.debug and not app.testing:</span><br><span class=\"line\">        from logging.handlers import RotatingFileHandler</span><br><span class=\"line\">        file_handler = RotatingFileHandler(</span><br><span class=\"line\">            app.config.get(&apos;LOGGING_PATH&apos;),</span><br><span class=\"line\">            maxBytes=app.config.get(&apos;LOGGING_SIZE&apos;))</span><br><span class=\"line\">        file_handler.setLevel(logging.WARNING)</span><br><span class=\"line\">        app.logger.addHandler(file_handler)</span><br><span class=\"line\">        </span><br><span class=\"line\"># 然后在创建app的时候执行此函数 _log_config(app)</span><br><span class=\"line\">def create_app(config):</span><br><span class=\"line\">    app = Flask()</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    _log_config(app)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>参考连接：</p>\n<p><a href=\"https://docs.python.org/3.6/howto/logging-cookbook.html#logging-cookbook\" target=\"_blank\" rel=\"noopener\">Logging Cookbook</a></p>\n<p><a href=\"https://docs.python.org/3.6/library/logging.handlers.html#logging.handlers.RotatingFileHandler\" target=\"_blank\" rel=\"noopener\">Logging handlers</a></p>\n<p><a href=\"https://docs.python.org/3.6/library/logging.html#logging.Formatter\" target=\"_blank\" rel=\"noopener\">logging</a></p>\n<p><a href=\"http://flask.pocoo.org/docs/1.0/logging/?highlight=logging\" target=\"_blank\" rel=\"noopener\">flask logging</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"logging-日志系统\"><a href=\"#logging-日志系统\" class=\"headerlink\" title=\"logging 日志系统\"></a>logging 日志系统</h1><p>[toc]</p>\n<h3 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h3><table>\n<thead>\n<tr>\n<th>等级</th>\n<th>数值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NOTSET</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>DEBUG</td>\n<td>10</td>\n<td>详细信息，通常仅在诊断问题时才有意义</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>20</td>\n<td>确认事情按预期工作</td>\n</tr>\n<tr>\n<td>WARNING</td>\n<td>30</td>\n<td>警告信息</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>40</td>\n<td>由于更严重的问题，该软件无法执行某些功能</td>\n</tr>\n<tr>\n<td>CRITICAL</td>\n<td>50</td>\n<td>严重错误，表明程序本身可能无法继续运行</td>\n</tr>\n</tbody>\n</table>\n<p>默认级别为 WARNING，这意味着将仅跟踪此级别及更高级别的事件，除非日志包已配置为执行其他操作。</p>\n<h3 id=\"记录器\"><a href=\"#记录器\" class=\"headerlink\" title=\"记录器\"></a>记录器</h3><p>Logger对象有三重的工作。首先，它们向应用程序代码公开了几种方法，以便应用程序可以在运行时记录消息 其次，记录器对象根据严重性（默认过滤工具）或过滤器对象确定要处理的日志消息。第三，记录器对象将相关的日志消息传递给所有感兴趣的日志处理程序。</p>\n<p>记录器对象上使用最广泛的方法分为两类：配置和消息发送。</p>\n<ul>\n<li><p>Logger.setLevel() 指定记录器将处理的最低严重性日志消息，其中debug是最低内置严重性级别，critical是最高内置严重性级别。例如，如果严重性级别为INFO，则记录器将仅处理INFO，WARNING，ERROR和CRITICAL消息，并将忽略DEBUG消息。</p>\n</li>\n<li><p>Logger.addHandler()并Logger.removeHandler()从logger对象添加和删除处理程序对象。处理程序中详细介绍了处理程序。</p>\n</li>\n<li><p>Logger.addFilter()并Logger.removeFilter()从记录器对象中添加和删除过滤器对象。过滤器对象中详细介绍了 过滤器。</p>\n</li>\n</ul>\n<h3 id=\"处理程序\"><a href=\"#处理程序\" class=\"headerlink\" title=\"处理程序\"></a>处理程序</h3><p>Handler对象负责将适当的日志消息（基于日志消息的严重性）分派给处理程序的指定目标。 Logger对象可以使用addHandler()方法向自己添加零个或多个处理程序对象。作为示例场景，应用程序可能希望将所有日志消息发送到日志文件，将错误或更高的所有日志消息发送到标准输出，以及对电子邮件地址至关重要的所有消息。此方案需要三个单独的处理程序，其中每个处理程序负责将特定严重性的消息发送到特定位置。</p>\n<p>标准库包含很多处理程序类型（请参阅 有用的处理程序）; 教程主要使用StreamHandler并 FileHandler在其示例中使用。</p>\n<p>处理程序中很少有方法可供应用程序开发人员关注。与使用内置处理程序对象（即不创建自定义处理程序）的应用程序开发人员相关的唯一处理程序方法是以下配置方法：</p>\n<ul>\n<li>该setLevel()方法与logger对象一样，指定将分派到适当目标的最低严重性。为什么有两种setLevel()方法？记录器中设置的级别确定将传递给其处理程序的消息的严重性。每个处理程序中设置的级别确定处理程序将发送哪些消息。</li>\n<li>setFormatter() 选择要使用的此处理程序的Formatter对象。</li>\n<li>addFilter()并removeFilter()分别在处理程序上配置和取消配置过滤器对象。</li>\n</ul>\n<p>应用程序代码不应直接实例化和使用实例 Handler。相反，Handler该类是一个基类，它定义了所有处理程序应具有的接口，并建立了子类可以使用（或覆盖）的一些默认行为</p>\n<h3 id=\"常见处理程序\"><a href=\"#常见处理程序\" class=\"headerlink\" title=\"常见处理程序\"></a>常见处理程序</h3><p>除了基Handler类之外，还提供了许多有用的子类：</p>\n<ul>\n<li>StreamHandler 实例将消息发送到流（类文件对象）。</li>\n<li>FileHandler 实例将消息发送到磁盘文件。</li>\n<li>BaseRotatingHandler是在某个点旋转日志文件的处理程序的基类。它并不意味着直接实例化。相反，使用RotatingFileHandler或 TimedRotatingFileHandler。</li>\n<li>RotatingFileHandler 实例将消息发送到磁盘文件，支持最大日志文件大小和日志文件轮换。</li>\n<li>TimedRotatingFileHandler 实例将消息发送到磁盘文件，以特定的时间间隔旋转日志文件。</li>\n<li>SocketHandler实例将消息发送到TCP / IP套接字。从3.4开始，也支持Unix域套接字。</li>\n<li>DatagramHandler实例将消息发送到UDP套接字。从3.4开始，也支持Unix域套接字。</li>\n<li>SMTPHandler 实例将消息发送到指定的电子邮件地址。</li>\n<li>SysLogHandler 实例将消息发送到Unix syslog守护程序，可能在远程计算机上。</li>\n<li>NTEventLogHandler 实例将消息发送到Windows NT / 2000 / XP事件日志。</li>\n<li>MemoryHandler 实例将消息发送到内存中的缓冲区，只要满足特定条件，就会刷新。</li>\n<li>HTTPHandler实例使用任一语义GET或POST语义将消息发送到HTTP服务器。</li>\n<li>WatchedFileHandler实例会监视他们要登录的文件。如果文件发生更改，则会关闭该文件并使用文件名重新打开。此处理程序仅在类Unix系统上有用; Windows不支持使用的基础机制。</li>\n<li>QueueHandler实例将消息发送到队列，例如在queue或multiprocessing模块中实现的那些队列。</li>\n<li>NullHandler实例不执行任何错误消息。它们由想要使用日志记录的库开发人员使用，但是希望避免“如果库用户没有配置日志记录，则可以显示”没有找到记录器XXX的处理程序“消息。有关更多信息，请参阅配置库的日志记录。</li>\n</ul>\n<p>新的3.1版：的NullHandler类。</p>\n<p>新版本3.2：在QueueHandler类。</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><blockquote>\n<p>logging.basicConfig(filename=’example.log’, filemode=’w’, level=logging.DEBUG)</p>\n</blockquote>\n<p>基本配置过程为：获取logger，获取对应Handler并设置参数，然后将Handler添加到logger，有些模块包含创建logger的方法</p>\n<p>在flask中的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">def _log_config(app):</span><br><span class=\"line\">    if not app.debug and not app.testing:</span><br><span class=\"line\">        from logging.handlers import RotatingFileHandler</span><br><span class=\"line\">        file_handler = RotatingFileHandler(</span><br><span class=\"line\">            app.config.get(&apos;LOGGING_PATH&apos;),</span><br><span class=\"line\">            maxBytes=app.config.get(&apos;LOGGING_SIZE&apos;))</span><br><span class=\"line\">        file_handler.setLevel(logging.WARNING)</span><br><span class=\"line\">        app.logger.addHandler(file_handler)</span><br><span class=\"line\">        </span><br><span class=\"line\"># 然后在创建app的时候执行此函数 _log_config(app)</span><br><span class=\"line\">def create_app(config):</span><br><span class=\"line\">    app = Flask()</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    _log_config(app)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>参考连接：</p>\n<p><a href=\"https://docs.python.org/3.6/howto/logging-cookbook.html#logging-cookbook\" target=\"_blank\" rel=\"noopener\">Logging Cookbook</a></p>\n<p><a href=\"https://docs.python.org/3.6/library/logging.handlers.html#logging.handlers.RotatingFileHandler\" target=\"_blank\" rel=\"noopener\">Logging handlers</a></p>\n<p><a href=\"https://docs.python.org/3.6/library/logging.html#logging.Formatter\" target=\"_blank\" rel=\"noopener\">logging</a></p>\n<p><a href=\"http://flask.pocoo.org/docs/1.0/logging/?highlight=logging\" target=\"_blank\" rel=\"noopener\">flask logging</a></p>\n"},{"title":"docker 容器搭建","abbrlink":3677998467,"date":"2019-01-19T13:43:28.000Z","updated":"2019-02-15T14:22:22.000Z","_content":"# docker 学习笔记\n## docker 安装\n1. 在ubuntu下的安装\n\n> sudo apt install docker.io\n\n在生产环境下应该安装指定版本\n> sudo apt-get install docker-ce=<VERSION>\n\n注意：在此处可能会出现包引用的错误，具体原因自行解决（没搞懂...）\n\n2. 在win下安装\n\n在windows下安装需要满足的条件：\n> **Docker for Windows** 支持 64 位版本的 Windows 10 Pro，且必须开启 Hyper-V。\n\nWindows 10 Pro, Windows旗舰版和教育版可行。\n\nHyper-V 为Windows上的虚拟机，如果电脑上还有VM虚拟机，则这两个会发生冲突，VM在运行时需要关闭Hyper-V。\n\n3. 在mac下安装\n\n参考win下安装\n\n4. docker 需要用户具有sudo权限，为了避免每次都输入sudo，可以添加用户到docker用户组\n\n创建用户组,添加用户，重启：\n\n> $ sudo groupadd docker \n\n> $ sudo gpasswd -a ${USER} docker\n\n> $ sudo service docker restart\n\n切换当前会话到新 group 或者重启 X 会话\n> newgrp - docker\n\n如果已有分组，直接添加用户\n> $ sudo usermod -aG docker $USER\n\n### docker 镜像（Image）\n\n**镜像加速：**\n\nDocker 官方提供的中国 registry mirror https://registry.docker-cn.com\n\n七牛云加速器 https://reg-mirror.qiniu.com/\n\n对于使用 upstart 的系统而言，编辑 /etc/default/docker 文件，在其中的 DOCKER_OPTS 中配置加速器地址：\n\nDOCKER_OPTS=\"--registry-mirror=https://registry.docker-cn.com\"\n\n重新启动服务。\n\n$ sudo service docker restart\n\n对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n\n```\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\"\n  ]\n}\n```\n之后重新启动服务。\n> $ sudo systemctl daemon-reload\n> $ sudo systemctl restart docker\n\n对于使用 Windows 10 的系统，在系统右下角托盘 Docker 图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Daemon。在 Registry mirrors 一栏中填写加速器地址 https://registry.docker-cn.com，之后点击 Apply 保存后 Docker 就会重启并应用配置的镜像地址了\n\n**获取镜像：**\n\n> $ docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]\n\n一般从Docker Store上下载，搜索需要的镜像并按Tag下载，一般为官方原版镜像\n\n也可以自己创建自定义镜像，创建Dockerfile\n\n```\nFROM python:3.6-alpine3.8  \n# 官方基于alpine3.8下的python3.6 镜像\n# alpine为精简版Linux\n# 在此基础上叠加镜像包\n\nLABEL maintainer=\"Seven test\"\n# 创建人信息\n\nCOPY ./app /usr/src/app\n# 拷贝本地文件./app 到镜像文件/use/src/app下\n\nRUN cd /usr/src/app && pip install -r requirements.txt\n# 执行操作 进入/usr/src/app 并下载相关安装包\n\nWORKDIR /usr/src/app\n# 指定工作目录\n\nEXPOSE 8888\n# 对外暴露的端口\n\nCMD python xxx/xxx.py\n# 启动容器时执行的操作\n```\n\n\n列出镜像：\n\n> $ docker image ls\n\n删除镜像：\n\n> $ docker image rm [选项] <镜像1> [<镜像2> ...]\n\n\n\n### docker 容器（Container）\n\n每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。\n\n运行容器：\n\n> $ sudo docker run --name webserver -d -p 80:80 nginx\n\n> $ docker exec -it webserver bash\n\n当然，你应该还会用到其它的一些参数，比如-name指定容器名字，后面再 start 这个容器就不用查 id 了；-v挂载文件，将你本地的代码挂载进 docker；或者-p映射端口，将 docker 的端口映射到本机，以便提供http 等服务。\n\n例如，创建一个名字为 webserver的镜像，将我本地 code下的代码挂载到镜像/root/app目录下，并将虚拟机的80端口映射到本机8080，命令如下：\n> docker run -it --name webserver -v ~/code:/root/app -p 8080:80 ubuntu:16.04 /bin/bash\n\n### Docker Compose 的使用\n\n在多容器连接的情况下，避免重复去创建容器，所以采用docker-compose更方便\n\nLinux下需要另外下载docker-compose:\n> $ sudu apt install docker-compose\n\n在项目文件下新建 docker-compose.yml 文件：\n\ndocker-compose 遵循YAML格式\n\n```\nmysql:\n  image: mysql:5.7\n  environment:\n    - MYSQL_ROOT_PASSWORD=123456\n    - MYSQL_DATABASE=wordpress\nweb:\n  image: wordpress\n  links:\n    - mysql\n  environment:\n    - WORDPRESS_DB_PASSWORD=123456\n  ports:\n    - \"127.0.0.3:8080:80\"\n  working_dir: /var/www/html\n  volumes:\n    - wordpress:/var/www/html\n```\n\n两个顶层标签表示有两个容器mysql和web。每个容器的具体设置，前面都已经讲解过了，还是挺容易理解的。\n\n启动所有服务\n> $ docker-compose up\n\n关闭所有服务\n> $ docker-compose stop\n\n关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。\n> $ docker-compose rm\n\n#### 注意点：\n1. \n\n---\n#### 参考文档：\n\n[Docker —— 从入门到实践](https://yeasy.gitbooks.io/docker_practice/content/)\n\n[docker docs](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#cmd)","source":"_posts/docker 学习笔记.md","raw":"---\ntitle: docker 容器搭建\ntags:\n  - docker\ncategories: 环境搭建\nabbrlink: 3677998467\ndate: 2019-01-19 21:43:28\nupdated: 2019-02-15 22:22:22\n---\n# docker 学习笔记\n## docker 安装\n1. 在ubuntu下的安装\n\n> sudo apt install docker.io\n\n在生产环境下应该安装指定版本\n> sudo apt-get install docker-ce=<VERSION>\n\n注意：在此处可能会出现包引用的错误，具体原因自行解决（没搞懂...）\n\n2. 在win下安装\n\n在windows下安装需要满足的条件：\n> **Docker for Windows** 支持 64 位版本的 Windows 10 Pro，且必须开启 Hyper-V。\n\nWindows 10 Pro, Windows旗舰版和教育版可行。\n\nHyper-V 为Windows上的虚拟机，如果电脑上还有VM虚拟机，则这两个会发生冲突，VM在运行时需要关闭Hyper-V。\n\n3. 在mac下安装\n\n参考win下安装\n\n4. docker 需要用户具有sudo权限，为了避免每次都输入sudo，可以添加用户到docker用户组\n\n创建用户组,添加用户，重启：\n\n> $ sudo groupadd docker \n\n> $ sudo gpasswd -a ${USER} docker\n\n> $ sudo service docker restart\n\n切换当前会话到新 group 或者重启 X 会话\n> newgrp - docker\n\n如果已有分组，直接添加用户\n> $ sudo usermod -aG docker $USER\n\n### docker 镜像（Image）\n\n**镜像加速：**\n\nDocker 官方提供的中国 registry mirror https://registry.docker-cn.com\n\n七牛云加速器 https://reg-mirror.qiniu.com/\n\n对于使用 upstart 的系统而言，编辑 /etc/default/docker 文件，在其中的 DOCKER_OPTS 中配置加速器地址：\n\nDOCKER_OPTS=\"--registry-mirror=https://registry.docker-cn.com\"\n\n重新启动服务。\n\n$ sudo service docker restart\n\n对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n\n```\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\"\n  ]\n}\n```\n之后重新启动服务。\n> $ sudo systemctl daemon-reload\n> $ sudo systemctl restart docker\n\n对于使用 Windows 10 的系统，在系统右下角托盘 Docker 图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Daemon。在 Registry mirrors 一栏中填写加速器地址 https://registry.docker-cn.com，之后点击 Apply 保存后 Docker 就会重启并应用配置的镜像地址了\n\n**获取镜像：**\n\n> $ docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]\n\n一般从Docker Store上下载，搜索需要的镜像并按Tag下载，一般为官方原版镜像\n\n也可以自己创建自定义镜像，创建Dockerfile\n\n```\nFROM python:3.6-alpine3.8  \n# 官方基于alpine3.8下的python3.6 镜像\n# alpine为精简版Linux\n# 在此基础上叠加镜像包\n\nLABEL maintainer=\"Seven test\"\n# 创建人信息\n\nCOPY ./app /usr/src/app\n# 拷贝本地文件./app 到镜像文件/use/src/app下\n\nRUN cd /usr/src/app && pip install -r requirements.txt\n# 执行操作 进入/usr/src/app 并下载相关安装包\n\nWORKDIR /usr/src/app\n# 指定工作目录\n\nEXPOSE 8888\n# 对外暴露的端口\n\nCMD python xxx/xxx.py\n# 启动容器时执行的操作\n```\n\n\n列出镜像：\n\n> $ docker image ls\n\n删除镜像：\n\n> $ docker image rm [选项] <镜像1> [<镜像2> ...]\n\n\n\n### docker 容器（Container）\n\n每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。\n\n运行容器：\n\n> $ sudo docker run --name webserver -d -p 80:80 nginx\n\n> $ docker exec -it webserver bash\n\n当然，你应该还会用到其它的一些参数，比如-name指定容器名字，后面再 start 这个容器就不用查 id 了；-v挂载文件，将你本地的代码挂载进 docker；或者-p映射端口，将 docker 的端口映射到本机，以便提供http 等服务。\n\n例如，创建一个名字为 webserver的镜像，将我本地 code下的代码挂载到镜像/root/app目录下，并将虚拟机的80端口映射到本机8080，命令如下：\n> docker run -it --name webserver -v ~/code:/root/app -p 8080:80 ubuntu:16.04 /bin/bash\n\n### Docker Compose 的使用\n\n在多容器连接的情况下，避免重复去创建容器，所以采用docker-compose更方便\n\nLinux下需要另外下载docker-compose:\n> $ sudu apt install docker-compose\n\n在项目文件下新建 docker-compose.yml 文件：\n\ndocker-compose 遵循YAML格式\n\n```\nmysql:\n  image: mysql:5.7\n  environment:\n    - MYSQL_ROOT_PASSWORD=123456\n    - MYSQL_DATABASE=wordpress\nweb:\n  image: wordpress\n  links:\n    - mysql\n  environment:\n    - WORDPRESS_DB_PASSWORD=123456\n  ports:\n    - \"127.0.0.3:8080:80\"\n  working_dir: /var/www/html\n  volumes:\n    - wordpress:/var/www/html\n```\n\n两个顶层标签表示有两个容器mysql和web。每个容器的具体设置，前面都已经讲解过了，还是挺容易理解的。\n\n启动所有服务\n> $ docker-compose up\n\n关闭所有服务\n> $ docker-compose stop\n\n关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。\n> $ docker-compose rm\n\n#### 注意点：\n1. \n\n---\n#### 参考文档：\n\n[Docker —— 从入门到实践](https://yeasy.gitbooks.io/docker_practice/content/)\n\n[docker docs](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#cmd)","slug":"docker 学习笔记","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppkt000a7rs6gp703mrz","content":"<h1 id=\"docker-学习笔记\"><a href=\"#docker-学习笔记\" class=\"headerlink\" title=\"docker 学习笔记\"></a>docker 学习笔记</h1><h2 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h2><ol>\n<li>在ubuntu下的安装</li>\n</ol>\n<blockquote>\n<p>sudo apt install docker.io</p>\n</blockquote>\n<p>在生产环境下应该安装指定版本</p>\n<blockquote>\n<p>sudo apt-get install docker-ce=<version></version></p>\n</blockquote>\n<p>注意：在此处可能会出现包引用的错误，具体原因自行解决（没搞懂…）</p>\n<ol start=\"2\">\n<li>在win下安装</li>\n</ol>\n<p>在windows下安装需要满足的条件：</p>\n<blockquote>\n<p><strong>Docker for Windows</strong> 支持 64 位版本的 Windows 10 Pro，且必须开启 Hyper-V。</p>\n</blockquote>\n<p>Windows 10 Pro, Windows旗舰版和教育版可行。</p>\n<p>Hyper-V 为Windows上的虚拟机，如果电脑上还有VM虚拟机，则这两个会发生冲突，VM在运行时需要关闭Hyper-V。</p>\n<ol start=\"3\">\n<li>在mac下安装</li>\n</ol>\n<p>参考win下安装</p>\n<ol start=\"4\">\n<li>docker 需要用户具有sudo权限，为了避免每次都输入sudo，可以添加用户到docker用户组</li>\n</ol>\n<p>创建用户组,添加用户，重启：</p>\n<blockquote>\n<p>$ sudo groupadd docker </p>\n</blockquote>\n<blockquote>\n<p>$ sudo gpasswd -a ${USER} docker</p>\n</blockquote>\n<blockquote>\n<p>$ sudo service docker restart</p>\n</blockquote>\n<p>切换当前会话到新 group 或者重启 X 会话</p>\n<blockquote>\n<p>newgrp - docker</p>\n</blockquote>\n<p>如果已有分组，直接添加用户</p>\n<blockquote>\n<p>$ sudo usermod -aG docker $USER</p>\n</blockquote>\n<h3 id=\"docker-镜像（Image）\"><a href=\"#docker-镜像（Image）\" class=\"headerlink\" title=\"docker 镜像（Image）\"></a>docker 镜像（Image）</h3><p><strong>镜像加速：</strong></p>\n<p>Docker 官方提供的中国 registry mirror <a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a></p>\n<p>七牛云加速器 <a href=\"https://reg-mirror.qiniu.com/\" target=\"_blank\" rel=\"noopener\">https://reg-mirror.qiniu.com/</a></p>\n<p>对于使用 upstart 的系统而言，编辑 /etc/default/docker 文件，在其中的 DOCKER_OPTS 中配置加速器地址：</p>\n<p>DOCKER_OPTS=”–registry-mirror=<a href=\"https://registry.docker-cn.com&quot;\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com&quot;</a></p>\n<p>重新启动服务。</p>\n<p>$ sudo service docker restart</p>\n<p>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://registry.docker-cn.com&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后重新启动服务。</p>\n<blockquote>\n<p>$ sudo systemctl daemon-reload<br>$ sudo systemctl restart docker</p>\n</blockquote>\n<p>对于使用 Windows 10 的系统，在系统右下角托盘 Docker 图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Daemon。在 Registry mirrors 一栏中填写加速器地址 <a href=\"https://registry.docker-cn.com，之后点击\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com，之后点击</a> Apply 保存后 Docker 就会重启并应用配置的镜像地址了</p>\n<p><strong>获取镜像：</strong></p>\n<blockquote>\n<p>$ docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</p>\n</blockquote>\n<p>一般从Docker Store上下载，搜索需要的镜像并按Tag下载，一般为官方原版镜像</p>\n<p>也可以自己创建自定义镜像，创建Dockerfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM python:3.6-alpine3.8  </span><br><span class=\"line\"># 官方基于alpine3.8下的python3.6 镜像</span><br><span class=\"line\"># alpine为精简版Linux</span><br><span class=\"line\"># 在此基础上叠加镜像包</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL maintainer=&quot;Seven test&quot;</span><br><span class=\"line\"># 创建人信息</span><br><span class=\"line\"></span><br><span class=\"line\">COPY ./app /usr/src/app</span><br><span class=\"line\"># 拷贝本地文件./app 到镜像文件/use/src/app下</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cd /usr/src/app &amp;&amp; pip install -r requirements.txt</span><br><span class=\"line\"># 执行操作 进入/usr/src/app 并下载相关安装包</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"># 指定工作目录</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 8888</span><br><span class=\"line\"># 对外暴露的端口</span><br><span class=\"line\"></span><br><span class=\"line\">CMD python xxx/xxx.py</span><br><span class=\"line\"># 启动容器时执行的操作</span><br></pre></td></tr></table></figure>\n<p>列出镜像：</p>\n<blockquote>\n<p>$ docker image ls</p>\n</blockquote>\n<p>删除镜像：</p>\n<blockquote>\n<p>$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; …]</p>\n</blockquote>\n<h3 id=\"docker-容器（Container）\"><a href=\"#docker-容器（Container）\" class=\"headerlink\" title=\"docker 容器（Container）\"></a>docker 容器（Container）</h3><p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>\n<p>运行容器：</p>\n<blockquote>\n<p>$ sudo docker run –name webserver -d -p 80:80 nginx</p>\n</blockquote>\n<blockquote>\n<p>$ docker exec -it webserver bash</p>\n</blockquote>\n<p>当然，你应该还会用到其它的一些参数，比如-name指定容器名字，后面再 start 这个容器就不用查 id 了；-v挂载文件，将你本地的代码挂载进 docker；或者-p映射端口，将 docker 的端口映射到本机，以便提供http 等服务。</p>\n<p>例如，创建一个名字为 webserver的镜像，将我本地 code下的代码挂载到镜像/root/app目录下，并将虚拟机的80端口映射到本机8080，命令如下：</p>\n<blockquote>\n<p>docker run -it –name webserver -v ~/code:/root/app -p 8080:80 ubuntu:16.04 /bin/bash</p>\n</blockquote>\n<h3 id=\"Docker-Compose-的使用\"><a href=\"#Docker-Compose-的使用\" class=\"headerlink\" title=\"Docker Compose 的使用\"></a>Docker Compose 的使用</h3><p>在多容器连接的情况下，避免重复去创建容器，所以采用docker-compose更方便</p>\n<p>Linux下需要另外下载docker-compose:</p>\n<blockquote>\n<p>$ sudu apt install docker-compose</p>\n</blockquote>\n<p>在项目文件下新建 docker-compose.yml 文件：</p>\n<p>docker-compose 遵循YAML格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql:</span><br><span class=\"line\">  image: mysql:5.7</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    - MYSQL_ROOT_PASSWORD=123456</span><br><span class=\"line\">    - MYSQL_DATABASE=wordpress</span><br><span class=\"line\">web:</span><br><span class=\"line\">  image: wordpress</span><br><span class=\"line\">  links:</span><br><span class=\"line\">    - mysql</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    - WORDPRESS_DB_PASSWORD=123456</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - &quot;127.0.0.3:8080:80&quot;</span><br><span class=\"line\">  working_dir: /var/www/html</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - wordpress:/var/www/html</span><br></pre></td></tr></table></figure>\n<p>两个顶层标签表示有两个容器mysql和web。每个容器的具体设置，前面都已经讲解过了，还是挺容易理解的。</p>\n<p>启动所有服务</p>\n<blockquote>\n<p>$ docker-compose up</p>\n</blockquote>\n<p>关闭所有服务</p>\n<blockquote>\n<p>$ docker-compose stop</p>\n</blockquote>\n<p>关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。</p>\n<blockquote>\n<p>$ docker-compose rm</p>\n</blockquote>\n<h4 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h4><ol>\n<li></li>\n</ol>\n<hr>\n<h4 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h4><p><a href=\"https://yeasy.gitbooks.io/docker_practice/content/\" target=\"_blank\" rel=\"noopener\">Docker —— 从入门到实践</a></p>\n<p><a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#cmd\" target=\"_blank\" rel=\"noopener\">docker docs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker-学习笔记\"><a href=\"#docker-学习笔记\" class=\"headerlink\" title=\"docker 学习笔记\"></a>docker 学习笔记</h1><h2 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h2><ol>\n<li>在ubuntu下的安装</li>\n</ol>\n<blockquote>\n<p>sudo apt install docker.io</p>\n</blockquote>\n<p>在生产环境下应该安装指定版本</p>\n<blockquote>\n<p>sudo apt-get install docker-ce=<version></version></p>\n</blockquote>\n<p>注意：在此处可能会出现包引用的错误，具体原因自行解决（没搞懂…）</p>\n<ol start=\"2\">\n<li>在win下安装</li>\n</ol>\n<p>在windows下安装需要满足的条件：</p>\n<blockquote>\n<p><strong>Docker for Windows</strong> 支持 64 位版本的 Windows 10 Pro，且必须开启 Hyper-V。</p>\n</blockquote>\n<p>Windows 10 Pro, Windows旗舰版和教育版可行。</p>\n<p>Hyper-V 为Windows上的虚拟机，如果电脑上还有VM虚拟机，则这两个会发生冲突，VM在运行时需要关闭Hyper-V。</p>\n<ol start=\"3\">\n<li>在mac下安装</li>\n</ol>\n<p>参考win下安装</p>\n<ol start=\"4\">\n<li>docker 需要用户具有sudo权限，为了避免每次都输入sudo，可以添加用户到docker用户组</li>\n</ol>\n<p>创建用户组,添加用户，重启：</p>\n<blockquote>\n<p>$ sudo groupadd docker </p>\n</blockquote>\n<blockquote>\n<p>$ sudo gpasswd -a ${USER} docker</p>\n</blockquote>\n<blockquote>\n<p>$ sudo service docker restart</p>\n</blockquote>\n<p>切换当前会话到新 group 或者重启 X 会话</p>\n<blockquote>\n<p>newgrp - docker</p>\n</blockquote>\n<p>如果已有分组，直接添加用户</p>\n<blockquote>\n<p>$ sudo usermod -aG docker $USER</p>\n</blockquote>\n<h3 id=\"docker-镜像（Image）\"><a href=\"#docker-镜像（Image）\" class=\"headerlink\" title=\"docker 镜像（Image）\"></a>docker 镜像（Image）</h3><p><strong>镜像加速：</strong></p>\n<p>Docker 官方提供的中国 registry mirror <a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a></p>\n<p>七牛云加速器 <a href=\"https://reg-mirror.qiniu.com/\" target=\"_blank\" rel=\"noopener\">https://reg-mirror.qiniu.com/</a></p>\n<p>对于使用 upstart 的系统而言，编辑 /etc/default/docker 文件，在其中的 DOCKER_OPTS 中配置加速器地址：</p>\n<p>DOCKER_OPTS=”–registry-mirror=<a href=\"https://registry.docker-cn.com&quot;\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com&quot;</a></p>\n<p>重新启动服务。</p>\n<p>$ sudo service docker restart</p>\n<p>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [</span><br><span class=\"line\">    &quot;https://registry.docker-cn.com&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后重新启动服务。</p>\n<blockquote>\n<p>$ sudo systemctl daemon-reload<br>$ sudo systemctl restart docker</p>\n</blockquote>\n<p>对于使用 Windows 10 的系统，在系统右下角托盘 Docker 图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Daemon。在 Registry mirrors 一栏中填写加速器地址 <a href=\"https://registry.docker-cn.com，之后点击\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com，之后点击</a> Apply 保存后 Docker 就会重启并应用配置的镜像地址了</p>\n<p><strong>获取镜像：</strong></p>\n<blockquote>\n<p>$ docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</p>\n</blockquote>\n<p>一般从Docker Store上下载，搜索需要的镜像并按Tag下载，一般为官方原版镜像</p>\n<p>也可以自己创建自定义镜像，创建Dockerfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM python:3.6-alpine3.8  </span><br><span class=\"line\"># 官方基于alpine3.8下的python3.6 镜像</span><br><span class=\"line\"># alpine为精简版Linux</span><br><span class=\"line\"># 在此基础上叠加镜像包</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL maintainer=&quot;Seven test&quot;</span><br><span class=\"line\"># 创建人信息</span><br><span class=\"line\"></span><br><span class=\"line\">COPY ./app /usr/src/app</span><br><span class=\"line\"># 拷贝本地文件./app 到镜像文件/use/src/app下</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cd /usr/src/app &amp;&amp; pip install -r requirements.txt</span><br><span class=\"line\"># 执行操作 进入/usr/src/app 并下载相关安装包</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"># 指定工作目录</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 8888</span><br><span class=\"line\"># 对外暴露的端口</span><br><span class=\"line\"></span><br><span class=\"line\">CMD python xxx/xxx.py</span><br><span class=\"line\"># 启动容器时执行的操作</span><br></pre></td></tr></table></figure>\n<p>列出镜像：</p>\n<blockquote>\n<p>$ docker image ls</p>\n</blockquote>\n<p>删除镜像：</p>\n<blockquote>\n<p>$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; …]</p>\n</blockquote>\n<h3 id=\"docker-容器（Container）\"><a href=\"#docker-容器（Container）\" class=\"headerlink\" title=\"docker 容器（Container）\"></a>docker 容器（Container）</h3><p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>\n<p>运行容器：</p>\n<blockquote>\n<p>$ sudo docker run –name webserver -d -p 80:80 nginx</p>\n</blockquote>\n<blockquote>\n<p>$ docker exec -it webserver bash</p>\n</blockquote>\n<p>当然，你应该还会用到其它的一些参数，比如-name指定容器名字，后面再 start 这个容器就不用查 id 了；-v挂载文件，将你本地的代码挂载进 docker；或者-p映射端口，将 docker 的端口映射到本机，以便提供http 等服务。</p>\n<p>例如，创建一个名字为 webserver的镜像，将我本地 code下的代码挂载到镜像/root/app目录下，并将虚拟机的80端口映射到本机8080，命令如下：</p>\n<blockquote>\n<p>docker run -it –name webserver -v ~/code:/root/app -p 8080:80 ubuntu:16.04 /bin/bash</p>\n</blockquote>\n<h3 id=\"Docker-Compose-的使用\"><a href=\"#Docker-Compose-的使用\" class=\"headerlink\" title=\"Docker Compose 的使用\"></a>Docker Compose 的使用</h3><p>在多容器连接的情况下，避免重复去创建容器，所以采用docker-compose更方便</p>\n<p>Linux下需要另外下载docker-compose:</p>\n<blockquote>\n<p>$ sudu apt install docker-compose</p>\n</blockquote>\n<p>在项目文件下新建 docker-compose.yml 文件：</p>\n<p>docker-compose 遵循YAML格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql:</span><br><span class=\"line\">  image: mysql:5.7</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    - MYSQL_ROOT_PASSWORD=123456</span><br><span class=\"line\">    - MYSQL_DATABASE=wordpress</span><br><span class=\"line\">web:</span><br><span class=\"line\">  image: wordpress</span><br><span class=\"line\">  links:</span><br><span class=\"line\">    - mysql</span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    - WORDPRESS_DB_PASSWORD=123456</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - &quot;127.0.0.3:8080:80&quot;</span><br><span class=\"line\">  working_dir: /var/www/html</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - wordpress:/var/www/html</span><br></pre></td></tr></table></figure>\n<p>两个顶层标签表示有两个容器mysql和web。每个容器的具体设置，前面都已经讲解过了，还是挺容易理解的。</p>\n<p>启动所有服务</p>\n<blockquote>\n<p>$ docker-compose up</p>\n</blockquote>\n<p>关闭所有服务</p>\n<blockquote>\n<p>$ docker-compose stop</p>\n</blockquote>\n<p>关闭以后，这两个容器文件还是存在的，写在里面的数据不会丢失。下次启动的时候，还可以复用。下面的命令可以把这两个容器文件删除（容器必须已经停止运行）。</p>\n<blockquote>\n<p>$ docker-compose rm</p>\n</blockquote>\n<h4 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h4><ol>\n<li></li>\n</ol>\n<hr>\n<h4 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h4><p><a href=\"https://yeasy.gitbooks.io/docker_practice/content/\" target=\"_blank\" rel=\"noopener\">Docker —— 从入门到实践</a></p>\n<p><a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#cmd\" target=\"_blank\" rel=\"noopener\">docker docs</a></p>\n"},{"title":"python 虚拟环境的搭建","abbrlink":945033781,"date":"2019-01-19T13:43:28.000Z","updated":"2019-02-15T14:22:22.000Z","_content":"# python 虚拟环境的创建\n\n#### 基于python2 的虚拟环境搭建\nvirtualenv 是一个创建隔绝的Python环境的工具，用来管理虚拟环境\n\n安装 virtualenv：\n> pip install virtualenv\n\n创建虚拟环境：\n\n```\n$ cd my_project_dir\n$ virtualenv venv　　#venv为虚拟环境目录名，目录名自定义\n'''激活虚拟环境：'''\n$ source venv/bin/activate\n'''安装需要的包：'''\n$ pip install requests\n'''当有requirements.txt的时候可以'''\n$ pip install -r requirements.txt  #直接安装全部包\n'''退出虚拟环境：'''\n$ . venv/bin/deactivate\n```\n\n\n\n#### 基于python3 的虚拟环境搭建\n使用venv搭建的虚拟环境同virtualenv搭建的虚拟环境，即venv可替代virtualenv\n\npython3自带venv\n\n创建虚拟环境：\n```\n$ mkdir myenv    #venv为虚拟环境目录名，目录名自定义\n$ cd myenv\n$ python3 -m venv .　#(venv之后一个空格加上一个点 “ . ”)\n\n'''激活虚拟环境：'''\n$ cd Scripts\n$ activate.bat / activate\n\n'''安装需要的包：'''\n$ pip3 install requests    #requests 即为包名，需要版本号时为：request==版本号\n'''退出虚拟环境：'''\n$ deactivate.bat / deactivate\n```\n##### pip3升级：\n```\nsudo pip3 install --upgrade pip\nsudo vim /usr/bin/pip3\n    from pip import __main__\n         ......(__main__._main())\n```\n\n","source":"_posts/python 虚拟环境的创建.md","raw":"---\ntitle: python 虚拟环境的搭建\ntags:\n  - python\ncategories: 学习笔记\nabbrlink: 945033781\ndate: 2019-01-19 21:43:28\nupdated: 2019-02-15 22:22:22\n---\n# python 虚拟环境的创建\n\n#### 基于python2 的虚拟环境搭建\nvirtualenv 是一个创建隔绝的Python环境的工具，用来管理虚拟环境\n\n安装 virtualenv：\n> pip install virtualenv\n\n创建虚拟环境：\n\n```\n$ cd my_project_dir\n$ virtualenv venv　　#venv为虚拟环境目录名，目录名自定义\n'''激活虚拟环境：'''\n$ source venv/bin/activate\n'''安装需要的包：'''\n$ pip install requests\n'''当有requirements.txt的时候可以'''\n$ pip install -r requirements.txt  #直接安装全部包\n'''退出虚拟环境：'''\n$ . venv/bin/deactivate\n```\n\n\n\n#### 基于python3 的虚拟环境搭建\n使用venv搭建的虚拟环境同virtualenv搭建的虚拟环境，即venv可替代virtualenv\n\npython3自带venv\n\n创建虚拟环境：\n```\n$ mkdir myenv    #venv为虚拟环境目录名，目录名自定义\n$ cd myenv\n$ python3 -m venv .　#(venv之后一个空格加上一个点 “ . ”)\n\n'''激活虚拟环境：'''\n$ cd Scripts\n$ activate.bat / activate\n\n'''安装需要的包：'''\n$ pip3 install requests    #requests 即为包名，需要版本号时为：request==版本号\n'''退出虚拟环境：'''\n$ deactivate.bat / deactivate\n```\n##### pip3升级：\n```\nsudo pip3 install --upgrade pip\nsudo vim /usr/bin/pip3\n    from pip import __main__\n         ......(__main__._main())\n```\n\n","slug":"python 虚拟环境的创建","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppky000e7rs6e0xq4tlv","content":"<h1 id=\"python-虚拟环境的创建\"><a href=\"#python-虚拟环境的创建\" class=\"headerlink\" title=\"python 虚拟环境的创建\"></a>python 虚拟环境的创建</h1><h4 id=\"基于python2-的虚拟环境搭建\"><a href=\"#基于python2-的虚拟环境搭建\" class=\"headerlink\" title=\"基于python2 的虚拟环境搭建\"></a>基于python2 的虚拟环境搭建</h4><p>virtualenv 是一个创建隔绝的Python环境的工具，用来管理虚拟环境</p>\n<p>安装 virtualenv：</p>\n<blockquote>\n<p>pip install virtualenv</p>\n</blockquote>\n<p>创建虚拟环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd my_project_dir</span><br><span class=\"line\">$ virtualenv venv　　#venv为虚拟环境目录名，目录名自定义</span><br><span class=\"line\">&apos;&apos;&apos;激活虚拟环境：&apos;&apos;&apos;</span><br><span class=\"line\">$ source venv/bin/activate</span><br><span class=\"line\">&apos;&apos;&apos;安装需要的包：&apos;&apos;&apos;</span><br><span class=\"line\">$ pip install requests</span><br><span class=\"line\">&apos;&apos;&apos;当有requirements.txt的时候可以&apos;&apos;&apos;</span><br><span class=\"line\">$ pip install -r requirements.txt  #直接安装全部包</span><br><span class=\"line\">&apos;&apos;&apos;退出虚拟环境：&apos;&apos;&apos;</span><br><span class=\"line\">$ . venv/bin/deactivate</span><br></pre></td></tr></table></figure>\n<h4 id=\"基于python3-的虚拟环境搭建\"><a href=\"#基于python3-的虚拟环境搭建\" class=\"headerlink\" title=\"基于python3 的虚拟环境搭建\"></a>基于python3 的虚拟环境搭建</h4><p>使用venv搭建的虚拟环境同virtualenv搭建的虚拟环境，即venv可替代virtualenv</p>\n<p>python3自带venv</p>\n<p>创建虚拟环境：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir myenv    #venv为虚拟环境目录名，目录名自定义</span><br><span class=\"line\">$ cd myenv</span><br><span class=\"line\">$ python3 -m venv .　#(venv之后一个空格加上一个点 “ . ”)</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;激活虚拟环境：&apos;&apos;&apos;</span><br><span class=\"line\">$ cd Scripts</span><br><span class=\"line\">$ activate.bat / activate</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;安装需要的包：&apos;&apos;&apos;</span><br><span class=\"line\">$ pip3 install requests    #requests 即为包名，需要版本号时为：request==版本号</span><br><span class=\"line\">&apos;&apos;&apos;退出虚拟环境：&apos;&apos;&apos;</span><br><span class=\"line\">$ deactivate.bat / deactivate</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"pip3升级：\"><a href=\"#pip3升级：\" class=\"headerlink\" title=\"pip3升级：\"></a>pip3升级：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install --upgrade pip</span><br><span class=\"line\">sudo vim /usr/bin/pip3</span><br><span class=\"line\">    from pip import __main__</span><br><span class=\"line\">         ......(__main__._main())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-虚拟环境的创建\"><a href=\"#python-虚拟环境的创建\" class=\"headerlink\" title=\"python 虚拟环境的创建\"></a>python 虚拟环境的创建</h1><h4 id=\"基于python2-的虚拟环境搭建\"><a href=\"#基于python2-的虚拟环境搭建\" class=\"headerlink\" title=\"基于python2 的虚拟环境搭建\"></a>基于python2 的虚拟环境搭建</h4><p>virtualenv 是一个创建隔绝的Python环境的工具，用来管理虚拟环境</p>\n<p>安装 virtualenv：</p>\n<blockquote>\n<p>pip install virtualenv</p>\n</blockquote>\n<p>创建虚拟环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd my_project_dir</span><br><span class=\"line\">$ virtualenv venv　　#venv为虚拟环境目录名，目录名自定义</span><br><span class=\"line\">&apos;&apos;&apos;激活虚拟环境：&apos;&apos;&apos;</span><br><span class=\"line\">$ source venv/bin/activate</span><br><span class=\"line\">&apos;&apos;&apos;安装需要的包：&apos;&apos;&apos;</span><br><span class=\"line\">$ pip install requests</span><br><span class=\"line\">&apos;&apos;&apos;当有requirements.txt的时候可以&apos;&apos;&apos;</span><br><span class=\"line\">$ pip install -r requirements.txt  #直接安装全部包</span><br><span class=\"line\">&apos;&apos;&apos;退出虚拟环境：&apos;&apos;&apos;</span><br><span class=\"line\">$ . venv/bin/deactivate</span><br></pre></td></tr></table></figure>\n<h4 id=\"基于python3-的虚拟环境搭建\"><a href=\"#基于python3-的虚拟环境搭建\" class=\"headerlink\" title=\"基于python3 的虚拟环境搭建\"></a>基于python3 的虚拟环境搭建</h4><p>使用venv搭建的虚拟环境同virtualenv搭建的虚拟环境，即venv可替代virtualenv</p>\n<p>python3自带venv</p>\n<p>创建虚拟环境：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir myenv    #venv为虚拟环境目录名，目录名自定义</span><br><span class=\"line\">$ cd myenv</span><br><span class=\"line\">$ python3 -m venv .　#(venv之后一个空格加上一个点 “ . ”)</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;激活虚拟环境：&apos;&apos;&apos;</span><br><span class=\"line\">$ cd Scripts</span><br><span class=\"line\">$ activate.bat / activate</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;安装需要的包：&apos;&apos;&apos;</span><br><span class=\"line\">$ pip3 install requests    #requests 即为包名，需要版本号时为：request==版本号</span><br><span class=\"line\">&apos;&apos;&apos;退出虚拟环境：&apos;&apos;&apos;</span><br><span class=\"line\">$ deactivate.bat / deactivate</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"pip3升级：\"><a href=\"#pip3升级：\" class=\"headerlink\" title=\"pip3升级：\"></a>pip3升级：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install --upgrade pip</span><br><span class=\"line\">sudo vim /usr/bin/pip3</span><br><span class=\"line\">    from pip import __main__</span><br><span class=\"line\">         ......(__main__._main())</span><br></pre></td></tr></table></figure>\n"},{"title":"python读取大文件","abbrlink":1232847187,"date":"2019-01-19T13:43:28.000Z","updated":"2019-02-15T14:22:22.000Z","_content":"## python 读取大文件\n\npython读取文件一般情况是利用open()函数以及read()函数来完成：\n\n```\nf = open(filename,'r')\nf.read()\n```\n这种方法读取小文件，即读取大小远远小于内存的文件显然没有什么问题。但是如果是将一个10G大小的日志文件读取，即文件大小大于内存，这么处理就有问题了，会造成MemoryError ... 也就是发生内存溢出。\n\n这里发现跟read()类似的还有其他的方法：read(参数)、readline()、readlines()\n### read(参数)：\n通过参数指定每次读取的大小长度,这样就避免了因为文件太大读取出问题。\n\n```\nwhile True:\n    block = f.read(1024)\n    if not block:\n        break\n```\n### readline()：\n每次读取一行\n\n```\nwhile True:\n    line = f.readline()\n    if not line:\n        break\n```\n### readlines()：\n读取全部的行，构成一个list，通过list来对文件进行处理，但是这种方式依然会造成MemoyError\n\n```\nfor line in f.readlines():\n    ....\n```\n### 分块读取：\n处理大文件是很容易想到的就是将大文件分割成若干小文件处理，处理完每个小文件后释放该部分内存。这里用了iter 和 yield：\n\n```\ndef read_in_chunks(filePath, chunk_size=1024*1024):\n    \"\"\"\n    Lazy function (generator) to read a file piece by piece.\n    Default chunk size: 1M\n    You can set your own chunk size\n    \"\"\"\n    file_object = open(filePath)\n    while True:\n        chunk_data = file_object.read(chunk_size)\n        if not chunk_data:\n            break\n        yield chunk_data\nif __name__ == \"__main__\":\n    filePath = './path/filename'\n    for chunk in read_in_chunks(filePath):\n        process(chunk) # <do something with chunk>\n```\n### 使用With open()：\nwith语句打开和关闭文件，包括抛出一个内部块异常。for line in f文件对象f视为一个迭代器，会自动的采用缓冲IO和内存管理，所以你不必担心大文件\n\n```\n# If the file is line based\nwith open(...) as f:\n　　for line in f:\n　　　　process(line) # <do something with line>\n```\n\n##### 关于with open()的优化：\n面对百万行的大型数据使用with open 是没有问题的，但是这里面参数的不同也会导致不同的效率。经过测试发现参数为\"rb\"时的效率是\"r\"的6倍。由此可知二进制读取依然是最快的模式。\n\n```\nwith open(filename,\"rb\") as f: \n  for fLine in f: \n  　　pass \n```\n测试结果：rb方式最快，100w行全遍历2.9秒。基本能满足中大型文件处理效率需求。如果从rb(二级制读取)读取改为r(读取模式)，慢5-6倍。\n### linecache模块\n以上几种方式都不支持对于文件按行随机访问。在这样的背景下，能够支持直接访问某一行内容的linecache模块是一种很好的补充。\n我们可以使用linecache模块的getline方法访问某一具体行的内容，官方文档中给出了如下用法：\n\n```\nimport linecache\nlinecache.getline('filename', 6)\n```\n在使用过程中我注意到，基于linecache的getline方法的日志分析会在跑满CPU资源之前首先占用大量内存空间，也就是在CPU使用率仍然很低的情况下，内存空间就会被迅速地消耗。\n这一现象引起了我的兴趣。我猜测linecache在随机读取文件时，是首先依序将文件读入内存，之后寻找所要定位的行是否在内存当中。若不在，则进行相应的替换行为，直至寻找到所对应的行，再将其返回。\n对linecache代码的阅读证实了这一想法。\n在linecache.py中，我们可以看到getline的定义为：\n\n```\ndef getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\n```\n不难看出，getline方法通过getlines得到了文件行的List，以此来实现对于文件行的随机读取。继续查看getlines的定义。\n\n```\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n\n    if filename in cache:\n        return cache[filename][2]\n    else:\n        return updatecache(filename, module_globals)\n```\n由此可见，getlines方法会首先确认文件是否在缓存当中，如果在则返回该文件的行的List，否则执行updatecache方法，对缓存内容进行更新。因此，在程序启动阶段，linecache不得不首先占用内存对文件进行缓存，才能进行后续的读取操作。\n而在updatecache方法中，我们可以看到一个有趣的事实是：\n\n```\ndef updatecache(filename, module_globals=None):\n    \"\"\"Update a cache entry and return its list of lines.\n    If something's wrong, print a message, discard the cache entry,\n    and return an empty list.\"\"\"\n\n    ## ... 省略...\n\n    try:\n        fp = open(fullname, 'rU')\n        lines = fp.readlines()\n        fp.close()\n    except IOError, msg:\n##      print '*** Cannot open', fullname, ':', msg\n        return []\n    if lines and not lines[-1].endswith('\\n'):\n        lines[-1] += '\\n'\n    size, mtime = stat.st_size, stat.st_mtime\n    cache[filename] = size, mtime, lines, fullname\n    return lines\n```\n也就是说，linecache依然借助了文件对象的readlines方法。这也给了我们一个提示，当文件很大不适用readlines方法直接获取行的List进行读取解析时，linecache似乎也并不会成为一个很好的选择。\n\n\n### 内存检测工具介绍\n#### memory_profiler\n首先先用pip安装memory_profiler\n\n```\npip install memory_profiler\n```\nmemory_profiler是利用python的装饰器工作的，所以我们需要在进行测试的函数上添加装饰器。\n\n```\nfrom hashlib import sha1\nimport sys\n@profile\ndef my_func():\n    sha1Obj = sha1()\n    with open(sys.argv[1], 'rb') as f:\n        while True:\n            buf = f.read(1024 * 1024)\n            if buf:\n                sha1Obj.update(buf)\n            else:\n                break\n    print(sha1Obj.hexdigest())\nif __name__ == '__main__':\n    my_func()\n```\n之后在运行代码时加上** -m memory_profiler**\n\n就可以了解函数每一步代码的内存占用了\n![image](https://upload-images.jianshu.io/upload_images/8552201-762556af60ff1b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### guppy\n首先，通过pip先安装guppy\n\n```\npip install guppy\n```\n之后可以在代码之中利用guppy直接打印出对应各种python类型（list、tuple、dict等）分别创建了多少对象，占用了多少内存。\n\n```\nfrom guppy import hpy\nimport sys\ndef my_func():\n    mem = hpy()\n    with open(sys.argv[1], 'rb') as f:\n        while True:\n            buf = f.read(10 * 1024 * 1024)\n            if buf:\n                print(mem.heap())\n            else:\n                break\n```\n通过上述两种工具guppy与memory_profiler可以很好地来监控python代码运行时的内存占用问题。\n\n\n---\n\n### 参考链接：\n\n[Python读取大文件的\"坑“与内存占用检测](https://www.pythontab.com/html/2018/pythonhexinbiancheng_0828/1340.html)\n\n[使用Python读取大文件的方法](https://www.jb51.net/article/135002.htm)\n\n[python linecache读取过程\n](https://www.cnblogs.com/wennn/p/6725194.html?utm_source=itdadao&utm_medium=referral)","source":"_posts/python 读取大文件.md","raw":"---\ntitle: python读取大文件\ntags:\n  - python\ncategories: 学习笔记\nabbrlink: 1232847187\ndate: 2019-01-19 21:43:28\nupdated: 2019-02-15 22:22:22\n---\n## python 读取大文件\n\npython读取文件一般情况是利用open()函数以及read()函数来完成：\n\n```\nf = open(filename,'r')\nf.read()\n```\n这种方法读取小文件，即读取大小远远小于内存的文件显然没有什么问题。但是如果是将一个10G大小的日志文件读取，即文件大小大于内存，这么处理就有问题了，会造成MemoryError ... 也就是发生内存溢出。\n\n这里发现跟read()类似的还有其他的方法：read(参数)、readline()、readlines()\n### read(参数)：\n通过参数指定每次读取的大小长度,这样就避免了因为文件太大读取出问题。\n\n```\nwhile True:\n    block = f.read(1024)\n    if not block:\n        break\n```\n### readline()：\n每次读取一行\n\n```\nwhile True:\n    line = f.readline()\n    if not line:\n        break\n```\n### readlines()：\n读取全部的行，构成一个list，通过list来对文件进行处理，但是这种方式依然会造成MemoyError\n\n```\nfor line in f.readlines():\n    ....\n```\n### 分块读取：\n处理大文件是很容易想到的就是将大文件分割成若干小文件处理，处理完每个小文件后释放该部分内存。这里用了iter 和 yield：\n\n```\ndef read_in_chunks(filePath, chunk_size=1024*1024):\n    \"\"\"\n    Lazy function (generator) to read a file piece by piece.\n    Default chunk size: 1M\n    You can set your own chunk size\n    \"\"\"\n    file_object = open(filePath)\n    while True:\n        chunk_data = file_object.read(chunk_size)\n        if not chunk_data:\n            break\n        yield chunk_data\nif __name__ == \"__main__\":\n    filePath = './path/filename'\n    for chunk in read_in_chunks(filePath):\n        process(chunk) # <do something with chunk>\n```\n### 使用With open()：\nwith语句打开和关闭文件，包括抛出一个内部块异常。for line in f文件对象f视为一个迭代器，会自动的采用缓冲IO和内存管理，所以你不必担心大文件\n\n```\n# If the file is line based\nwith open(...) as f:\n　　for line in f:\n　　　　process(line) # <do something with line>\n```\n\n##### 关于with open()的优化：\n面对百万行的大型数据使用with open 是没有问题的，但是这里面参数的不同也会导致不同的效率。经过测试发现参数为\"rb\"时的效率是\"r\"的6倍。由此可知二进制读取依然是最快的模式。\n\n```\nwith open(filename,\"rb\") as f: \n  for fLine in f: \n  　　pass \n```\n测试结果：rb方式最快，100w行全遍历2.9秒。基本能满足中大型文件处理效率需求。如果从rb(二级制读取)读取改为r(读取模式)，慢5-6倍。\n### linecache模块\n以上几种方式都不支持对于文件按行随机访问。在这样的背景下，能够支持直接访问某一行内容的linecache模块是一种很好的补充。\n我们可以使用linecache模块的getline方法访问某一具体行的内容，官方文档中给出了如下用法：\n\n```\nimport linecache\nlinecache.getline('filename', 6)\n```\n在使用过程中我注意到，基于linecache的getline方法的日志分析会在跑满CPU资源之前首先占用大量内存空间，也就是在CPU使用率仍然很低的情况下，内存空间就会被迅速地消耗。\n这一现象引起了我的兴趣。我猜测linecache在随机读取文件时，是首先依序将文件读入内存，之后寻找所要定位的行是否在内存当中。若不在，则进行相应的替换行为，直至寻找到所对应的行，再将其返回。\n对linecache代码的阅读证实了这一想法。\n在linecache.py中，我们可以看到getline的定义为：\n\n```\ndef getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\n```\n不难看出，getline方法通过getlines得到了文件行的List，以此来实现对于文件行的随机读取。继续查看getlines的定义。\n\n```\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n\n    if filename in cache:\n        return cache[filename][2]\n    else:\n        return updatecache(filename, module_globals)\n```\n由此可见，getlines方法会首先确认文件是否在缓存当中，如果在则返回该文件的行的List，否则执行updatecache方法，对缓存内容进行更新。因此，在程序启动阶段，linecache不得不首先占用内存对文件进行缓存，才能进行后续的读取操作。\n而在updatecache方法中，我们可以看到一个有趣的事实是：\n\n```\ndef updatecache(filename, module_globals=None):\n    \"\"\"Update a cache entry and return its list of lines.\n    If something's wrong, print a message, discard the cache entry,\n    and return an empty list.\"\"\"\n\n    ## ... 省略...\n\n    try:\n        fp = open(fullname, 'rU')\n        lines = fp.readlines()\n        fp.close()\n    except IOError, msg:\n##      print '*** Cannot open', fullname, ':', msg\n        return []\n    if lines and not lines[-1].endswith('\\n'):\n        lines[-1] += '\\n'\n    size, mtime = stat.st_size, stat.st_mtime\n    cache[filename] = size, mtime, lines, fullname\n    return lines\n```\n也就是说，linecache依然借助了文件对象的readlines方法。这也给了我们一个提示，当文件很大不适用readlines方法直接获取行的List进行读取解析时，linecache似乎也并不会成为一个很好的选择。\n\n\n### 内存检测工具介绍\n#### memory_profiler\n首先先用pip安装memory_profiler\n\n```\npip install memory_profiler\n```\nmemory_profiler是利用python的装饰器工作的，所以我们需要在进行测试的函数上添加装饰器。\n\n```\nfrom hashlib import sha1\nimport sys\n@profile\ndef my_func():\n    sha1Obj = sha1()\n    with open(sys.argv[1], 'rb') as f:\n        while True:\n            buf = f.read(1024 * 1024)\n            if buf:\n                sha1Obj.update(buf)\n            else:\n                break\n    print(sha1Obj.hexdigest())\nif __name__ == '__main__':\n    my_func()\n```\n之后在运行代码时加上** -m memory_profiler**\n\n就可以了解函数每一步代码的内存占用了\n![image](https://upload-images.jianshu.io/upload_images/8552201-762556af60ff1b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### guppy\n首先，通过pip先安装guppy\n\n```\npip install guppy\n```\n之后可以在代码之中利用guppy直接打印出对应各种python类型（list、tuple、dict等）分别创建了多少对象，占用了多少内存。\n\n```\nfrom guppy import hpy\nimport sys\ndef my_func():\n    mem = hpy()\n    with open(sys.argv[1], 'rb') as f:\n        while True:\n            buf = f.read(10 * 1024 * 1024)\n            if buf:\n                print(mem.heap())\n            else:\n                break\n```\n通过上述两种工具guppy与memory_profiler可以很好地来监控python代码运行时的内存占用问题。\n\n\n---\n\n### 参考链接：\n\n[Python读取大文件的\"坑“与内存占用检测](https://www.pythontab.com/html/2018/pythonhexinbiancheng_0828/1340.html)\n\n[使用Python读取大文件的方法](https://www.jb51.net/article/135002.htm)\n\n[python linecache读取过程\n](https://www.cnblogs.com/wennn/p/6725194.html?utm_source=itdadao&utm_medium=referral)","slug":"python 读取大文件","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppl1000f7rs6zci4dmns","content":"<h2 id=\"python-读取大文件\"><a href=\"#python-读取大文件\" class=\"headerlink\" title=\"python 读取大文件\"></a>python 读取大文件</h2><p>python读取文件一般情况是利用open()函数以及read()函数来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(filename,&apos;r&apos;)</span><br><span class=\"line\">f.read()</span><br></pre></td></tr></table></figure>\n<p>这种方法读取小文件，即读取大小远远小于内存的文件显然没有什么问题。但是如果是将一个10G大小的日志文件读取，即文件大小大于内存，这么处理就有问题了，会造成MemoryError … 也就是发生内存溢出。</p>\n<p>这里发现跟read()类似的还有其他的方法：read(参数)、readline()、readlines()</p>\n<h3 id=\"read-参数-：\"><a href=\"#read-参数-：\" class=\"headerlink\" title=\"read(参数)：\"></a>read(参数)：</h3><p>通过参数指定每次读取的大小长度,这样就避免了因为文件太大读取出问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while True:</span><br><span class=\"line\">    block = f.read(1024)</span><br><span class=\"line\">    if not block:</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<h3 id=\"readline-：\"><a href=\"#readline-：\" class=\"headerlink\" title=\"readline()：\"></a>readline()：</h3><p>每次读取一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while True:</span><br><span class=\"line\">    line = f.readline()</span><br><span class=\"line\">    if not line:</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<h3 id=\"readlines-：\"><a href=\"#readlines-：\" class=\"headerlink\" title=\"readlines()：\"></a>readlines()：</h3><p>读取全部的行，构成一个list，通过list来对文件进行处理，但是这种方式依然会造成MemoyError</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in f.readlines():</span><br><span class=\"line\">    ....</span><br></pre></td></tr></table></figure>\n<h3 id=\"分块读取：\"><a href=\"#分块读取：\" class=\"headerlink\" title=\"分块读取：\"></a>分块读取：</h3><p>处理大文件是很容易想到的就是将大文件分割成若干小文件处理，处理完每个小文件后释放该部分内存。这里用了iter 和 yield：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def read_in_chunks(filePath, chunk_size=1024*1024):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Lazy function (generator) to read a file piece by piece.</span><br><span class=\"line\">    Default chunk size: 1M</span><br><span class=\"line\">    You can set your own chunk size</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    file_object = open(filePath)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        chunk_data = file_object.read(chunk_size)</span><br><span class=\"line\">        if not chunk_data:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        yield chunk_data</span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    filePath = &apos;./path/filename&apos;</span><br><span class=\"line\">    for chunk in read_in_chunks(filePath):</span><br><span class=\"line\">        process(chunk) # &lt;do something with chunk&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用With-open-：\"><a href=\"#使用With-open-：\" class=\"headerlink\" title=\"使用With open()：\"></a>使用With open()：</h3><p>with语句打开和关闭文件，包括抛出一个内部块异常。for line in f文件对象f视为一个迭代器，会自动的采用缓冲IO和内存管理，所以你不必担心大文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># If the file is line based</span><br><span class=\"line\">with open(...) as f:</span><br><span class=\"line\">　　for line in f:</span><br><span class=\"line\">　　　　process(line) # &lt;do something with line&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"关于with-open-的优化：\"><a href=\"#关于with-open-的优化：\" class=\"headerlink\" title=\"关于with open()的优化：\"></a>关于with open()的优化：</h5><p>面对百万行的大型数据使用with open 是没有问题的，但是这里面参数的不同也会导致不同的效率。经过测试发现参数为”rb”时的效率是”r”的6倍。由此可知二进制读取依然是最快的模式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(filename,&quot;rb&quot;) as f: </span><br><span class=\"line\">  for fLine in f: </span><br><span class=\"line\">  　　pass</span><br></pre></td></tr></table></figure>\n<p>测试结果：rb方式最快，100w行全遍历2.9秒。基本能满足中大型文件处理效率需求。如果从rb(二级制读取)读取改为r(读取模式)，慢5-6倍。</p>\n<h3 id=\"linecache模块\"><a href=\"#linecache模块\" class=\"headerlink\" title=\"linecache模块\"></a>linecache模块</h3><p>以上几种方式都不支持对于文件按行随机访问。在这样的背景下，能够支持直接访问某一行内容的linecache模块是一种很好的补充。<br>我们可以使用linecache模块的getline方法访问某一具体行的内容，官方文档中给出了如下用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import linecache</span><br><span class=\"line\">linecache.getline(&apos;filename&apos;, 6)</span><br></pre></td></tr></table></figure>\n<p>在使用过程中我注意到，基于linecache的getline方法的日志分析会在跑满CPU资源之前首先占用大量内存空间，也就是在CPU使用率仍然很低的情况下，内存空间就会被迅速地消耗。<br>这一现象引起了我的兴趣。我猜测linecache在随机读取文件时，是首先依序将文件读入内存，之后寻找所要定位的行是否在内存当中。若不在，则进行相应的替换行为，直至寻找到所对应的行，再将其返回。<br>对linecache代码的阅读证实了这一想法。<br>在linecache.py中，我们可以看到getline的定义为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getline(filename, lineno, module_globals=None):</span><br><span class=\"line\">    lines = getlines(filename, module_globals)</span><br><span class=\"line\">    if 1 &lt;= lineno &lt;= len(lines):</span><br><span class=\"line\">        return lines[lineno-1]</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return &apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>不难看出，getline方法通过getlines得到了文件行的List，以此来实现对于文件行的随机读取。继续查看getlines的定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getlines(filename, module_globals=None):</span><br><span class=\"line\">    &quot;&quot;&quot;Get the lines for a file from the cache.</span><br><span class=\"line\">    Update the cache if it doesn&apos;t contain an entry for this file already.&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    if filename in cache:</span><br><span class=\"line\">        return cache[filename][2]</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return updatecache(filename, module_globals)</span><br></pre></td></tr></table></figure>\n<p>由此可见，getlines方法会首先确认文件是否在缓存当中，如果在则返回该文件的行的List，否则执行updatecache方法，对缓存内容进行更新。因此，在程序启动阶段，linecache不得不首先占用内存对文件进行缓存，才能进行后续的读取操作。<br>而在updatecache方法中，我们可以看到一个有趣的事实是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def updatecache(filename, module_globals=None):</span><br><span class=\"line\">    &quot;&quot;&quot;Update a cache entry and return its list of lines.</span><br><span class=\"line\">    If something&apos;s wrong, print a message, discard the cache entry,</span><br><span class=\"line\">    and return an empty list.&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    ## ... 省略...</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        fp = open(fullname, &apos;rU&apos;)</span><br><span class=\"line\">        lines = fp.readlines()</span><br><span class=\"line\">        fp.close()</span><br><span class=\"line\">    except IOError, msg:</span><br><span class=\"line\">##      print &apos;*** Cannot open&apos;, fullname, &apos;:&apos;, msg</span><br><span class=\"line\">        return []</span><br><span class=\"line\">    if lines and not lines[-1].endswith(&apos;\\n&apos;):</span><br><span class=\"line\">        lines[-1] += &apos;\\n&apos;</span><br><span class=\"line\">    size, mtime = stat.st_size, stat.st_mtime</span><br><span class=\"line\">    cache[filename] = size, mtime, lines, fullname</span><br><span class=\"line\">    return lines</span><br></pre></td></tr></table></figure>\n<p>也就是说，linecache依然借助了文件对象的readlines方法。这也给了我们一个提示，当文件很大不适用readlines方法直接获取行的List进行读取解析时，linecache似乎也并不会成为一个很好的选择。</p>\n<h3 id=\"内存检测工具介绍\"><a href=\"#内存检测工具介绍\" class=\"headerlink\" title=\"内存检测工具介绍\"></a>内存检测工具介绍</h3><h4 id=\"memory-profiler\"><a href=\"#memory-profiler\" class=\"headerlink\" title=\"memory_profiler\"></a>memory_profiler</h4><p>首先先用pip安装memory_profiler</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install memory_profiler</span><br></pre></td></tr></table></figure>\n<p>memory_profiler是利用python的装饰器工作的，所以我们需要在进行测试的函数上添加装饰器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from hashlib import sha1</span><br><span class=\"line\">import sys</span><br><span class=\"line\">@profile</span><br><span class=\"line\">def my_func():</span><br><span class=\"line\">    sha1Obj = sha1()</span><br><span class=\"line\">    with open(sys.argv[1], &apos;rb&apos;) as f:</span><br><span class=\"line\">        while True:</span><br><span class=\"line\">            buf = f.read(1024 * 1024)</span><br><span class=\"line\">            if buf:</span><br><span class=\"line\">                sha1Obj.update(buf)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                break</span><br><span class=\"line\">    print(sha1Obj.hexdigest())</span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    my_func()</span><br></pre></td></tr></table></figure>\n<p>之后在运行代码时加上<strong> -m memory_profiler</strong></p>\n<p>就可以了解函数每一步代码的内存占用了<br><img src=\"https://upload-images.jianshu.io/upload_images/8552201-762556af60ff1b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"guppy\"><a href=\"#guppy\" class=\"headerlink\" title=\"guppy\"></a>guppy</h4><p>首先，通过pip先安装guppy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install guppy</span><br></pre></td></tr></table></figure>\n<p>之后可以在代码之中利用guppy直接打印出对应各种python类型（list、tuple、dict等）分别创建了多少对象，占用了多少内存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from guppy import hpy</span><br><span class=\"line\">import sys</span><br><span class=\"line\">def my_func():</span><br><span class=\"line\">    mem = hpy()</span><br><span class=\"line\">    with open(sys.argv[1], &apos;rb&apos;) as f:</span><br><span class=\"line\">        while True:</span><br><span class=\"line\">            buf = f.read(10 * 1024 * 1024)</span><br><span class=\"line\">            if buf:</span><br><span class=\"line\">                print(mem.heap())</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                break</span><br></pre></td></tr></table></figure>\n<p>通过上述两种工具guppy与memory_profiler可以很好地来监控python代码运行时的内存占用问题。</p>\n<hr>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.pythontab.com/html/2018/pythonhexinbiancheng_0828/1340.html\" target=\"_blank\" rel=\"noopener\">Python读取大文件的”坑“与内存占用检测</a></p>\n<p><a href=\"https://www.jb51.net/article/135002.htm\" target=\"_blank\" rel=\"noopener\">使用Python读取大文件的方法</a></p>\n<p><a href=\"https://www.cnblogs.com/wennn/p/6725194.html?utm_source=itdadao&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">python linecache读取过程\n</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python-读取大文件\"><a href=\"#python-读取大文件\" class=\"headerlink\" title=\"python 读取大文件\"></a>python 读取大文件</h2><p>python读取文件一般情况是利用open()函数以及read()函数来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(filename,&apos;r&apos;)</span><br><span class=\"line\">f.read()</span><br></pre></td></tr></table></figure>\n<p>这种方法读取小文件，即读取大小远远小于内存的文件显然没有什么问题。但是如果是将一个10G大小的日志文件读取，即文件大小大于内存，这么处理就有问题了，会造成MemoryError … 也就是发生内存溢出。</p>\n<p>这里发现跟read()类似的还有其他的方法：read(参数)、readline()、readlines()</p>\n<h3 id=\"read-参数-：\"><a href=\"#read-参数-：\" class=\"headerlink\" title=\"read(参数)：\"></a>read(参数)：</h3><p>通过参数指定每次读取的大小长度,这样就避免了因为文件太大读取出问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while True:</span><br><span class=\"line\">    block = f.read(1024)</span><br><span class=\"line\">    if not block:</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<h3 id=\"readline-：\"><a href=\"#readline-：\" class=\"headerlink\" title=\"readline()：\"></a>readline()：</h3><p>每次读取一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while True:</span><br><span class=\"line\">    line = f.readline()</span><br><span class=\"line\">    if not line:</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<h3 id=\"readlines-：\"><a href=\"#readlines-：\" class=\"headerlink\" title=\"readlines()：\"></a>readlines()：</h3><p>读取全部的行，构成一个list，通过list来对文件进行处理，但是这种方式依然会造成MemoyError</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in f.readlines():</span><br><span class=\"line\">    ....</span><br></pre></td></tr></table></figure>\n<h3 id=\"分块读取：\"><a href=\"#分块读取：\" class=\"headerlink\" title=\"分块读取：\"></a>分块读取：</h3><p>处理大文件是很容易想到的就是将大文件分割成若干小文件处理，处理完每个小文件后释放该部分内存。这里用了iter 和 yield：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def read_in_chunks(filePath, chunk_size=1024*1024):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Lazy function (generator) to read a file piece by piece.</span><br><span class=\"line\">    Default chunk size: 1M</span><br><span class=\"line\">    You can set your own chunk size</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    file_object = open(filePath)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        chunk_data = file_object.read(chunk_size)</span><br><span class=\"line\">        if not chunk_data:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        yield chunk_data</span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    filePath = &apos;./path/filename&apos;</span><br><span class=\"line\">    for chunk in read_in_chunks(filePath):</span><br><span class=\"line\">        process(chunk) # &lt;do something with chunk&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用With-open-：\"><a href=\"#使用With-open-：\" class=\"headerlink\" title=\"使用With open()：\"></a>使用With open()：</h3><p>with语句打开和关闭文件，包括抛出一个内部块异常。for line in f文件对象f视为一个迭代器，会自动的采用缓冲IO和内存管理，所以你不必担心大文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># If the file is line based</span><br><span class=\"line\">with open(...) as f:</span><br><span class=\"line\">　　for line in f:</span><br><span class=\"line\">　　　　process(line) # &lt;do something with line&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"关于with-open-的优化：\"><a href=\"#关于with-open-的优化：\" class=\"headerlink\" title=\"关于with open()的优化：\"></a>关于with open()的优化：</h5><p>面对百万行的大型数据使用with open 是没有问题的，但是这里面参数的不同也会导致不同的效率。经过测试发现参数为”rb”时的效率是”r”的6倍。由此可知二进制读取依然是最快的模式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(filename,&quot;rb&quot;) as f: </span><br><span class=\"line\">  for fLine in f: </span><br><span class=\"line\">  　　pass</span><br></pre></td></tr></table></figure>\n<p>测试结果：rb方式最快，100w行全遍历2.9秒。基本能满足中大型文件处理效率需求。如果从rb(二级制读取)读取改为r(读取模式)，慢5-6倍。</p>\n<h3 id=\"linecache模块\"><a href=\"#linecache模块\" class=\"headerlink\" title=\"linecache模块\"></a>linecache模块</h3><p>以上几种方式都不支持对于文件按行随机访问。在这样的背景下，能够支持直接访问某一行内容的linecache模块是一种很好的补充。<br>我们可以使用linecache模块的getline方法访问某一具体行的内容，官方文档中给出了如下用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import linecache</span><br><span class=\"line\">linecache.getline(&apos;filename&apos;, 6)</span><br></pre></td></tr></table></figure>\n<p>在使用过程中我注意到，基于linecache的getline方法的日志分析会在跑满CPU资源之前首先占用大量内存空间，也就是在CPU使用率仍然很低的情况下，内存空间就会被迅速地消耗。<br>这一现象引起了我的兴趣。我猜测linecache在随机读取文件时，是首先依序将文件读入内存，之后寻找所要定位的行是否在内存当中。若不在，则进行相应的替换行为，直至寻找到所对应的行，再将其返回。<br>对linecache代码的阅读证实了这一想法。<br>在linecache.py中，我们可以看到getline的定义为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getline(filename, lineno, module_globals=None):</span><br><span class=\"line\">    lines = getlines(filename, module_globals)</span><br><span class=\"line\">    if 1 &lt;= lineno &lt;= len(lines):</span><br><span class=\"line\">        return lines[lineno-1]</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return &apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>不难看出，getline方法通过getlines得到了文件行的List，以此来实现对于文件行的随机读取。继续查看getlines的定义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def getlines(filename, module_globals=None):</span><br><span class=\"line\">    &quot;&quot;&quot;Get the lines for a file from the cache.</span><br><span class=\"line\">    Update the cache if it doesn&apos;t contain an entry for this file already.&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    if filename in cache:</span><br><span class=\"line\">        return cache[filename][2]</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return updatecache(filename, module_globals)</span><br></pre></td></tr></table></figure>\n<p>由此可见，getlines方法会首先确认文件是否在缓存当中，如果在则返回该文件的行的List，否则执行updatecache方法，对缓存内容进行更新。因此，在程序启动阶段，linecache不得不首先占用内存对文件进行缓存，才能进行后续的读取操作。<br>而在updatecache方法中，我们可以看到一个有趣的事实是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def updatecache(filename, module_globals=None):</span><br><span class=\"line\">    &quot;&quot;&quot;Update a cache entry and return its list of lines.</span><br><span class=\"line\">    If something&apos;s wrong, print a message, discard the cache entry,</span><br><span class=\"line\">    and return an empty list.&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    ## ... 省略...</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        fp = open(fullname, &apos;rU&apos;)</span><br><span class=\"line\">        lines = fp.readlines()</span><br><span class=\"line\">        fp.close()</span><br><span class=\"line\">    except IOError, msg:</span><br><span class=\"line\">##      print &apos;*** Cannot open&apos;, fullname, &apos;:&apos;, msg</span><br><span class=\"line\">        return []</span><br><span class=\"line\">    if lines and not lines[-1].endswith(&apos;\\n&apos;):</span><br><span class=\"line\">        lines[-1] += &apos;\\n&apos;</span><br><span class=\"line\">    size, mtime = stat.st_size, stat.st_mtime</span><br><span class=\"line\">    cache[filename] = size, mtime, lines, fullname</span><br><span class=\"line\">    return lines</span><br></pre></td></tr></table></figure>\n<p>也就是说，linecache依然借助了文件对象的readlines方法。这也给了我们一个提示，当文件很大不适用readlines方法直接获取行的List进行读取解析时，linecache似乎也并不会成为一个很好的选择。</p>\n<h3 id=\"内存检测工具介绍\"><a href=\"#内存检测工具介绍\" class=\"headerlink\" title=\"内存检测工具介绍\"></a>内存检测工具介绍</h3><h4 id=\"memory-profiler\"><a href=\"#memory-profiler\" class=\"headerlink\" title=\"memory_profiler\"></a>memory_profiler</h4><p>首先先用pip安装memory_profiler</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install memory_profiler</span><br></pre></td></tr></table></figure>\n<p>memory_profiler是利用python的装饰器工作的，所以我们需要在进行测试的函数上添加装饰器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from hashlib import sha1</span><br><span class=\"line\">import sys</span><br><span class=\"line\">@profile</span><br><span class=\"line\">def my_func():</span><br><span class=\"line\">    sha1Obj = sha1()</span><br><span class=\"line\">    with open(sys.argv[1], &apos;rb&apos;) as f:</span><br><span class=\"line\">        while True:</span><br><span class=\"line\">            buf = f.read(1024 * 1024)</span><br><span class=\"line\">            if buf:</span><br><span class=\"line\">                sha1Obj.update(buf)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                break</span><br><span class=\"line\">    print(sha1Obj.hexdigest())</span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    my_func()</span><br></pre></td></tr></table></figure>\n<p>之后在运行代码时加上<strong> -m memory_profiler</strong></p>\n<p>就可以了解函数每一步代码的内存占用了<br><img src=\"https://upload-images.jianshu.io/upload_images/8552201-762556af60ff1b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h4 id=\"guppy\"><a href=\"#guppy\" class=\"headerlink\" title=\"guppy\"></a>guppy</h4><p>首先，通过pip先安装guppy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install guppy</span><br></pre></td></tr></table></figure>\n<p>之后可以在代码之中利用guppy直接打印出对应各种python类型（list、tuple、dict等）分别创建了多少对象，占用了多少内存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from guppy import hpy</span><br><span class=\"line\">import sys</span><br><span class=\"line\">def my_func():</span><br><span class=\"line\">    mem = hpy()</span><br><span class=\"line\">    with open(sys.argv[1], &apos;rb&apos;) as f:</span><br><span class=\"line\">        while True:</span><br><span class=\"line\">            buf = f.read(10 * 1024 * 1024)</span><br><span class=\"line\">            if buf:</span><br><span class=\"line\">                print(mem.heap())</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                break</span><br></pre></td></tr></table></figure>\n<p>通过上述两种工具guppy与memory_profiler可以很好地来监控python代码运行时的内存占用问题。</p>\n<hr>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.pythontab.com/html/2018/pythonhexinbiancheng_0828/1340.html\" target=\"_blank\" rel=\"noopener\">Python读取大文件的”坑“与内存占用检测</a></p>\n<p><a href=\"https://www.jb51.net/article/135002.htm\" target=\"_blank\" rel=\"noopener\">使用Python读取大文件的方法</a></p>\n<p><a href=\"https://www.cnblogs.com/wennn/p/6725194.html?utm_source=itdadao&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">python linecache读取过程\n</a></p>\n"},{"title":"SQLAlchemy的使用","abbrlink":1260038886,"date":"2019-01-19T13:43:28.000Z","updated":"2019-02-15T14:22:22.000Z","_content":"[toc]\n# 使用SQLAlchemy\nORM技术：Object-Relational Mapping，把关系数据库的表结构映射到对象上。\n\n在Python中，最有名的ORM框架是SQLAlchemy。\n#### pip安装SQLAlchemy：\n> pip install sqlalchemy\n\n首先，导入SQLAlchemy，并初始化DBSession：\n\n```\n# 导入:\nfrom sqlalchemy import Column, String, create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\n# 创建对象的基类:\nBase = declarative_base()\n\n# 定义User对象:\nclass User(Base):\n    # 表的名字:\n    __tablename__ = 'user'\n\n    # 表的结构:\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n\n# 初始化数据库连接:\nengine = create_engine('mysql+mysqlconnector://root:password@localhost:3306/test')\n# 创建DBSession类型:\nDBSession = sessionmaker(bind=engine)\n```\n下面，我们看看如何向数据库表中添加一行记录。\n\n由于有了ORM，我们向数据库表中添加一行记录，可以视为添加一个User对象\n\n```\n# 创建session对象:\nsession = DBSession()\n# 创建新User对象:\nnew_user = User(id='5', name='Bob')\n# 添加到session:\nsession.add(new_user)\n# 提交即保存到数据库:\nsession.commit()\n# 关闭session:\nsession.close()\n\n```\nSQLAlchemy提供的查询接口如下：\n\n```\n# 创建Session:\nsession = DBSession()\n# 创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:\nuser = session.query(User).filter(User.id=='5').one()\n# 打印类型和对象的name属性:\nprint('type:', type(user))\nprint('name:', user.name)\n# 关闭Session:\nsession.close()\n```\nORM框架也可以提供两个对象之间的一对多、多对多等功能。\n\n例如，如果一个User拥有多个Book，就可以定义一对多关系如下：\n\n```\nclass User(Base):\n    __tablename__ = 'user'\n\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n    # 一对多:\n    books = relationship('Book')\n\nclass Book(Base):\n    __tablename__ = 'book'\n\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n    # “多”的一方的book表是通过外键关联到user表的:\n    user_id = Column(String(20), ForeignKey('user.id'))\n```\n当我们查询一个User对象时，该对象的books属性将返回一个包含若干个Book对象的list。\n\n#### 关系定义\n1. **一对多**:\n \n 表示一对多的关系时，在子表类中通过 foreign key (外键)引用父表类。然后，在父表类中通过 relationship() 方法来引用子表的类\n```\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\")\n    # 在父表类中通过 relationship() 方法来引用子表的类集合\n    \nclass Child(Base):\n    __tablename__ = 'child'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n    # 在子表类中通过 foreign key (外键)引用父表的参考字段\n```\n在一对多的关系中建立双向的关系，这样的话在对方看来这就是一个多对一的关系，在子表类中附加一个 relationship() 方法，并且在双方的 relationship() 方法中使用 relationship.back_populates 方法参数：\n\n```\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\", back_populates=\"parent\")\n    \nclass Child(Base):\n    __tablename__ = 'child'    \n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))    \n    parent = relationship(\"Parent\", back_populates=\"children\")\n    \n# 子表类中附加一个 relationship() 方法\n# 并且在(父)子表类的 relationship() 方法中使用 relationship.back_populates 参数\n```\n或者，可以在单一的 relationship() 方法中使用 backref 参数来代替 back_populates 参数\n\n2. **一对一**\n\n一对一是两张表之间本质上的双向关系.要做到这一点，只需要在一对多关系基础上的父表中使用 uselist 参数来表示，uselist=False。\n\n3. **多对多**\n多对多关系会在两个类之间增加一个关联的表。这个关联的表在 relationship() 方法中通过 secondary 参数来表示。通常的，这个表会通过 MetaData 对象来与声明基类关联，所以这个 ForeignKey 指令会使用链接来定位到远程的表\n\n```\n# 多对多关系中的两个表之间的一个关联表\nassociation_table = Table('association', Base.metadata, Column('left_id', Integer, ForeignKey('left.id')), Column('right_id', Integer, ForeignKey('right.id')))\nclass Parent(Base):\n    __tablename__ = 'left'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\",secondary=association_table)\n    # 在父表中的 relationship() 方法传入 secondary 参数，其值为关联表的表名\n    \nclass Child(Base):\n    __tablename__ = 'right'\n    id = Column(Integer, primary_key=True)\n```\n指定使用 relationship.back_populates 参数，并且为每一个 relationship() 方法指定共用的关联表：\n\n```\n association_table = Table('association', Base.metadata, Column('left_id', Integer, ForeignKey('left.id')), Column('right_id', Integer, ForeignKey('right.id')))\n class Parent(Base):\n    __tablename__ = 'left'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\", secondary=association_table, back_populates=\"parents\")\nclass Child(Base):\n    __tablename__ = 'right'\n    id = Column(Integer, primary_key=True)\n    parents = relationship(\"Parent\", secondary=association_table, back_populates=\"children\")\n```\n\n\n\n---\n\n常见的SQLAlchemy列类型.配置选项和关系选项\n类型名称 | python类型 | 描述\n---|---|---\nInteger | int | 常规整形，通常为32位\nSmallInteger | int | 短整形，通常为16位\nBigInteger | int/long | 精度不受限整形\nFloat | float | 浮点数\nNumeric | decimal.Decimal | 定点数\nString | str | 可变长度字符串\nText | str | 可变长度字符串，适合大量文本\nUnicode | unicode | 浮点数\nBoolean | bool | 布尔型\nDate | datetime.date | 日期类型\nTime | datetime.time | 时间类型\nInterval |   datetime.timedelta | 时间间隔\nEnum  |  str|字符列表\nPickleType | 任意Python对象 | 自动Pickle序列化\nLargeBinary | str | 二进制\n\n常见的SQLAlchemy列选项\n可选参数 | 描述\n---|---\nprimary_key | 如果设置为True，则为该列表的主键\nunique | 如果设置为True，该列不允许相同值\nindex  | 如果设置为True，为该列创建索引，查询效率会更高\nnullable  |  如果设置为True，该列允许为空。如果设置为False，该列不允许空值\ndefault | 定义该列的默认值\n\n### 错误解决\n当使用migrate upgrade更新数据库时，如果删除以前创建的外键关联字段，会报错：\n> 1553, \"Cannot drop index 'xxx': needed in a foreign key constraint\n\n解决办法：\n\n进入数据库，手动删除外键所创建的索引：\n> show create table TABLE_NAME;\n\n找到对应的索引，并删除：\n> ALTER TABLE table_name DROP FOREIGN KEY exchange_ibfk_3;\n\n","source":"_posts/使用SQLAlchemy.md","raw":"---\ntitle: SQLAlchemy的使用\ntags:\n  - mysql\ncategories: 数据库\nabbrlink: 1260038886\ndate: 2019-01-19 21:43:28\nupdated: 2019-02-15 22:22:22\n---\n[toc]\n# 使用SQLAlchemy\nORM技术：Object-Relational Mapping，把关系数据库的表结构映射到对象上。\n\n在Python中，最有名的ORM框架是SQLAlchemy。\n#### pip安装SQLAlchemy：\n> pip install sqlalchemy\n\n首先，导入SQLAlchemy，并初始化DBSession：\n\n```\n# 导入:\nfrom sqlalchemy import Column, String, create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\n# 创建对象的基类:\nBase = declarative_base()\n\n# 定义User对象:\nclass User(Base):\n    # 表的名字:\n    __tablename__ = 'user'\n\n    # 表的结构:\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n\n# 初始化数据库连接:\nengine = create_engine('mysql+mysqlconnector://root:password@localhost:3306/test')\n# 创建DBSession类型:\nDBSession = sessionmaker(bind=engine)\n```\n下面，我们看看如何向数据库表中添加一行记录。\n\n由于有了ORM，我们向数据库表中添加一行记录，可以视为添加一个User对象\n\n```\n# 创建session对象:\nsession = DBSession()\n# 创建新User对象:\nnew_user = User(id='5', name='Bob')\n# 添加到session:\nsession.add(new_user)\n# 提交即保存到数据库:\nsession.commit()\n# 关闭session:\nsession.close()\n\n```\nSQLAlchemy提供的查询接口如下：\n\n```\n# 创建Session:\nsession = DBSession()\n# 创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:\nuser = session.query(User).filter(User.id=='5').one()\n# 打印类型和对象的name属性:\nprint('type:', type(user))\nprint('name:', user.name)\n# 关闭Session:\nsession.close()\n```\nORM框架也可以提供两个对象之间的一对多、多对多等功能。\n\n例如，如果一个User拥有多个Book，就可以定义一对多关系如下：\n\n```\nclass User(Base):\n    __tablename__ = 'user'\n\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n    # 一对多:\n    books = relationship('Book')\n\nclass Book(Base):\n    __tablename__ = 'book'\n\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n    # “多”的一方的book表是通过外键关联到user表的:\n    user_id = Column(String(20), ForeignKey('user.id'))\n```\n当我们查询一个User对象时，该对象的books属性将返回一个包含若干个Book对象的list。\n\n#### 关系定义\n1. **一对多**:\n \n 表示一对多的关系时，在子表类中通过 foreign key (外键)引用父表类。然后，在父表类中通过 relationship() 方法来引用子表的类\n```\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\")\n    # 在父表类中通过 relationship() 方法来引用子表的类集合\n    \nclass Child(Base):\n    __tablename__ = 'child'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n    # 在子表类中通过 foreign key (外键)引用父表的参考字段\n```\n在一对多的关系中建立双向的关系，这样的话在对方看来这就是一个多对一的关系，在子表类中附加一个 relationship() 方法，并且在双方的 relationship() 方法中使用 relationship.back_populates 方法参数：\n\n```\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\", back_populates=\"parent\")\n    \nclass Child(Base):\n    __tablename__ = 'child'    \n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))    \n    parent = relationship(\"Parent\", back_populates=\"children\")\n    \n# 子表类中附加一个 relationship() 方法\n# 并且在(父)子表类的 relationship() 方法中使用 relationship.back_populates 参数\n```\n或者，可以在单一的 relationship() 方法中使用 backref 参数来代替 back_populates 参数\n\n2. **一对一**\n\n一对一是两张表之间本质上的双向关系.要做到这一点，只需要在一对多关系基础上的父表中使用 uselist 参数来表示，uselist=False。\n\n3. **多对多**\n多对多关系会在两个类之间增加一个关联的表。这个关联的表在 relationship() 方法中通过 secondary 参数来表示。通常的，这个表会通过 MetaData 对象来与声明基类关联，所以这个 ForeignKey 指令会使用链接来定位到远程的表\n\n```\n# 多对多关系中的两个表之间的一个关联表\nassociation_table = Table('association', Base.metadata, Column('left_id', Integer, ForeignKey('left.id')), Column('right_id', Integer, ForeignKey('right.id')))\nclass Parent(Base):\n    __tablename__ = 'left'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\",secondary=association_table)\n    # 在父表中的 relationship() 方法传入 secondary 参数，其值为关联表的表名\n    \nclass Child(Base):\n    __tablename__ = 'right'\n    id = Column(Integer, primary_key=True)\n```\n指定使用 relationship.back_populates 参数，并且为每一个 relationship() 方法指定共用的关联表：\n\n```\n association_table = Table('association', Base.metadata, Column('left_id', Integer, ForeignKey('left.id')), Column('right_id', Integer, ForeignKey('right.id')))\n class Parent(Base):\n    __tablename__ = 'left'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\", secondary=association_table, back_populates=\"parents\")\nclass Child(Base):\n    __tablename__ = 'right'\n    id = Column(Integer, primary_key=True)\n    parents = relationship(\"Parent\", secondary=association_table, back_populates=\"children\")\n```\n\n\n\n---\n\n常见的SQLAlchemy列类型.配置选项和关系选项\n类型名称 | python类型 | 描述\n---|---|---\nInteger | int | 常规整形，通常为32位\nSmallInteger | int | 短整形，通常为16位\nBigInteger | int/long | 精度不受限整形\nFloat | float | 浮点数\nNumeric | decimal.Decimal | 定点数\nString | str | 可变长度字符串\nText | str | 可变长度字符串，适合大量文本\nUnicode | unicode | 浮点数\nBoolean | bool | 布尔型\nDate | datetime.date | 日期类型\nTime | datetime.time | 时间类型\nInterval |   datetime.timedelta | 时间间隔\nEnum  |  str|字符列表\nPickleType | 任意Python对象 | 自动Pickle序列化\nLargeBinary | str | 二进制\n\n常见的SQLAlchemy列选项\n可选参数 | 描述\n---|---\nprimary_key | 如果设置为True，则为该列表的主键\nunique | 如果设置为True，该列不允许相同值\nindex  | 如果设置为True，为该列创建索引，查询效率会更高\nnullable  |  如果设置为True，该列允许为空。如果设置为False，该列不允许空值\ndefault | 定义该列的默认值\n\n### 错误解决\n当使用migrate upgrade更新数据库时，如果删除以前创建的外键关联字段，会报错：\n> 1553, \"Cannot drop index 'xxx': needed in a foreign key constraint\n\n解决办法：\n\n进入数据库，手动删除外键所创建的索引：\n> show create table TABLE_NAME;\n\n找到对应的索引，并删除：\n> ALTER TABLE table_name DROP FOREIGN KEY exchange_ibfk_3;\n\n","slug":"使用SQLAlchemy","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppl5000j7rs6xo6md4j6","content":"<p>[toc]</p>\n<h1 id=\"使用SQLAlchemy\"><a href=\"#使用SQLAlchemy\" class=\"headerlink\" title=\"使用SQLAlchemy\"></a>使用SQLAlchemy</h1><p>ORM技术：Object-Relational Mapping，把关系数据库的表结构映射到对象上。</p>\n<p>在Python中，最有名的ORM框架是SQLAlchemy。</p>\n<h4 id=\"pip安装SQLAlchemy：\"><a href=\"#pip安装SQLAlchemy：\" class=\"headerlink\" title=\"pip安装SQLAlchemy：\"></a>pip安装SQLAlchemy：</h4><blockquote>\n<p>pip install sqlalchemy</p>\n</blockquote>\n<p>首先，导入SQLAlchemy，并初始化DBSession：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入:</span><br><span class=\"line\">from sqlalchemy import Column, String, create_engine</span><br><span class=\"line\">from sqlalchemy.orm import sessionmaker</span><br><span class=\"line\">from sqlalchemy.ext.declarative import declarative_base</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建对象的基类:</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\"># 定义User对象:</span><br><span class=\"line\">class User(Base):</span><br><span class=\"line\">    # 表的名字:</span><br><span class=\"line\">    __tablename__ = &apos;user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 表的结构:</span><br><span class=\"line\">    id = Column(String(20), primary_key=True)</span><br><span class=\"line\">    name = Column(String(20))</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化数据库连接:</span><br><span class=\"line\">engine = create_engine(&apos;mysql+mysqlconnector://root:password@localhost:3306/test&apos;)</span><br><span class=\"line\"># 创建DBSession类型:</span><br><span class=\"line\">DBSession = sessionmaker(bind=engine)</span><br></pre></td></tr></table></figure>\n<p>下面，我们看看如何向数据库表中添加一行记录。</p>\n<p>由于有了ORM，我们向数据库表中添加一行记录，可以视为添加一个User对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建session对象:</span><br><span class=\"line\">session = DBSession()</span><br><span class=\"line\"># 创建新User对象:</span><br><span class=\"line\">new_user = User(id=&apos;5&apos;, name=&apos;Bob&apos;)</span><br><span class=\"line\"># 添加到session:</span><br><span class=\"line\">session.add(new_user)</span><br><span class=\"line\"># 提交即保存到数据库:</span><br><span class=\"line\">session.commit()</span><br><span class=\"line\"># 关闭session:</span><br><span class=\"line\">session.close()</span><br></pre></td></tr></table></figure>\n<p>SQLAlchemy提供的查询接口如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建Session:</span><br><span class=\"line\">session = DBSession()</span><br><span class=\"line\"># 创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:</span><br><span class=\"line\">user = session.query(User).filter(User.id==&apos;5&apos;).one()</span><br><span class=\"line\"># 打印类型和对象的name属性:</span><br><span class=\"line\">print(&apos;type:&apos;, type(user))</span><br><span class=\"line\">print(&apos;name:&apos;, user.name)</span><br><span class=\"line\"># 关闭Session:</span><br><span class=\"line\">session.close()</span><br></pre></td></tr></table></figure>\n<p>ORM框架也可以提供两个对象之间的一对多、多对多等功能。</p>\n<p>例如，如果一个User拥有多个Book，就可以定义一对多关系如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(Base):</span><br><span class=\"line\">    __tablename__ = &apos;user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    id = Column(String(20), primary_key=True)</span><br><span class=\"line\">    name = Column(String(20))</span><br><span class=\"line\">    # 一对多:</span><br><span class=\"line\">    books = relationship(&apos;Book&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class Book(Base):</span><br><span class=\"line\">    __tablename__ = &apos;book&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    id = Column(String(20), primary_key=True)</span><br><span class=\"line\">    name = Column(String(20))</span><br><span class=\"line\">    # “多”的一方的book表是通过外键关联到user表的:</span><br><span class=\"line\">    user_id = Column(String(20), ForeignKey(&apos;user.id&apos;))</span><br></pre></td></tr></table></figure>\n<p>当我们查询一个User对象时，该对象的books属性将返回一个包含若干个Book对象的list。</p>\n<h4 id=\"关系定义\"><a href=\"#关系定义\" class=\"headerlink\" title=\"关系定义\"></a>关系定义</h4><ol>\n<li><p><strong>一对多</strong>:</p>\n<p>表示一对多的关系时，在子表类中通过 foreign key (外键)引用父表类。然后，在父表类中通过 relationship() 方法来引用子表的类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Parent(Base):</span><br><span class=\"line\">    __tablename__ = &apos;parent&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    children = relationship(&quot;Child&quot;)</span><br><span class=\"line\">    # 在父表类中通过 relationship() 方法来引用子表的类集合</span><br><span class=\"line\">    </span><br><span class=\"line\">class Child(Base):</span><br><span class=\"line\">    __tablename__ = &apos;child&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    parent_id = Column(Integer, ForeignKey(&apos;parent.id&apos;))</span><br><span class=\"line\">    # 在子表类中通过 foreign key (外键)引用父表的参考字段</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在一对多的关系中建立双向的关系，这样的话在对方看来这就是一个多对一的关系，在子表类中附加一个 relationship() 方法，并且在双方的 relationship() 方法中使用 relationship.back_populates 方法参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Parent(Base):</span><br><span class=\"line\">    __tablename__ = &apos;parent&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    children = relationship(&quot;Child&quot;, back_populates=&quot;parent&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">class Child(Base):</span><br><span class=\"line\">    __tablename__ = &apos;child&apos;    </span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    parent_id = Column(Integer, ForeignKey(&apos;parent.id&apos;))    </span><br><span class=\"line\">    parent = relationship(&quot;Parent&quot;, back_populates=&quot;children&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\"># 子表类中附加一个 relationship() 方法</span><br><span class=\"line\"># 并且在(父)子表类的 relationship() 方法中使用 relationship.back_populates 参数</span><br></pre></td></tr></table></figure>\n<p>或者，可以在单一的 relationship() 方法中使用 backref 参数来代替 back_populates 参数</p>\n<ol start=\"2\">\n<li><strong>一对一</strong></li>\n</ol>\n<p>一对一是两张表之间本质上的双向关系.要做到这一点，只需要在一对多关系基础上的父表中使用 uselist 参数来表示，uselist=False。</p>\n<ol start=\"3\">\n<li><strong>多对多</strong><br>多对多关系会在两个类之间增加一个关联的表。这个关联的表在 relationship() 方法中通过 secondary 参数来表示。通常的，这个表会通过 MetaData 对象来与声明基类关联，所以这个 ForeignKey 指令会使用链接来定位到远程的表</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 多对多关系中的两个表之间的一个关联表</span><br><span class=\"line\">association_table = Table(&apos;association&apos;, Base.metadata, Column(&apos;left_id&apos;, Integer, ForeignKey(&apos;left.id&apos;)), Column(&apos;right_id&apos;, Integer, ForeignKey(&apos;right.id&apos;)))</span><br><span class=\"line\">class Parent(Base):</span><br><span class=\"line\">    __tablename__ = &apos;left&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    children = relationship(&quot;Child&quot;,secondary=association_table)</span><br><span class=\"line\">    # 在父表中的 relationship() 方法传入 secondary 参数，其值为关联表的表名</span><br><span class=\"line\">    </span><br><span class=\"line\">class Child(Base):</span><br><span class=\"line\">    __tablename__ = &apos;right&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br></pre></td></tr></table></figure>\n<p>指定使用 relationship.back_populates 参数，并且为每一个 relationship() 方法指定共用的关联表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> association_table = Table(&apos;association&apos;, Base.metadata, Column(&apos;left_id&apos;, Integer, ForeignKey(&apos;left.id&apos;)), Column(&apos;right_id&apos;, Integer, ForeignKey(&apos;right.id&apos;)))</span><br><span class=\"line\"> class Parent(Base):</span><br><span class=\"line\">    __tablename__ = &apos;left&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    children = relationship(&quot;Child&quot;, secondary=association_table, back_populates=&quot;parents&quot;)</span><br><span class=\"line\">class Child(Base):</span><br><span class=\"line\">    __tablename__ = &apos;right&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    parents = relationship(&quot;Parent&quot;, secondary=association_table, back_populates=&quot;children&quot;)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>常见的SQLAlchemy列类型.配置选项和关系选项<br>类型名称 | python类型 | 描述<br>—|—|—<br>Integer | int | 常规整形，通常为32位<br>SmallInteger | int | 短整形，通常为16位<br>BigInteger | int/long | 精度不受限整形<br>Float | float | 浮点数<br>Numeric | decimal.Decimal | 定点数<br>String | str | 可变长度字符串<br>Text | str | 可变长度字符串，适合大量文本<br>Unicode | unicode | 浮点数<br>Boolean | bool | 布尔型<br>Date | datetime.date | 日期类型<br>Time | datetime.time | 时间类型<br>Interval |   datetime.timedelta | 时间间隔<br>Enum  |  str|字符列表<br>PickleType | 任意Python对象 | 自动Pickle序列化<br>LargeBinary | str | 二进制</p>\n<p>常见的SQLAlchemy列选项<br>可选参数 | 描述<br>—|—<br>primary_key | 如果设置为True，则为该列表的主键<br>unique | 如果设置为True，该列不允许相同值<br>index  | 如果设置为True，为该列创建索引，查询效率会更高<br>nullable  |  如果设置为True，该列允许为空。如果设置为False，该列不允许空值<br>default | 定义该列的默认值</p>\n<h3 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h3><p>当使用migrate upgrade更新数据库时，如果删除以前创建的外键关联字段，会报错：</p>\n<blockquote>\n<p>1553, “Cannot drop index ‘xxx’: needed in a foreign key constraint</p>\n</blockquote>\n<p>解决办法：</p>\n<p>进入数据库，手动删除外键所创建的索引：</p>\n<blockquote>\n<p>show create table TABLE_NAME;</p>\n</blockquote>\n<p>找到对应的索引，并删除：</p>\n<blockquote>\n<p>ALTER TABLE table_name DROP FOREIGN KEY exchange_ibfk_3;</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"使用SQLAlchemy\"><a href=\"#使用SQLAlchemy\" class=\"headerlink\" title=\"使用SQLAlchemy\"></a>使用SQLAlchemy</h1><p>ORM技术：Object-Relational Mapping，把关系数据库的表结构映射到对象上。</p>\n<p>在Python中，最有名的ORM框架是SQLAlchemy。</p>\n<h4 id=\"pip安装SQLAlchemy：\"><a href=\"#pip安装SQLAlchemy：\" class=\"headerlink\" title=\"pip安装SQLAlchemy：\"></a>pip安装SQLAlchemy：</h4><blockquote>\n<p>pip install sqlalchemy</p>\n</blockquote>\n<p>首先，导入SQLAlchemy，并初始化DBSession：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入:</span><br><span class=\"line\">from sqlalchemy import Column, String, create_engine</span><br><span class=\"line\">from sqlalchemy.orm import sessionmaker</span><br><span class=\"line\">from sqlalchemy.ext.declarative import declarative_base</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建对象的基类:</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\"># 定义User对象:</span><br><span class=\"line\">class User(Base):</span><br><span class=\"line\">    # 表的名字:</span><br><span class=\"line\">    __tablename__ = &apos;user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 表的结构:</span><br><span class=\"line\">    id = Column(String(20), primary_key=True)</span><br><span class=\"line\">    name = Column(String(20))</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化数据库连接:</span><br><span class=\"line\">engine = create_engine(&apos;mysql+mysqlconnector://root:password@localhost:3306/test&apos;)</span><br><span class=\"line\"># 创建DBSession类型:</span><br><span class=\"line\">DBSession = sessionmaker(bind=engine)</span><br></pre></td></tr></table></figure>\n<p>下面，我们看看如何向数据库表中添加一行记录。</p>\n<p>由于有了ORM，我们向数据库表中添加一行记录，可以视为添加一个User对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建session对象:</span><br><span class=\"line\">session = DBSession()</span><br><span class=\"line\"># 创建新User对象:</span><br><span class=\"line\">new_user = User(id=&apos;5&apos;, name=&apos;Bob&apos;)</span><br><span class=\"line\"># 添加到session:</span><br><span class=\"line\">session.add(new_user)</span><br><span class=\"line\"># 提交即保存到数据库:</span><br><span class=\"line\">session.commit()</span><br><span class=\"line\"># 关闭session:</span><br><span class=\"line\">session.close()</span><br></pre></td></tr></table></figure>\n<p>SQLAlchemy提供的查询接口如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建Session:</span><br><span class=\"line\">session = DBSession()</span><br><span class=\"line\"># 创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:</span><br><span class=\"line\">user = session.query(User).filter(User.id==&apos;5&apos;).one()</span><br><span class=\"line\"># 打印类型和对象的name属性:</span><br><span class=\"line\">print(&apos;type:&apos;, type(user))</span><br><span class=\"line\">print(&apos;name:&apos;, user.name)</span><br><span class=\"line\"># 关闭Session:</span><br><span class=\"line\">session.close()</span><br></pre></td></tr></table></figure>\n<p>ORM框架也可以提供两个对象之间的一对多、多对多等功能。</p>\n<p>例如，如果一个User拥有多个Book，就可以定义一对多关系如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(Base):</span><br><span class=\"line\">    __tablename__ = &apos;user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    id = Column(String(20), primary_key=True)</span><br><span class=\"line\">    name = Column(String(20))</span><br><span class=\"line\">    # 一对多:</span><br><span class=\"line\">    books = relationship(&apos;Book&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class Book(Base):</span><br><span class=\"line\">    __tablename__ = &apos;book&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    id = Column(String(20), primary_key=True)</span><br><span class=\"line\">    name = Column(String(20))</span><br><span class=\"line\">    # “多”的一方的book表是通过外键关联到user表的:</span><br><span class=\"line\">    user_id = Column(String(20), ForeignKey(&apos;user.id&apos;))</span><br></pre></td></tr></table></figure>\n<p>当我们查询一个User对象时，该对象的books属性将返回一个包含若干个Book对象的list。</p>\n<h4 id=\"关系定义\"><a href=\"#关系定义\" class=\"headerlink\" title=\"关系定义\"></a>关系定义</h4><ol>\n<li><p><strong>一对多</strong>:</p>\n<p>表示一对多的关系时，在子表类中通过 foreign key (外键)引用父表类。然后，在父表类中通过 relationship() 方法来引用子表的类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Parent(Base):</span><br><span class=\"line\">    __tablename__ = &apos;parent&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    children = relationship(&quot;Child&quot;)</span><br><span class=\"line\">    # 在父表类中通过 relationship() 方法来引用子表的类集合</span><br><span class=\"line\">    </span><br><span class=\"line\">class Child(Base):</span><br><span class=\"line\">    __tablename__ = &apos;child&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    parent_id = Column(Integer, ForeignKey(&apos;parent.id&apos;))</span><br><span class=\"line\">    # 在子表类中通过 foreign key (外键)引用父表的参考字段</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在一对多的关系中建立双向的关系，这样的话在对方看来这就是一个多对一的关系，在子表类中附加一个 relationship() 方法，并且在双方的 relationship() 方法中使用 relationship.back_populates 方法参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Parent(Base):</span><br><span class=\"line\">    __tablename__ = &apos;parent&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    children = relationship(&quot;Child&quot;, back_populates=&quot;parent&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">class Child(Base):</span><br><span class=\"line\">    __tablename__ = &apos;child&apos;    </span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    parent_id = Column(Integer, ForeignKey(&apos;parent.id&apos;))    </span><br><span class=\"line\">    parent = relationship(&quot;Parent&quot;, back_populates=&quot;children&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\"># 子表类中附加一个 relationship() 方法</span><br><span class=\"line\"># 并且在(父)子表类的 relationship() 方法中使用 relationship.back_populates 参数</span><br></pre></td></tr></table></figure>\n<p>或者，可以在单一的 relationship() 方法中使用 backref 参数来代替 back_populates 参数</p>\n<ol start=\"2\">\n<li><strong>一对一</strong></li>\n</ol>\n<p>一对一是两张表之间本质上的双向关系.要做到这一点，只需要在一对多关系基础上的父表中使用 uselist 参数来表示，uselist=False。</p>\n<ol start=\"3\">\n<li><strong>多对多</strong><br>多对多关系会在两个类之间增加一个关联的表。这个关联的表在 relationship() 方法中通过 secondary 参数来表示。通常的，这个表会通过 MetaData 对象来与声明基类关联，所以这个 ForeignKey 指令会使用链接来定位到远程的表</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 多对多关系中的两个表之间的一个关联表</span><br><span class=\"line\">association_table = Table(&apos;association&apos;, Base.metadata, Column(&apos;left_id&apos;, Integer, ForeignKey(&apos;left.id&apos;)), Column(&apos;right_id&apos;, Integer, ForeignKey(&apos;right.id&apos;)))</span><br><span class=\"line\">class Parent(Base):</span><br><span class=\"line\">    __tablename__ = &apos;left&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    children = relationship(&quot;Child&quot;,secondary=association_table)</span><br><span class=\"line\">    # 在父表中的 relationship() 方法传入 secondary 参数，其值为关联表的表名</span><br><span class=\"line\">    </span><br><span class=\"line\">class Child(Base):</span><br><span class=\"line\">    __tablename__ = &apos;right&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br></pre></td></tr></table></figure>\n<p>指定使用 relationship.back_populates 参数，并且为每一个 relationship() 方法指定共用的关联表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> association_table = Table(&apos;association&apos;, Base.metadata, Column(&apos;left_id&apos;, Integer, ForeignKey(&apos;left.id&apos;)), Column(&apos;right_id&apos;, Integer, ForeignKey(&apos;right.id&apos;)))</span><br><span class=\"line\"> class Parent(Base):</span><br><span class=\"line\">    __tablename__ = &apos;left&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    children = relationship(&quot;Child&quot;, secondary=association_table, back_populates=&quot;parents&quot;)</span><br><span class=\"line\">class Child(Base):</span><br><span class=\"line\">    __tablename__ = &apos;right&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    parents = relationship(&quot;Parent&quot;, secondary=association_table, back_populates=&quot;children&quot;)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>常见的SQLAlchemy列类型.配置选项和关系选项<br>类型名称 | python类型 | 描述<br>—|—|—<br>Integer | int | 常规整形，通常为32位<br>SmallInteger | int | 短整形，通常为16位<br>BigInteger | int/long | 精度不受限整形<br>Float | float | 浮点数<br>Numeric | decimal.Decimal | 定点数<br>String | str | 可变长度字符串<br>Text | str | 可变长度字符串，适合大量文本<br>Unicode | unicode | 浮点数<br>Boolean | bool | 布尔型<br>Date | datetime.date | 日期类型<br>Time | datetime.time | 时间类型<br>Interval |   datetime.timedelta | 时间间隔<br>Enum  |  str|字符列表<br>PickleType | 任意Python对象 | 自动Pickle序列化<br>LargeBinary | str | 二进制</p>\n<p>常见的SQLAlchemy列选项<br>可选参数 | 描述<br>—|—<br>primary_key | 如果设置为True，则为该列表的主键<br>unique | 如果设置为True，该列不允许相同值<br>index  | 如果设置为True，为该列创建索引，查询效率会更高<br>nullable  |  如果设置为True，该列允许为空。如果设置为False，该列不允许空值<br>default | 定义该列的默认值</p>\n<h3 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h3><p>当使用migrate upgrade更新数据库时，如果删除以前创建的外键关联字段，会报错：</p>\n<blockquote>\n<p>1553, “Cannot drop index ‘xxx’: needed in a foreign key constraint</p>\n</blockquote>\n<p>解决办法：</p>\n<p>进入数据库，手动删除外键所创建的索引：</p>\n<blockquote>\n<p>show create table TABLE_NAME;</p>\n</blockquote>\n<p>找到对应的索引，并删除：</p>\n<blockquote>\n<p>ALTER TABLE table_name DROP FOREIGN KEY exchange_ibfk_3;</p>\n</blockquote>\n"},{"title":"密码学学习","abbrlink":3133172261,"date":"2019-01-19T13:43:28.000Z","updated":"2019-02-15T14:22:22.000Z","_content":"# 密码学习笔记\n[toc]\n## 对称加密解密\n### python AES 双向对称加密解密\n\n高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。\n\n[AES加密算法原理](https://blog.csdn.net/qq_28205153/article/details/55798628)\n\n[AES密码详解](https://www.cnblogs.com/luop/p/4334160.html)\n\n安装依赖库：\n\n```\npip install Crypto\npip install binascii\n```\n\n示例：\n\n```\n#!/usr/bin/env python\n# -*- coding:utf-8 -*- \n \nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\n \nclass prpcrypt():\n    def __init__(self,key):\n        self.key = key\n        self.mode = AES.MODE_CBC\n     \n    #加密函数，如果text不足16位就用空格补足为16位，\n    #如果大于16当时不是16的倍数，那就补足为16的倍数。\n    def encrypt(self,text):\n        cryptor = AES.new(self.key,self.mode,b'0000000000000000')\n        #这里密钥key 长度必须为16（AES-128）,\n        #24（AES-192）,或者32 （AES-256）Bytes 长度\n        #目前AES-128 足够目前使用\n        length = 16\n        count = len(text)\n        if count < length:\n            add = (length-count)\n            #\\0 backspace\n            text = text + ('\\0' * add)\n        elif count > length:\n            add = (length-(count % length))\n            text = text + ('\\0' * add)\n        self.ciphertext = cryptor.encrypt(text)\n        #因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题\n        #所以这里统一把加密后的字符串转化为16进制字符串\n        return b2a_hex(self.ciphertext)\n     \n    #解密后，去掉补足的空格用strip() 去掉\n    def decrypt(self,text):\n        cryptor = AES.new(self.key,self.mode,b'0000000000000000')\n        plain_text  = cryptor.decrypt(a2b_hex(text))\n        return plain_text.rstrip('\\0')\n \nif __name__ == '__main__':\n    pc = prpcrypt('qwertyuiqwertyui') #初始化密钥\n    import sys\n    e = pc.encrypt(sys.argv[1]) #加密\n    d = pc.decrypt(e) #解密\n    print \"加密:\",e\n    print \"解密:\",d\n```\n\n```\n#!/usr/bin/env python\n#coding=utf8\n \nfrom Crypto.Cipher import AES\nfrom Crypto import Random\n \n# AES根据16位对齐\nBS = 16\n \n# 转成utf8编码\ndef unicode_to_utf8(s):\n    if isinstance(s, unicode):\n        s = s.encode(\"utf-8\")\n    return s\n \n# 补充字符,最少1个\ndef pad(s):\n    length = len(s)\n    add = BS - length % BS\n    byte = chr(BS - length % BS)\n    return s + (add * byte)\n \n# 去除补充字符\ndef unpad(s):\n    length = len(s)\n    byte = s[length-1:]\n    add = ord(byte)\n    return s[:-add]\n \n# class\nclass AESCipher:\n    #初始化\n    def __init__(self, key):\n        self.key = key\n \n    #加密\n    def encrypt(self, raw):\n        raw = unicode_to_utf8(raw)\n        raw = pad(raw)\n        cipher = AES.new(self.key, AES.MODE_CBC, self.key)\n        return cipher.encrypt(raw)\n \n    #解密\n    def decrypt(self, enc):\n        cipher = AES.new(self.key, AES.MODE_CBC, self.key)\n        return unpad(cipher.decrypt(enc))\n \n \nif __name__ == '__main__':\n    \n    #注意key是16字节长\n    key = \"f2c85e0140a47415\"\n    \n    #初始化\n    aes = AESCipher(key)\n \n    s1 = \"hello world\"\n \n    en1 = aes.encrypt(s1)\n    de1 = aes.decrypt(en1)\n \n    print 's1:', de1\n\n```\n\n","source":"_posts/密码学习.md","raw":"---\ntitle: 密码学学习\ntags:\n  - 密码\ncategories: 学习笔记\nabbrlink: 3133172261\ndate: 2019-01-19 21:43:28\nupdated: 2019-02-15 22:22:22\n---\n# 密码学习笔记\n[toc]\n## 对称加密解密\n### python AES 双向对称加密解密\n\n高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。\n\n[AES加密算法原理](https://blog.csdn.net/qq_28205153/article/details/55798628)\n\n[AES密码详解](https://www.cnblogs.com/luop/p/4334160.html)\n\n安装依赖库：\n\n```\npip install Crypto\npip install binascii\n```\n\n示例：\n\n```\n#!/usr/bin/env python\n# -*- coding:utf-8 -*- \n \nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\n \nclass prpcrypt():\n    def __init__(self,key):\n        self.key = key\n        self.mode = AES.MODE_CBC\n     \n    #加密函数，如果text不足16位就用空格补足为16位，\n    #如果大于16当时不是16的倍数，那就补足为16的倍数。\n    def encrypt(self,text):\n        cryptor = AES.new(self.key,self.mode,b'0000000000000000')\n        #这里密钥key 长度必须为16（AES-128）,\n        #24（AES-192）,或者32 （AES-256）Bytes 长度\n        #目前AES-128 足够目前使用\n        length = 16\n        count = len(text)\n        if count < length:\n            add = (length-count)\n            #\\0 backspace\n            text = text + ('\\0' * add)\n        elif count > length:\n            add = (length-(count % length))\n            text = text + ('\\0' * add)\n        self.ciphertext = cryptor.encrypt(text)\n        #因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题\n        #所以这里统一把加密后的字符串转化为16进制字符串\n        return b2a_hex(self.ciphertext)\n     \n    #解密后，去掉补足的空格用strip() 去掉\n    def decrypt(self,text):\n        cryptor = AES.new(self.key,self.mode,b'0000000000000000')\n        plain_text  = cryptor.decrypt(a2b_hex(text))\n        return plain_text.rstrip('\\0')\n \nif __name__ == '__main__':\n    pc = prpcrypt('qwertyuiqwertyui') #初始化密钥\n    import sys\n    e = pc.encrypt(sys.argv[1]) #加密\n    d = pc.decrypt(e) #解密\n    print \"加密:\",e\n    print \"解密:\",d\n```\n\n```\n#!/usr/bin/env python\n#coding=utf8\n \nfrom Crypto.Cipher import AES\nfrom Crypto import Random\n \n# AES根据16位对齐\nBS = 16\n \n# 转成utf8编码\ndef unicode_to_utf8(s):\n    if isinstance(s, unicode):\n        s = s.encode(\"utf-8\")\n    return s\n \n# 补充字符,最少1个\ndef pad(s):\n    length = len(s)\n    add = BS - length % BS\n    byte = chr(BS - length % BS)\n    return s + (add * byte)\n \n# 去除补充字符\ndef unpad(s):\n    length = len(s)\n    byte = s[length-1:]\n    add = ord(byte)\n    return s[:-add]\n \n# class\nclass AESCipher:\n    #初始化\n    def __init__(self, key):\n        self.key = key\n \n    #加密\n    def encrypt(self, raw):\n        raw = unicode_to_utf8(raw)\n        raw = pad(raw)\n        cipher = AES.new(self.key, AES.MODE_CBC, self.key)\n        return cipher.encrypt(raw)\n \n    #解密\n    def decrypt(self, enc):\n        cipher = AES.new(self.key, AES.MODE_CBC, self.key)\n        return unpad(cipher.decrypt(enc))\n \n \nif __name__ == '__main__':\n    \n    #注意key是16字节长\n    key = \"f2c85e0140a47415\"\n    \n    #初始化\n    aes = AESCipher(key)\n \n    s1 = \"hello world\"\n \n    en1 = aes.encrypt(s1)\n    de1 = aes.decrypt(en1)\n \n    print 's1:', de1\n\n```\n\n","slug":"密码学习","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppl7000l7rs6hfo7q71v","content":"<h1 id=\"密码学习笔记\"><a href=\"#密码学习笔记\" class=\"headerlink\" title=\"密码学习笔记\"></a>密码学习笔记</h1><p>[toc]</p>\n<h2 id=\"对称加密解密\"><a href=\"#对称加密解密\" class=\"headerlink\" title=\"对称加密解密\"></a>对称加密解密</h2><h3 id=\"python-AES-双向对称加密解密\"><a href=\"#python-AES-双向对称加密解密\" class=\"headerlink\" title=\"python AES 双向对称加密解密\"></a>python AES 双向对称加密解密</h3><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>\n<p><a href=\"https://blog.csdn.net/qq_28205153/article/details/55798628\" target=\"_blank\" rel=\"noopener\">AES加密算法原理</a></p>\n<p><a href=\"https://www.cnblogs.com/luop/p/4334160.html\" target=\"_blank\" rel=\"noopener\">AES密码详解</a></p>\n<p>安装依赖库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Crypto</span><br><span class=\"line\">pip install binascii</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding:utf-8 -*- </span><br><span class=\"line\"> </span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">from binascii import b2a_hex, a2b_hex</span><br><span class=\"line\"> </span><br><span class=\"line\">class prpcrypt():</span><br><span class=\"line\">    def __init__(self,key):</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\">        self.mode = AES.MODE_CBC</span><br><span class=\"line\">     </span><br><span class=\"line\">    #加密函数，如果text不足16位就用空格补足为16位，</span><br><span class=\"line\">    #如果大于16当时不是16的倍数，那就补足为16的倍数。</span><br><span class=\"line\">    def encrypt(self,text):</span><br><span class=\"line\">        cryptor = AES.new(self.key,self.mode,b&apos;0000000000000000&apos;)</span><br><span class=\"line\">        #这里密钥key 长度必须为16（AES-128）,</span><br><span class=\"line\">        #24（AES-192）,或者32 （AES-256）Bytes 长度</span><br><span class=\"line\">        #目前AES-128 足够目前使用</span><br><span class=\"line\">        length = 16</span><br><span class=\"line\">        count = len(text)</span><br><span class=\"line\">        if count &lt; length:</span><br><span class=\"line\">            add = (length-count)</span><br><span class=\"line\">            #\\0 backspace</span><br><span class=\"line\">            text = text + (&apos;\\0&apos; * add)</span><br><span class=\"line\">        elif count &gt; length:</span><br><span class=\"line\">            add = (length-(count % length))</span><br><span class=\"line\">            text = text + (&apos;\\0&apos; * add)</span><br><span class=\"line\">        self.ciphertext = cryptor.encrypt(text)</span><br><span class=\"line\">        #因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题</span><br><span class=\"line\">        #所以这里统一把加密后的字符串转化为16进制字符串</span><br><span class=\"line\">        return b2a_hex(self.ciphertext)</span><br><span class=\"line\">     </span><br><span class=\"line\">    #解密后，去掉补足的空格用strip() 去掉</span><br><span class=\"line\">    def decrypt(self,text):</span><br><span class=\"line\">        cryptor = AES.new(self.key,self.mode,b&apos;0000000000000000&apos;)</span><br><span class=\"line\">        plain_text  = cryptor.decrypt(a2b_hex(text))</span><br><span class=\"line\">        return plain_text.rstrip(&apos;\\0&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    pc = prpcrypt(&apos;qwertyuiqwertyui&apos;) #初始化密钥</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    e = pc.encrypt(sys.argv[1]) #加密</span><br><span class=\"line\">    d = pc.decrypt(e) #解密</span><br><span class=\"line\">    print &quot;加密:&quot;,e</span><br><span class=\"line\">    print &quot;解密:&quot;,d</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#coding=utf8</span><br><span class=\"line\"> </span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">from Crypto import Random</span><br><span class=\"line\"> </span><br><span class=\"line\"># AES根据16位对齐</span><br><span class=\"line\">BS = 16</span><br><span class=\"line\"> </span><br><span class=\"line\"># 转成utf8编码</span><br><span class=\"line\">def unicode_to_utf8(s):</span><br><span class=\"line\">    if isinstance(s, unicode):</span><br><span class=\"line\">        s = s.encode(&quot;utf-8&quot;)</span><br><span class=\"line\">    return s</span><br><span class=\"line\"> </span><br><span class=\"line\"># 补充字符,最少1个</span><br><span class=\"line\">def pad(s):</span><br><span class=\"line\">    length = len(s)</span><br><span class=\"line\">    add = BS - length % BS</span><br><span class=\"line\">    byte = chr(BS - length % BS)</span><br><span class=\"line\">    return s + (add * byte)</span><br><span class=\"line\"> </span><br><span class=\"line\"># 去除补充字符</span><br><span class=\"line\">def unpad(s):</span><br><span class=\"line\">    length = len(s)</span><br><span class=\"line\">    byte = s[length-1:]</span><br><span class=\"line\">    add = ord(byte)</span><br><span class=\"line\">    return s[:-add]</span><br><span class=\"line\"> </span><br><span class=\"line\"># class</span><br><span class=\"line\">class AESCipher:</span><br><span class=\"line\">    #初始化</span><br><span class=\"line\">    def __init__(self, key):</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"> </span><br><span class=\"line\">    #加密</span><br><span class=\"line\">    def encrypt(self, raw):</span><br><span class=\"line\">        raw = unicode_to_utf8(raw)</span><br><span class=\"line\">        raw = pad(raw)</span><br><span class=\"line\">        cipher = AES.new(self.key, AES.MODE_CBC, self.key)</span><br><span class=\"line\">        return cipher.encrypt(raw)</span><br><span class=\"line\"> </span><br><span class=\"line\">    #解密</span><br><span class=\"line\">    def decrypt(self, enc):</span><br><span class=\"line\">        cipher = AES.new(self.key, AES.MODE_CBC, self.key)</span><br><span class=\"line\">        return unpad(cipher.decrypt(enc))</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    </span><br><span class=\"line\">    #注意key是16字节长</span><br><span class=\"line\">    key = &quot;f2c85e0140a47415&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #初始化</span><br><span class=\"line\">    aes = AESCipher(key)</span><br><span class=\"line\"> </span><br><span class=\"line\">    s1 = &quot;hello world&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">    en1 = aes.encrypt(s1)</span><br><span class=\"line\">    de1 = aes.decrypt(en1)</span><br><span class=\"line\"> </span><br><span class=\"line\">    print &apos;s1:&apos;, de1</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"密码学习笔记\"><a href=\"#密码学习笔记\" class=\"headerlink\" title=\"密码学习笔记\"></a>密码学习笔记</h1><p>[toc]</p>\n<h2 id=\"对称加密解密\"><a href=\"#对称加密解密\" class=\"headerlink\" title=\"对称加密解密\"></a>对称加密解密</h2><h3 id=\"python-AES-双向对称加密解密\"><a href=\"#python-AES-双向对称加密解密\" class=\"headerlink\" title=\"python AES 双向对称加密解密\"></a>python AES 双向对称加密解密</h3><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>\n<p><a href=\"https://blog.csdn.net/qq_28205153/article/details/55798628\" target=\"_blank\" rel=\"noopener\">AES加密算法原理</a></p>\n<p><a href=\"https://www.cnblogs.com/luop/p/4334160.html\" target=\"_blank\" rel=\"noopener\">AES密码详解</a></p>\n<p>安装依赖库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Crypto</span><br><span class=\"line\">pip install binascii</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding:utf-8 -*- </span><br><span class=\"line\"> </span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">from binascii import b2a_hex, a2b_hex</span><br><span class=\"line\"> </span><br><span class=\"line\">class prpcrypt():</span><br><span class=\"line\">    def __init__(self,key):</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\">        self.mode = AES.MODE_CBC</span><br><span class=\"line\">     </span><br><span class=\"line\">    #加密函数，如果text不足16位就用空格补足为16位，</span><br><span class=\"line\">    #如果大于16当时不是16的倍数，那就补足为16的倍数。</span><br><span class=\"line\">    def encrypt(self,text):</span><br><span class=\"line\">        cryptor = AES.new(self.key,self.mode,b&apos;0000000000000000&apos;)</span><br><span class=\"line\">        #这里密钥key 长度必须为16（AES-128）,</span><br><span class=\"line\">        #24（AES-192）,或者32 （AES-256）Bytes 长度</span><br><span class=\"line\">        #目前AES-128 足够目前使用</span><br><span class=\"line\">        length = 16</span><br><span class=\"line\">        count = len(text)</span><br><span class=\"line\">        if count &lt; length:</span><br><span class=\"line\">            add = (length-count)</span><br><span class=\"line\">            #\\0 backspace</span><br><span class=\"line\">            text = text + (&apos;\\0&apos; * add)</span><br><span class=\"line\">        elif count &gt; length:</span><br><span class=\"line\">            add = (length-(count % length))</span><br><span class=\"line\">            text = text + (&apos;\\0&apos; * add)</span><br><span class=\"line\">        self.ciphertext = cryptor.encrypt(text)</span><br><span class=\"line\">        #因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题</span><br><span class=\"line\">        #所以这里统一把加密后的字符串转化为16进制字符串</span><br><span class=\"line\">        return b2a_hex(self.ciphertext)</span><br><span class=\"line\">     </span><br><span class=\"line\">    #解密后，去掉补足的空格用strip() 去掉</span><br><span class=\"line\">    def decrypt(self,text):</span><br><span class=\"line\">        cryptor = AES.new(self.key,self.mode,b&apos;0000000000000000&apos;)</span><br><span class=\"line\">        plain_text  = cryptor.decrypt(a2b_hex(text))</span><br><span class=\"line\">        return plain_text.rstrip(&apos;\\0&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    pc = prpcrypt(&apos;qwertyuiqwertyui&apos;) #初始化密钥</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    e = pc.encrypt(sys.argv[1]) #加密</span><br><span class=\"line\">    d = pc.decrypt(e) #解密</span><br><span class=\"line\">    print &quot;加密:&quot;,e</span><br><span class=\"line\">    print &quot;解密:&quot;,d</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#coding=utf8</span><br><span class=\"line\"> </span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\">from Crypto import Random</span><br><span class=\"line\"> </span><br><span class=\"line\"># AES根据16位对齐</span><br><span class=\"line\">BS = 16</span><br><span class=\"line\"> </span><br><span class=\"line\"># 转成utf8编码</span><br><span class=\"line\">def unicode_to_utf8(s):</span><br><span class=\"line\">    if isinstance(s, unicode):</span><br><span class=\"line\">        s = s.encode(&quot;utf-8&quot;)</span><br><span class=\"line\">    return s</span><br><span class=\"line\"> </span><br><span class=\"line\"># 补充字符,最少1个</span><br><span class=\"line\">def pad(s):</span><br><span class=\"line\">    length = len(s)</span><br><span class=\"line\">    add = BS - length % BS</span><br><span class=\"line\">    byte = chr(BS - length % BS)</span><br><span class=\"line\">    return s + (add * byte)</span><br><span class=\"line\"> </span><br><span class=\"line\"># 去除补充字符</span><br><span class=\"line\">def unpad(s):</span><br><span class=\"line\">    length = len(s)</span><br><span class=\"line\">    byte = s[length-1:]</span><br><span class=\"line\">    add = ord(byte)</span><br><span class=\"line\">    return s[:-add]</span><br><span class=\"line\"> </span><br><span class=\"line\"># class</span><br><span class=\"line\">class AESCipher:</span><br><span class=\"line\">    #初始化</span><br><span class=\"line\">    def __init__(self, key):</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"> </span><br><span class=\"line\">    #加密</span><br><span class=\"line\">    def encrypt(self, raw):</span><br><span class=\"line\">        raw = unicode_to_utf8(raw)</span><br><span class=\"line\">        raw = pad(raw)</span><br><span class=\"line\">        cipher = AES.new(self.key, AES.MODE_CBC, self.key)</span><br><span class=\"line\">        return cipher.encrypt(raw)</span><br><span class=\"line\"> </span><br><span class=\"line\">    #解密</span><br><span class=\"line\">    def decrypt(self, enc):</span><br><span class=\"line\">        cipher = AES.new(self.key, AES.MODE_CBC, self.key)</span><br><span class=\"line\">        return unpad(cipher.decrypt(enc))</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    </span><br><span class=\"line\">    #注意key是16字节长</span><br><span class=\"line\">    key = &quot;f2c85e0140a47415&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #初始化</span><br><span class=\"line\">    aes = AESCipher(key)</span><br><span class=\"line\"> </span><br><span class=\"line\">    s1 = &quot;hello world&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">    en1 = aes.encrypt(s1)</span><br><span class=\"line\">    de1 = aes.decrypt(en1)</span><br><span class=\"line\"> </span><br><span class=\"line\">    print &apos;s1:&apos;, de1</span><br></pre></td></tr></table></figure>\n"},{"title":"数据库简析","abbrlink":3786913082,"date":"2019-01-19T13:43:28.000Z","updated":"2019-01-25T14:22:22.000Z","_content":"## 数据库事务的四大特性\n#### 1. 原子性（Atomicity）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。\n#### 2. 一致性（Consistency）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n#### 3. 隔离性（Isolation）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。\n#### ４. 持久性（Durability）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n&emsp;&emsp;例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。\n\n---\n\n&emsp;&emsp;以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：\n\n","source":"_posts/数据库.md","raw":"---\ntitle: 数据库简析\ntags:\n  - mysql\ncategories: 数据库\nabbrlink: 3786913082\ndate: 2019-01-19 21:43:28\nupdated: 2019-01-25 22:22:22\n---\n## 数据库事务的四大特性\n#### 1. 原子性（Atomicity）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。\n#### 2. 一致性（Consistency）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n#### 3. 隔离性（Isolation）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。\n#### ４. 持久性（Durability）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n&emsp;&emsp;例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。\n\n---\n\n&emsp;&emsp;以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：\n\n","slug":"数据库","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppla000q7rs637esvqzk","content":"<h2 id=\"数据库事务的四大特性\"><a href=\"#数据库事务的四大特性\" class=\"headerlink\" title=\"数据库事务的四大特性\"></a>数据库事务的四大特性</h2><h4 id=\"1-原子性（Atomicity）\"><a href=\"#1-原子性（Atomicity）\" class=\"headerlink\" title=\"1. 原子性（Atomicity）\"></a>1. 原子性（Atomicity）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>\n<h4 id=\"2-一致性（Consistency）\"><a href=\"#2-一致性（Consistency）\" class=\"headerlink\" title=\"2. 一致性（Consistency）\"></a>2. 一致性（Consistency）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>\n<h4 id=\"3-隔离性（Isolation）\"><a href=\"#3-隔离性（Isolation）\" class=\"headerlink\" title=\"3. 隔离性（Isolation）\"></a>3. 隔离性（Isolation）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p>\n<h4 id=\"４-持久性（Durability）\"><a href=\"#４-持久性（Durability）\" class=\"headerlink\" title=\"４. 持久性（Durability）\"></a>４. 持久性（Durability）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>\n<p>&emsp;&emsp;例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>\n<hr>\n<p>&emsp;&emsp;以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据库事务的四大特性\"><a href=\"#数据库事务的四大特性\" class=\"headerlink\" title=\"数据库事务的四大特性\"></a>数据库事务的四大特性</h2><h4 id=\"1-原子性（Atomicity）\"><a href=\"#1-原子性（Atomicity）\" class=\"headerlink\" title=\"1. 原子性（Atomicity）\"></a>1. 原子性（Atomicity）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>\n<h4 id=\"2-一致性（Consistency）\"><a href=\"#2-一致性（Consistency）\" class=\"headerlink\" title=\"2. 一致性（Consistency）\"></a>2. 一致性（Consistency）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>\n<h4 id=\"3-隔离性（Isolation）\"><a href=\"#3-隔离性（Isolation）\" class=\"headerlink\" title=\"3. 隔离性（Isolation）\"></a>3. 隔离性（Isolation）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p>\n<h4 id=\"４-持久性（Durability）\"><a href=\"#４-持久性（Durability）\" class=\"headerlink\" title=\"４. 持久性（Durability）\"></a>４. 持久性（Durability）</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>\n<p>&emsp;&emsp;例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>\n<hr>\n<p>&emsp;&emsp;以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>\n"},{"title":"python 代码规范PEP8","abbrlink":1884161696,"date":"2019-03-01T10:45:34.000Z","updated":"2019-03-01T10:45:34.000Z","_content":"### 缩进\n\n使用四个空格表示每个缩进级别。\n\n```python\n# 对齐\nfoo = long_function_name(var_one, var_two,\n                         var_three, var_four)\n                         \n# 比之后的内容多一层缩进\n# 使用更多的缩进以和其他的代码单元区别开来\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\n\n# 悬垂的缩进，多加一层\nfoo = long_function_name(\n    var_one, var_two,\n    var_three, var_four)\n# 或者：\nfoo = long_func_name(\n    var_one, var_two,\n    var_three, var_four\n)\n# 另外其实有一种可选情况，也就是悬垂缩进可以缩进不为4个空格，比如用两个\n```\n不规范示例\n\n```python\n# 当不适用垂直对齐时，禁止在第一行使用参数\n# 换句话说，在垂直对齐时，才可在第一行使用参数\nfoo = lone_func_name(var_one, var_two, \n    var_three, var_four)\n\n# 当缩进不足以区分代码结构时，增加一个缩进级别\ndef long_func_name(\n    var_one, var_two, var_three\n    var_four):\n    print(var_one)\n```\n### 最大长度\n所有行的最大长度均为79个字符\n\n对于文档字符串或者注释，最长72字符\n\n```python\n# 当超出最大长度时，使用反斜杠来换行\nwith open('') as file_1, \\\n     open('') as file_2:\n    file_2.write(file_1.read())\n```\n使用正确的换行位置。推荐的位置在二元操作符（binary operator，如下述代码中的and、or以及%）之后，二元运算符( + -)之前\n\n```python\n# 同一括号换行，不需要反斜杠，因为是隐式换行\n# 在 and or % 之后回车换行\nclass Rectangle(Shape):\n    def __init__(self, width, height,\n                 color='black', emphasis=None, highlight=0):\n        if (width == 0 and height == 0 and\n                color == 'red' and emphasis == 'strong' or\n                height > 100):\n            raise ValueError(\"sorry, you lose\")\n        if width == 0 and height == 0 and (color == 'red' or emphasis is None):\n            raise ValueError(\"I don't think so -- values are %s, %s\" %\n                             (width, height))\n        Shape.__init__(self, width, height, color,\n                       emphasis, highlight)\n\n```\n\n```python\n# 在 + - 之前换行，增加可读性\nincome = (gross_wages\n          + taxable_interest\n          + (dividends - qualified_dividends)\n          - ira_deduction\n          - student_loan_interest)\n```\n### 空行\n- 顶级函数（当前文件中的第一个函数）或者顶级类（当前文件的第一个类）之前要有两个空行\n- 定义在类内部的函数（成员函数）之间要留有一个空行\n- 可以使用额外的空行（但要注意节制）以区分不同的函数组，\n- 在一堆只有一行的函数之间不要使用空行（比如一些函数的空实现）\n- 在函数内部使用空行，来标识不同的逻辑单元\n\n### 导入\nimport应该总是在文件的最上面，在模块注释和文档字符串之后，在模块变量和常量之前\n\n注意import的顺序，各个import的组需要用空行隔开，顺序为（各个import独立成行）\n - 标准库import\n - 相关的第三方import\n - 本地应用和库的import\n - \n 一般情况使用绝对的import，但是在包层次比较复杂的时候使用相对import可以更加简洁，则使用相对import\n\n在import一个class的时候，如果不会引起命名冲突，则可以使用from进行import，否则则直接import并且使用全名\n\n应该避免使用利用通配符进行import，也就是避免使用from xxx import *\n\n模块级的特殊名字，此处特指那些前后都有双下划线的名字， 比如author等，应该被放置在模块文档字符串之后，除from future import的任何import之前，比如\n\n```python\n\"\"\"This is the example module.\n\nThis module does stuff.\n\"\"\"\n\nfrom __future__ import barry_as_FLUFL\n\n__all__ = ['a', 'b', 'c']\n__version__ = '0.1'\n__author__ = 'Cardinal Biggles'\n\nimport os\nimport sys\n\nimport numpy\nimport pandas\nimport matplotlib\n\nimport tool\n```\n### 空格\n\n以下几种情况不要额外加空格：\n\n- 在各种括号之中，比如spam(ham[1], {eegs: 2})而不是spam( ham[ 1 ], { eggs: 2 } )\n- 在逗号分号和冒号之前\n- 但是如果冒号作为分隔符，则前后都加空格\n- 后面立即跟了一个括号，比如函数调用的函数和括号之间不应该加空格\n- 后面跟的是索引或者切片的中括号，比如a[1]而不是a [1]\n- 对于赋值或者其他操作符，不要为了多个语句对齐而加很多空格，前后一个即可\n\n其他的建议:\n- 一行的尾部不要有空格\n- 二元运算符前后始终都最好有一个空格\n- 在一个表达式中有不同优先级的运算符，可以添加空格以区别优先级\n- 在调用函数时作为参数的那个等号则前后不要有空格（虽然看起来像个二元运算符）,比如func(a=3, b=4)而不是func(a = 3, b = 4)\n- 带箭头的函数，箭头两端也应该和二元运算符一样，前后有空格def func() -> AnyStr: ...\n- 用于指示关键字参数或默认参数值时，不要在 = 符号周围使用空格\n\n```python\ndef complex(real, imag=0.0):\n    return magic(r=real, i=imag)\n```\n- 将参数注释与默认值组合时，请在=符号周围使用空格（但仅限于那些同时具有注释和默认值的参数\n\n```python\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n```\n### 文档\n- 为所有公共模块或者函数、类以及方法编写文档。不必为非公共方法编写doc文档，但应有一个注释描述算法的功能，这条注释应当出现在def之后\n- 结尾的\"\"\"应当独占一行\n\n```\n\"\"\"Return a foobang\n\nOptional plotz says to frobnicate the bizbaz first.\n\"\"\"\n```\n### 注释\n- 注释和内容冲突的，比不要注释还好，改代码一定要改注释，保证注释最新\n- 注释应该是完整的句子，如果一个注释是一个短语或者句子，首字母大写，除非是小写字母开头的标识符作为开头\n- 短注释结尾的句号可以省略，包含一个或多个段落的块注释每一个句子都应该有句号\n- 在句子结束的句号之后应该有两个句号\n- 用英语写的时候，遵守Strunk and White写作风格\n- 除非你十分确定你的代码不会被任何不用你这个语言的人使用，否则都用英语写注释\n\n### 编程推荐\n- 代码应该不使得其他python实现有劣势，也就是不要依靠特定的python实现来提高效率\n- 和单例(Singleton)，比如None比较，应该一直使用is和is not而不是等于符号和不等于\n- 使用is not运算符而不是使用not … is\n- 如果实现比较运算密集的有序操作时，最好实现所有的六种操作(eq, ne, lt, le, gt, ge)\n- 定义有名字的函数始终使用def而不是通过lambda表达式来赋值\n- 从Exception继承而不是从BaseException\n- 恰当的使用exception链\n- 在py2里边raise一个异常的时候，使用raise ValueError('message')而不是raise ValuError, 'message'， py3中后面的方法会出错\n- 捕捉异常的时候，使用具体的异常，而不是用一个单纯的except:xxx，否则连SystemExit和KeyboardInterrupt也会被捕捉到\n- 给异常绑定名字的时候使用py2.6添加的as的方法，except Exception as exc:...\n- 捕捉系统错误的时候，使用py3.3添加的异常阶层而不是使用errno值\n- try语句包含的东西越少越好\n- 如果一个资源是一段代码本地使用的，使用with语句保证被正确释放\n- 上下文管理器始终应该使用函数或者方法来调用\n- 保证返回语句一致，要么所有情况都有返回，要么都没有\n- 使用字符串方法，而不是使用字符串模块\n- 使用''.startswith()和''.endswith()而不是字符串切片来检查前缀后缀\n- 对象类型的比较应该使用isinstance()而不是直接比较\n- 对于序列(字符串，列表，元组)，可以利用空序列为false\n- 字符串字面量不要依赖有意义的尾部空白\n- 布尔值不要用==和is来比较，直接用if is_true:...而不是if is_true == True:更不要用if is_true is True:...\n\n### 参考连接：\n[官方PEP8文档](https://www.python.org/dev/peps/pep-0008/#fn-hi)\n\n[pep8 要求归纳](https://blog.csdn.net/qq_29343201/article/details/54660570)\n\n","source":"_posts/python代码规范PEP8.md","raw":"---\ntitle: python 代码规范PEP8\ntags:\n  - python\ncategories: 学习笔记\nabbrlink: 1884161696\ndate: 2019-03-01 18:45:34\nupdated: 2019-03-01 18:45:34\n---\n### 缩进\n\n使用四个空格表示每个缩进级别。\n\n```python\n# 对齐\nfoo = long_function_name(var_one, var_two,\n                         var_three, var_four)\n                         \n# 比之后的内容多一层缩进\n# 使用更多的缩进以和其他的代码单元区别开来\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\n\n# 悬垂的缩进，多加一层\nfoo = long_function_name(\n    var_one, var_two,\n    var_three, var_four)\n# 或者：\nfoo = long_func_name(\n    var_one, var_two,\n    var_three, var_four\n)\n# 另外其实有一种可选情况，也就是悬垂缩进可以缩进不为4个空格，比如用两个\n```\n不规范示例\n\n```python\n# 当不适用垂直对齐时，禁止在第一行使用参数\n# 换句话说，在垂直对齐时，才可在第一行使用参数\nfoo = lone_func_name(var_one, var_two, \n    var_three, var_four)\n\n# 当缩进不足以区分代码结构时，增加一个缩进级别\ndef long_func_name(\n    var_one, var_two, var_three\n    var_four):\n    print(var_one)\n```\n### 最大长度\n所有行的最大长度均为79个字符\n\n对于文档字符串或者注释，最长72字符\n\n```python\n# 当超出最大长度时，使用反斜杠来换行\nwith open('') as file_1, \\\n     open('') as file_2:\n    file_2.write(file_1.read())\n```\n使用正确的换行位置。推荐的位置在二元操作符（binary operator，如下述代码中的and、or以及%）之后，二元运算符( + -)之前\n\n```python\n# 同一括号换行，不需要反斜杠，因为是隐式换行\n# 在 and or % 之后回车换行\nclass Rectangle(Shape):\n    def __init__(self, width, height,\n                 color='black', emphasis=None, highlight=0):\n        if (width == 0 and height == 0 and\n                color == 'red' and emphasis == 'strong' or\n                height > 100):\n            raise ValueError(\"sorry, you lose\")\n        if width == 0 and height == 0 and (color == 'red' or emphasis is None):\n            raise ValueError(\"I don't think so -- values are %s, %s\" %\n                             (width, height))\n        Shape.__init__(self, width, height, color,\n                       emphasis, highlight)\n\n```\n\n```python\n# 在 + - 之前换行，增加可读性\nincome = (gross_wages\n          + taxable_interest\n          + (dividends - qualified_dividends)\n          - ira_deduction\n          - student_loan_interest)\n```\n### 空行\n- 顶级函数（当前文件中的第一个函数）或者顶级类（当前文件的第一个类）之前要有两个空行\n- 定义在类内部的函数（成员函数）之间要留有一个空行\n- 可以使用额外的空行（但要注意节制）以区分不同的函数组，\n- 在一堆只有一行的函数之间不要使用空行（比如一些函数的空实现）\n- 在函数内部使用空行，来标识不同的逻辑单元\n\n### 导入\nimport应该总是在文件的最上面，在模块注释和文档字符串之后，在模块变量和常量之前\n\n注意import的顺序，各个import的组需要用空行隔开，顺序为（各个import独立成行）\n - 标准库import\n - 相关的第三方import\n - 本地应用和库的import\n - \n 一般情况使用绝对的import，但是在包层次比较复杂的时候使用相对import可以更加简洁，则使用相对import\n\n在import一个class的时候，如果不会引起命名冲突，则可以使用from进行import，否则则直接import并且使用全名\n\n应该避免使用利用通配符进行import，也就是避免使用from xxx import *\n\n模块级的特殊名字，此处特指那些前后都有双下划线的名字， 比如author等，应该被放置在模块文档字符串之后，除from future import的任何import之前，比如\n\n```python\n\"\"\"This is the example module.\n\nThis module does stuff.\n\"\"\"\n\nfrom __future__ import barry_as_FLUFL\n\n__all__ = ['a', 'b', 'c']\n__version__ = '0.1'\n__author__ = 'Cardinal Biggles'\n\nimport os\nimport sys\n\nimport numpy\nimport pandas\nimport matplotlib\n\nimport tool\n```\n### 空格\n\n以下几种情况不要额外加空格：\n\n- 在各种括号之中，比如spam(ham[1], {eegs: 2})而不是spam( ham[ 1 ], { eggs: 2 } )\n- 在逗号分号和冒号之前\n- 但是如果冒号作为分隔符，则前后都加空格\n- 后面立即跟了一个括号，比如函数调用的函数和括号之间不应该加空格\n- 后面跟的是索引或者切片的中括号，比如a[1]而不是a [1]\n- 对于赋值或者其他操作符，不要为了多个语句对齐而加很多空格，前后一个即可\n\n其他的建议:\n- 一行的尾部不要有空格\n- 二元运算符前后始终都最好有一个空格\n- 在一个表达式中有不同优先级的运算符，可以添加空格以区别优先级\n- 在调用函数时作为参数的那个等号则前后不要有空格（虽然看起来像个二元运算符）,比如func(a=3, b=4)而不是func(a = 3, b = 4)\n- 带箭头的函数，箭头两端也应该和二元运算符一样，前后有空格def func() -> AnyStr: ...\n- 用于指示关键字参数或默认参数值时，不要在 = 符号周围使用空格\n\n```python\ndef complex(real, imag=0.0):\n    return magic(r=real, i=imag)\n```\n- 将参数注释与默认值组合时，请在=符号周围使用空格（但仅限于那些同时具有注释和默认值的参数\n\n```python\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n```\n### 文档\n- 为所有公共模块或者函数、类以及方法编写文档。不必为非公共方法编写doc文档，但应有一个注释描述算法的功能，这条注释应当出现在def之后\n- 结尾的\"\"\"应当独占一行\n\n```\n\"\"\"Return a foobang\n\nOptional plotz says to frobnicate the bizbaz first.\n\"\"\"\n```\n### 注释\n- 注释和内容冲突的，比不要注释还好，改代码一定要改注释，保证注释最新\n- 注释应该是完整的句子，如果一个注释是一个短语或者句子，首字母大写，除非是小写字母开头的标识符作为开头\n- 短注释结尾的句号可以省略，包含一个或多个段落的块注释每一个句子都应该有句号\n- 在句子结束的句号之后应该有两个句号\n- 用英语写的时候，遵守Strunk and White写作风格\n- 除非你十分确定你的代码不会被任何不用你这个语言的人使用，否则都用英语写注释\n\n### 编程推荐\n- 代码应该不使得其他python实现有劣势，也就是不要依靠特定的python实现来提高效率\n- 和单例(Singleton)，比如None比较，应该一直使用is和is not而不是等于符号和不等于\n- 使用is not运算符而不是使用not … is\n- 如果实现比较运算密集的有序操作时，最好实现所有的六种操作(eq, ne, lt, le, gt, ge)\n- 定义有名字的函数始终使用def而不是通过lambda表达式来赋值\n- 从Exception继承而不是从BaseException\n- 恰当的使用exception链\n- 在py2里边raise一个异常的时候，使用raise ValueError('message')而不是raise ValuError, 'message'， py3中后面的方法会出错\n- 捕捉异常的时候，使用具体的异常，而不是用一个单纯的except:xxx，否则连SystemExit和KeyboardInterrupt也会被捕捉到\n- 给异常绑定名字的时候使用py2.6添加的as的方法，except Exception as exc:...\n- 捕捉系统错误的时候，使用py3.3添加的异常阶层而不是使用errno值\n- try语句包含的东西越少越好\n- 如果一个资源是一段代码本地使用的，使用with语句保证被正确释放\n- 上下文管理器始终应该使用函数或者方法来调用\n- 保证返回语句一致，要么所有情况都有返回，要么都没有\n- 使用字符串方法，而不是使用字符串模块\n- 使用''.startswith()和''.endswith()而不是字符串切片来检查前缀后缀\n- 对象类型的比较应该使用isinstance()而不是直接比较\n- 对于序列(字符串，列表，元组)，可以利用空序列为false\n- 字符串字面量不要依赖有意义的尾部空白\n- 布尔值不要用==和is来比较，直接用if is_true:...而不是if is_true == True:更不要用if is_true is True:...\n\n### 参考连接：\n[官方PEP8文档](https://www.python.org/dev/peps/pep-0008/#fn-hi)\n\n[pep8 要求归纳](https://blog.csdn.net/qq_29343201/article/details/54660570)\n\n","slug":"python代码规范PEP8","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppvw001e7rs6xyjlyrh6","content":"<h3 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h3><p>使用四个空格表示每个缩进级别。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对齐</span></span><br><span class=\"line\">foo = long_function_name(var_one, var_two,</span><br><span class=\"line\">                         var_three, var_four)</span><br><span class=\"line\">                         </span><br><span class=\"line\"><span class=\"comment\"># 比之后的内容多一层缩进</span></span><br><span class=\"line\"><span class=\"comment\"># 使用更多的缩进以和其他的代码单元区别开来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_function_name</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        var_one, var_two, var_three,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        var_four)</span>:</span></span><br><span class=\"line\">    print(var_one)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 悬垂的缩进，多加一层</span></span><br><span class=\"line\">foo = long_function_name(</span><br><span class=\"line\">    var_one, var_two,</span><br><span class=\"line\">    var_three, var_four)</span><br><span class=\"line\"><span class=\"comment\"># 或者：</span></span><br><span class=\"line\">foo = long_func_name(</span><br><span class=\"line\">    var_one, var_two,</span><br><span class=\"line\">    var_three, var_four</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># 另外其实有一种可选情况，也就是悬垂缩进可以缩进不为4个空格，比如用两个</span></span><br></pre></td></tr></table></figure>\n<p>不规范示例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当不适用垂直对齐时，禁止在第一行使用参数</span></span><br><span class=\"line\"><span class=\"comment\"># 换句话说，在垂直对齐时，才可在第一行使用参数</span></span><br><span class=\"line\">foo = lone_func_name(var_one, var_two, </span><br><span class=\"line\">    var_three, var_four)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当缩进不足以区分代码结构时，增加一个缩进级别</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_func_name</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    var_one, var_two, var_three</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    var_four)</span>:</span></span><br><span class=\"line\">    print(var_one)</span><br></pre></td></tr></table></figure>\n<h3 id=\"最大长度\"><a href=\"#最大长度\" class=\"headerlink\" title=\"最大长度\"></a>最大长度</h3><p>所有行的最大长度均为79个字符</p>\n<p>对于文档字符串或者注释，最长72字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当超出最大长度时，使用反斜杠来换行</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">''</span>) <span class=\"keyword\">as</span> file_1, \\</span><br><span class=\"line\">     open(<span class=\"string\">''</span>) <span class=\"keyword\">as</span> file_2:</span><br><span class=\"line\">    file_2.write(file_1.read())</span><br></pre></td></tr></table></figure>\n<p>使用正确的换行位置。推荐的位置在二元操作符（binary operator，如下述代码中的and、or以及%）之后，二元运算符( + -)之前</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 同一括号换行，不需要反斜杠，因为是隐式换行</span></span><br><span class=\"line\"><span class=\"comment\"># 在 and or % 之后回车换行</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span><span class=\"params\">(Shape)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, width, height,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 color=<span class=\"string\">'black'</span>, emphasis=None, highlight=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width == <span class=\"number\">0</span> <span class=\"keyword\">and</span> height == <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">                color == <span class=\"string\">'red'</span> <span class=\"keyword\">and</span> emphasis == <span class=\"string\">'strong'</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">                height &gt; <span class=\"number\">100</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"sorry, you lose\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> width == <span class=\"number\">0</span> <span class=\"keyword\">and</span> height == <span class=\"number\">0</span> <span class=\"keyword\">and</span> (color == <span class=\"string\">'red'</span> <span class=\"keyword\">or</span> emphasis <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"I don't think so -- values are %s, %s\"</span> %</span><br><span class=\"line\">                             (width, height))</span><br><span class=\"line\">        Shape.__init__(self, width, height, color,</span><br><span class=\"line\">                       emphasis, highlight)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 + - 之前换行，增加可读性</span></span><br><span class=\"line\">income = (gross_wages</span><br><span class=\"line\">          + taxable_interest</span><br><span class=\"line\">          + (dividends - qualified_dividends)</span><br><span class=\"line\">          - ira_deduction</span><br><span class=\"line\">          - student_loan_interest)</span><br></pre></td></tr></table></figure>\n<h3 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h3><ul>\n<li>顶级函数（当前文件中的第一个函数）或者顶级类（当前文件的第一个类）之前要有两个空行</li>\n<li>定义在类内部的函数（成员函数）之间要留有一个空行</li>\n<li>可以使用额外的空行（但要注意节制）以区分不同的函数组，</li>\n<li>在一堆只有一行的函数之间不要使用空行（比如一些函数的空实现）</li>\n<li>在函数内部使用空行，来标识不同的逻辑单元</li>\n</ul>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>import应该总是在文件的最上面，在模块注释和文档字符串之后，在模块变量和常量之前</p>\n<p>注意import的顺序，各个import的组需要用空行隔开，顺序为（各个import独立成行）</p>\n<ul>\n<li>标准库import</li>\n<li>相关的第三方import</li>\n<li>本地应用和库的import</li>\n<li>一般情况使用绝对的import，但是在包层次比较复杂的时候使用相对import可以更加简洁，则使用相对import</li>\n</ul>\n<p>在import一个class的时候，如果不会引起命名冲突，则可以使用from进行import，否则则直接import并且使用全名</p>\n<p>应该避免使用利用通配符进行import，也就是避免使用from xxx import *</p>\n<p>模块级的特殊名字，此处特指那些前后都有双下划线的名字， 比如author等，应该被放置在模块文档字符串之后，除from future import的任何import之前，比如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"This is the example module.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This module does stuff.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> barry_as_FLUFL</span><br><span class=\"line\"></span><br><span class=\"line\">__all__ = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">__version__ = <span class=\"string\">'0.1'</span></span><br><span class=\"line\">__author__ = <span class=\"string\">'Cardinal Biggles'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tool</span><br></pre></td></tr></table></figure>\n<h3 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h3><p>以下几种情况不要额外加空格：</p>\n<ul>\n<li>在各种括号之中，比如spam(ham[1], {eegs: 2})而不是spam( ham[ 1 ], { eggs: 2 } )</li>\n<li>在逗号分号和冒号之前</li>\n<li>但是如果冒号作为分隔符，则前后都加空格</li>\n<li>后面立即跟了一个括号，比如函数调用的函数和括号之间不应该加空格</li>\n<li>后面跟的是索引或者切片的中括号，比如a[1]而不是a [1]</li>\n<li>对于赋值或者其他操作符，不要为了多个语句对齐而加很多空格，前后一个即可</li>\n</ul>\n<p>其他的建议:</p>\n<ul>\n<li>一行的尾部不要有空格</li>\n<li>二元运算符前后始终都最好有一个空格</li>\n<li>在一个表达式中有不同优先级的运算符，可以添加空格以区别优先级</li>\n<li>在调用函数时作为参数的那个等号则前后不要有空格（虽然看起来像个二元运算符）,比如func(a=3, b=4)而不是func(a = 3, b = 4)</li>\n<li>带箭头的函数，箭头两端也应该和二元运算符一样，前后有空格def func() -&gt; AnyStr: …</li>\n<li>用于指示关键字参数或默认参数值时，不要在 = 符号周围使用空格</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">complex</span><span class=\"params\">(real, imag=<span class=\"number\">0.0</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> magic(r=real, i=imag)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将参数注释与默认值组合时，请在=符号周围使用空格（但仅限于那些同时具有注释和默认值的参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">munge</span><span class=\"params\">(sep: AnyStr = None)</span>:</span> ...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">munge</span><span class=\"params\">(input: AnyStr, sep: AnyStr = None, limit=<span class=\"number\">1000</span>)</span>:</span> ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li>为所有公共模块或者函数、类以及方法编写文档。不必为非公共方法编写doc文档，但应有一个注释描述算法的功能，这条注释应当出现在def之后</li>\n<li>结尾的”””应当独占一行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;Return a foobang</span><br><span class=\"line\"></span><br><span class=\"line\">Optional plotz says to frobnicate the bizbaz first.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li>注释和内容冲突的，比不要注释还好，改代码一定要改注释，保证注释最新</li>\n<li>注释应该是完整的句子，如果一个注释是一个短语或者句子，首字母大写，除非是小写字母开头的标识符作为开头</li>\n<li>短注释结尾的句号可以省略，包含一个或多个段落的块注释每一个句子都应该有句号</li>\n<li>在句子结束的句号之后应该有两个句号</li>\n<li>用英语写的时候，遵守Strunk and White写作风格</li>\n<li>除非你十分确定你的代码不会被任何不用你这个语言的人使用，否则都用英语写注释</li>\n</ul>\n<h3 id=\"编程推荐\"><a href=\"#编程推荐\" class=\"headerlink\" title=\"编程推荐\"></a>编程推荐</h3><ul>\n<li>代码应该不使得其他python实现有劣势，也就是不要依靠特定的python实现来提高效率</li>\n<li>和单例(Singleton)，比如None比较，应该一直使用is和is not而不是等于符号和不等于</li>\n<li>使用is not运算符而不是使用not … is</li>\n<li>如果实现比较运算密集的有序操作时，最好实现所有的六种操作(eq, ne, lt, le, gt, ge)</li>\n<li>定义有名字的函数始终使用def而不是通过lambda表达式来赋值</li>\n<li>从Exception继承而不是从BaseException</li>\n<li>恰当的使用exception链</li>\n<li>在py2里边raise一个异常的时候，使用raise ValueError(‘message’)而不是raise ValuError, ‘message’， py3中后面的方法会出错</li>\n<li>捕捉异常的时候，使用具体的异常，而不是用一个单纯的except:xxx，否则连SystemExit和KeyboardInterrupt也会被捕捉到</li>\n<li>给异常绑定名字的时候使用py2.6添加的as的方法，except Exception as exc:…</li>\n<li>捕捉系统错误的时候，使用py3.3添加的异常阶层而不是使用errno值</li>\n<li>try语句包含的东西越少越好</li>\n<li>如果一个资源是一段代码本地使用的，使用with语句保证被正确释放</li>\n<li>上下文管理器始终应该使用函数或者方法来调用</li>\n<li>保证返回语句一致，要么所有情况都有返回，要么都没有</li>\n<li>使用字符串方法，而不是使用字符串模块</li>\n<li>使用’’.startswith()和’’.endswith()而不是字符串切片来检查前缀后缀</li>\n<li>对象类型的比较应该使用isinstance()而不是直接比较</li>\n<li>对于序列(字符串，列表，元组)，可以利用空序列为false</li>\n<li>字符串字面量不要依赖有意义的尾部空白</li>\n<li>布尔值不要用==和is来比较，直接用if is_true:…而不是if is_true == True:更不要用if is_true is True:…</li>\n</ul>\n<h3 id=\"参考连接：\"><a href=\"#参考连接：\" class=\"headerlink\" title=\"参考连接：\"></a>参考连接：</h3><p><a href=\"https://www.python.org/dev/peps/pep-0008/#fn-hi\" target=\"_blank\" rel=\"noopener\">官方PEP8文档</a></p>\n<p><a href=\"https://blog.csdn.net/qq_29343201/article/details/54660570\" target=\"_blank\" rel=\"noopener\">pep8 要求归纳</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h3><p>使用四个空格表示每个缩进级别。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对齐</span></span><br><span class=\"line\">foo = long_function_name(var_one, var_two,</span><br><span class=\"line\">                         var_three, var_four)</span><br><span class=\"line\">                         </span><br><span class=\"line\"><span class=\"comment\"># 比之后的内容多一层缩进</span></span><br><span class=\"line\"><span class=\"comment\"># 使用更多的缩进以和其他的代码单元区别开来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_function_name</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        var_one, var_two, var_three,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        var_four)</span>:</span></span><br><span class=\"line\">    print(var_one)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 悬垂的缩进，多加一层</span></span><br><span class=\"line\">foo = long_function_name(</span><br><span class=\"line\">    var_one, var_two,</span><br><span class=\"line\">    var_three, var_four)</span><br><span class=\"line\"><span class=\"comment\"># 或者：</span></span><br><span class=\"line\">foo = long_func_name(</span><br><span class=\"line\">    var_one, var_two,</span><br><span class=\"line\">    var_three, var_four</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># 另外其实有一种可选情况，也就是悬垂缩进可以缩进不为4个空格，比如用两个</span></span><br></pre></td></tr></table></figure>\n<p>不规范示例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当不适用垂直对齐时，禁止在第一行使用参数</span></span><br><span class=\"line\"><span class=\"comment\"># 换句话说，在垂直对齐时，才可在第一行使用参数</span></span><br><span class=\"line\">foo = lone_func_name(var_one, var_two, </span><br><span class=\"line\">    var_three, var_four)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当缩进不足以区分代码结构时，增加一个缩进级别</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_func_name</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    var_one, var_two, var_three</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    var_four)</span>:</span></span><br><span class=\"line\">    print(var_one)</span><br></pre></td></tr></table></figure>\n<h3 id=\"最大长度\"><a href=\"#最大长度\" class=\"headerlink\" title=\"最大长度\"></a>最大长度</h3><p>所有行的最大长度均为79个字符</p>\n<p>对于文档字符串或者注释，最长72字符</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当超出最大长度时，使用反斜杠来换行</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">''</span>) <span class=\"keyword\">as</span> file_1, \\</span><br><span class=\"line\">     open(<span class=\"string\">''</span>) <span class=\"keyword\">as</span> file_2:</span><br><span class=\"line\">    file_2.write(file_1.read())</span><br></pre></td></tr></table></figure>\n<p>使用正确的换行位置。推荐的位置在二元操作符（binary operator，如下述代码中的and、or以及%）之后，二元运算符( + -)之前</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 同一括号换行，不需要反斜杠，因为是隐式换行</span></span><br><span class=\"line\"><span class=\"comment\"># 在 and or % 之后回车换行</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span><span class=\"params\">(Shape)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, width, height,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 color=<span class=\"string\">'black'</span>, emphasis=None, highlight=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width == <span class=\"number\">0</span> <span class=\"keyword\">and</span> height == <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">                color == <span class=\"string\">'red'</span> <span class=\"keyword\">and</span> emphasis == <span class=\"string\">'strong'</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">                height &gt; <span class=\"number\">100</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"sorry, you lose\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> width == <span class=\"number\">0</span> <span class=\"keyword\">and</span> height == <span class=\"number\">0</span> <span class=\"keyword\">and</span> (color == <span class=\"string\">'red'</span> <span class=\"keyword\">or</span> emphasis <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"I don't think so -- values are %s, %s\"</span> %</span><br><span class=\"line\">                             (width, height))</span><br><span class=\"line\">        Shape.__init__(self, width, height, color,</span><br><span class=\"line\">                       emphasis, highlight)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 + - 之前换行，增加可读性</span></span><br><span class=\"line\">income = (gross_wages</span><br><span class=\"line\">          + taxable_interest</span><br><span class=\"line\">          + (dividends - qualified_dividends)</span><br><span class=\"line\">          - ira_deduction</span><br><span class=\"line\">          - student_loan_interest)</span><br></pre></td></tr></table></figure>\n<h3 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h3><ul>\n<li>顶级函数（当前文件中的第一个函数）或者顶级类（当前文件的第一个类）之前要有两个空行</li>\n<li>定义在类内部的函数（成员函数）之间要留有一个空行</li>\n<li>可以使用额外的空行（但要注意节制）以区分不同的函数组，</li>\n<li>在一堆只有一行的函数之间不要使用空行（比如一些函数的空实现）</li>\n<li>在函数内部使用空行，来标识不同的逻辑单元</li>\n</ul>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>import应该总是在文件的最上面，在模块注释和文档字符串之后，在模块变量和常量之前</p>\n<p>注意import的顺序，各个import的组需要用空行隔开，顺序为（各个import独立成行）</p>\n<ul>\n<li>标准库import</li>\n<li>相关的第三方import</li>\n<li>本地应用和库的import</li>\n<li>一般情况使用绝对的import，但是在包层次比较复杂的时候使用相对import可以更加简洁，则使用相对import</li>\n</ul>\n<p>在import一个class的时候，如果不会引起命名冲突，则可以使用from进行import，否则则直接import并且使用全名</p>\n<p>应该避免使用利用通配符进行import，也就是避免使用from xxx import *</p>\n<p>模块级的特殊名字，此处特指那些前后都有双下划线的名字， 比如author等，应该被放置在模块文档字符串之后，除from future import的任何import之前，比如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"This is the example module.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This module does stuff.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> barry_as_FLUFL</span><br><span class=\"line\"></span><br><span class=\"line\">__all__ = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">__version__ = <span class=\"string\">'0.1'</span></span><br><span class=\"line\">__author__ = <span class=\"string\">'Cardinal Biggles'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tool</span><br></pre></td></tr></table></figure>\n<h3 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h3><p>以下几种情况不要额外加空格：</p>\n<ul>\n<li>在各种括号之中，比如spam(ham[1], {eegs: 2})而不是spam( ham[ 1 ], { eggs: 2 } )</li>\n<li>在逗号分号和冒号之前</li>\n<li>但是如果冒号作为分隔符，则前后都加空格</li>\n<li>后面立即跟了一个括号，比如函数调用的函数和括号之间不应该加空格</li>\n<li>后面跟的是索引或者切片的中括号，比如a[1]而不是a [1]</li>\n<li>对于赋值或者其他操作符，不要为了多个语句对齐而加很多空格，前后一个即可</li>\n</ul>\n<p>其他的建议:</p>\n<ul>\n<li>一行的尾部不要有空格</li>\n<li>二元运算符前后始终都最好有一个空格</li>\n<li>在一个表达式中有不同优先级的运算符，可以添加空格以区别优先级</li>\n<li>在调用函数时作为参数的那个等号则前后不要有空格（虽然看起来像个二元运算符）,比如func(a=3, b=4)而不是func(a = 3, b = 4)</li>\n<li>带箭头的函数，箭头两端也应该和二元运算符一样，前后有空格def func() -&gt; AnyStr: …</li>\n<li>用于指示关键字参数或默认参数值时，不要在 = 符号周围使用空格</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">complex</span><span class=\"params\">(real, imag=<span class=\"number\">0.0</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> magic(r=real, i=imag)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将参数注释与默认值组合时，请在=符号周围使用空格（但仅限于那些同时具有注释和默认值的参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">munge</span><span class=\"params\">(sep: AnyStr = None)</span>:</span> ...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">munge</span><span class=\"params\">(input: AnyStr, sep: AnyStr = None, limit=<span class=\"number\">1000</span>)</span>:</span> ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li>为所有公共模块或者函数、类以及方法编写文档。不必为非公共方法编写doc文档，但应有一个注释描述算法的功能，这条注释应当出现在def之后</li>\n<li>结尾的”””应当独占一行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;Return a foobang</span><br><span class=\"line\"></span><br><span class=\"line\">Optional plotz says to frobnicate the bizbaz first.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li>注释和内容冲突的，比不要注释还好，改代码一定要改注释，保证注释最新</li>\n<li>注释应该是完整的句子，如果一个注释是一个短语或者句子，首字母大写，除非是小写字母开头的标识符作为开头</li>\n<li>短注释结尾的句号可以省略，包含一个或多个段落的块注释每一个句子都应该有句号</li>\n<li>在句子结束的句号之后应该有两个句号</li>\n<li>用英语写的时候，遵守Strunk and White写作风格</li>\n<li>除非你十分确定你的代码不会被任何不用你这个语言的人使用，否则都用英语写注释</li>\n</ul>\n<h3 id=\"编程推荐\"><a href=\"#编程推荐\" class=\"headerlink\" title=\"编程推荐\"></a>编程推荐</h3><ul>\n<li>代码应该不使得其他python实现有劣势，也就是不要依靠特定的python实现来提高效率</li>\n<li>和单例(Singleton)，比如None比较，应该一直使用is和is not而不是等于符号和不等于</li>\n<li>使用is not运算符而不是使用not … is</li>\n<li>如果实现比较运算密集的有序操作时，最好实现所有的六种操作(eq, ne, lt, le, gt, ge)</li>\n<li>定义有名字的函数始终使用def而不是通过lambda表达式来赋值</li>\n<li>从Exception继承而不是从BaseException</li>\n<li>恰当的使用exception链</li>\n<li>在py2里边raise一个异常的时候，使用raise ValueError(‘message’)而不是raise ValuError, ‘message’， py3中后面的方法会出错</li>\n<li>捕捉异常的时候，使用具体的异常，而不是用一个单纯的except:xxx，否则连SystemExit和KeyboardInterrupt也会被捕捉到</li>\n<li>给异常绑定名字的时候使用py2.6添加的as的方法，except Exception as exc:…</li>\n<li>捕捉系统错误的时候，使用py3.3添加的异常阶层而不是使用errno值</li>\n<li>try语句包含的东西越少越好</li>\n<li>如果一个资源是一段代码本地使用的，使用with语句保证被正确释放</li>\n<li>上下文管理器始终应该使用函数或者方法来调用</li>\n<li>保证返回语句一致，要么所有情况都有返回，要么都没有</li>\n<li>使用字符串方法，而不是使用字符串模块</li>\n<li>使用’’.startswith()和’’.endswith()而不是字符串切片来检查前缀后缀</li>\n<li>对象类型的比较应该使用isinstance()而不是直接比较</li>\n<li>对于序列(字符串，列表，元组)，可以利用空序列为false</li>\n<li>字符串字面量不要依赖有意义的尾部空白</li>\n<li>布尔值不要用==和is来比较，直接用if is_true:…而不是if is_true == True:更不要用if is_true is True:…</li>\n</ul>\n<h3 id=\"参考连接：\"><a href=\"#参考连接：\" class=\"headerlink\" title=\"参考连接：\"></a>参考连接：</h3><p><a href=\"https://www.python.org/dev/peps/pep-0008/#fn-hi\" target=\"_blank\" rel=\"noopener\">官方PEP8文档</a></p>\n<p><a href=\"https://blog.csdn.net/qq_29343201/article/details/54660570\" target=\"_blank\" rel=\"noopener\">pep8 要求归纳</a></p>\n"},{"title":"screen操作笔记","abbrlink":2547638477,"date":"2019-01-19T13:43:28.000Z","updated":"2019-02-15T14:22:22.000Z","_content":"# screen 操作笔记\n### 简介：\n**Screen**是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。\n### 安装screen\n有些Linux会自带screen，如果没有可以在GNU screen官网下载\n\n\n> [seven@TT ~]# yuminstall screen\n\n> [seven@TT ~]# sudo apt install screen\n\n也可以从官网下载安装包，解压安装\n\n[GNU screen官网](http://www.gnu.org/software/screen/)\n### 操作命令：\n#### 创建一个新窗口\n安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：\n> seven@TT:~/Desktop$ screen -S xxx\n\n也可以直接加上所要运行的脚本程序\n> seven@TT:~/Desktop$ screen vim aaa.txt\n\n> seven@TT:~/Desktop$ screen -S acac vim bbb.txt\n\nscreen创建一个执行vim aaa.txt的单窗口会话，退出vim 将退出该窗口/会话。\n\n需要长时间运行的后台程序\n> seven@TT:~/Desktop$ screen python run.py\n\n#### 会话分离与恢复\nscreen 的好处就是可以在不中断程序运行的状态,而暂时断开会话窗口,在随后可以重新连接该会话,重新控制运行的程序\n```\nseven@TT:~/Desktop$ screen -S xxx\n[detached from 27802.xxx]\n'''创建并进入会话'''\n'''在会话窗口按 Ctrl+a+d 可以不中断程序,而暂时退出会话'''\nseven@TT:~/Desktop$ screen -ls\nThere is a screen on:\n\t27802.xxx\t(2018年11月20日 10时15分57秒)\t(Detached)\n1 Socket in /var/run/screen/S-seven.\n'''查看会话列表'''\nseven@TT:~/Desktop$ screen -r xxx\n'''重新连接指定会话'''\n```\n当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：\n```\nseven@TT:~/Desktop$ screen -ls\nThere are screens on:\n\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Attached)\n\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)\n\t27802.xxx\t(2018年11月20日 10时15分58秒)\t(Detached)\n3 Sockets in /var/run/screen/S-seven.\n'''Attached 为未分离的会话'''\nseven@TT:~/Desktop$ screen -d 28018\n[28018.awaw detached.]\n'''强制分离会话'''\nseven@TT:~/Desktop$ screen -r 28018\n[detached from 28018.awaw]\n'''重新连接会话'''\n```\n#### 清除dead 会话\n如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：\n\n```\nseven@TT:~/Desktop$ screen -ls\nThere are screens on:\n\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Detached)\n\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)\n\t27802.xxx\t(2018年11月20日 10时15分58秒)\t(Detached)\n3 Sockets in /var/run/screen/S-seven.\nseven@TT:~/Desktop$ kill -9 27802\nseven@TT:~/Desktop$ screen -ls\nThere are screens on:\n\t28018.awaw\t(2018年11月20日 10时40分50秒)\t(Detached)\n\t27869.acac\t(2018年11月20日 10时22分52秒)\t(Detached)\n\t27802.xxx\t(2018年11月20日 09时44分52秒)\t(Dead ???)\nRemove dead screens with 'screen -wipe'.\n3 Sockets in /var/run/screen/S-seven.\n\nseven@TT:~/Desktop$ screen -wipe 27802\nThere is a screen on:\n\t27802.xxx\t(2018年11月20日 09时44分53秒)\t(Removed)\n1 socket wiped out.\nNo Sockets found in /var/run/screen/S-seven.\n\nseven@TT:~/Desktop$ screen -ls\nThere are screens on:\n\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Detached)\n\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)\n2 Sockets in /var/run/screen/S-seven.\n```\n#### 关闭或杀死窗口\n正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用C-a k，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。\n\n如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。\n\n除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键C-a :，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实C-a :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入split等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些\n#### 会话共享\n> seven@TT:~/Desktop$ screen -x\n\n假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令,\n这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的\n\n#### 会话锁定与解锁\nScreen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。\n\n也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。\n\n#### 屏幕分割\n现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a S将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a 在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。\n\n可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它\n\n#### C/P模式和操作\nscreen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快捷键C-a 或者C-a [可以进入copy/paste模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用/进行搜索，使用y快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。\n\n一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口\n\n#### 更多screen功能\n同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。\n\n以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg...）命令，你可以灵活配置其他用户访问你的screen会话\n\n---\n\n#### 命令查看\n\n> \\# screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n\n##### 命令行参数\n-A 　将所有的视窗都调整为目前终端机的大小。\n\n-d <作业名称> 　将指定的screen作业离线。\n\n-h <行数> 　指定视窗的缓冲区行数。\n\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n\n-r <作业名称> 　恢复离线的screen作业。\n\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n\n-s 　指定建立新视窗时，所要执行的shell。\n\n-S <作业名称> 　指定screen作业的名称。\n\n-v 　显示版本信息。\n\n-x 　恢复之前离线的screen作业。\n\n-ls或--list 　显示目前所有的screen作业。\n\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业\n\n##### 窗口命令\nC-a ? -> 显示所有键绑定信息\nC-a c -> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -> Next，切换到下一个 window \n\nC-a p -> Previous，切换到前一个 window \n\nC-a 0..9 -> 切换到第 0..9 个 window\n\nCtrl+a [Space] -> 由视窗0循序切换到视窗9\n\nC-a C-a -> 在两个最近使用的 window 间切换\n\nC-a x -> 锁住当前的 window，需用用户密码解锁\n\nC-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \n\nC-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\n\nC-a w -> 显示所有窗口列表\n\nC-a t -> time，显示当前时间，和系统的 load \n\nC-a k -> kill window，强行关闭当前的 window\n\nC-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样    \n\nC-b Backward，PageUp     \n\nC-f Forward，PageDown     \n\nH(大写) High，将光标移至左上角     \n\nL Low，将光标移至左下角     \n\n0 移到行首     \n\n$ 行末     \n\nw forward one word，以字为单位往前移     \n\nb backward one word，以字为单位往后移     \n\nSpace 第一次按为标记区起点，第二次按为终点 \n\nEsc 结束 \n\ncopy mode \n\nC-a ] -> paste，把刚刚在 copy mode 选定的内容贴上\n","source":"_posts/screen.md","raw":"---\ntitle: screen操作笔记\ntags:\n  - Linux\ncategories: 操作系统\nabbrlink: 2547638477\ndate: 2019-01-19 21:43:28\nupdated: 2019-02-15 22:22:22\n---\n# screen 操作笔记\n### 简介：\n**Screen**是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。\n### 安装screen\n有些Linux会自带screen，如果没有可以在GNU screen官网下载\n\n\n> [seven@TT ~]# yuminstall screen\n\n> [seven@TT ~]# sudo apt install screen\n\n也可以从官网下载安装包，解压安装\n\n[GNU screen官网](http://www.gnu.org/software/screen/)\n### 操作命令：\n#### 创建一个新窗口\n安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：\n> seven@TT:~/Desktop$ screen -S xxx\n\n也可以直接加上所要运行的脚本程序\n> seven@TT:~/Desktop$ screen vim aaa.txt\n\n> seven@TT:~/Desktop$ screen -S acac vim bbb.txt\n\nscreen创建一个执行vim aaa.txt的单窗口会话，退出vim 将退出该窗口/会话。\n\n需要长时间运行的后台程序\n> seven@TT:~/Desktop$ screen python run.py\n\n#### 会话分离与恢复\nscreen 的好处就是可以在不中断程序运行的状态,而暂时断开会话窗口,在随后可以重新连接该会话,重新控制运行的程序\n```\nseven@TT:~/Desktop$ screen -S xxx\n[detached from 27802.xxx]\n'''创建并进入会话'''\n'''在会话窗口按 Ctrl+a+d 可以不中断程序,而暂时退出会话'''\nseven@TT:~/Desktop$ screen -ls\nThere is a screen on:\n\t27802.xxx\t(2018年11月20日 10时15分57秒)\t(Detached)\n1 Socket in /var/run/screen/S-seven.\n'''查看会话列表'''\nseven@TT:~/Desktop$ screen -r xxx\n'''重新连接指定会话'''\n```\n当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：\n```\nseven@TT:~/Desktop$ screen -ls\nThere are screens on:\n\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Attached)\n\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)\n\t27802.xxx\t(2018年11月20日 10时15分58秒)\t(Detached)\n3 Sockets in /var/run/screen/S-seven.\n'''Attached 为未分离的会话'''\nseven@TT:~/Desktop$ screen -d 28018\n[28018.awaw detached.]\n'''强制分离会话'''\nseven@TT:~/Desktop$ screen -r 28018\n[detached from 28018.awaw]\n'''重新连接会话'''\n```\n#### 清除dead 会话\n如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：\n\n```\nseven@TT:~/Desktop$ screen -ls\nThere are screens on:\n\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Detached)\n\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)\n\t27802.xxx\t(2018年11月20日 10时15分58秒)\t(Detached)\n3 Sockets in /var/run/screen/S-seven.\nseven@TT:~/Desktop$ kill -9 27802\nseven@TT:~/Desktop$ screen -ls\nThere are screens on:\n\t28018.awaw\t(2018年11月20日 10时40分50秒)\t(Detached)\n\t27869.acac\t(2018年11月20日 10时22分52秒)\t(Detached)\n\t27802.xxx\t(2018年11月20日 09时44分52秒)\t(Dead ???)\nRemove dead screens with 'screen -wipe'.\n3 Sockets in /var/run/screen/S-seven.\n\nseven@TT:~/Desktop$ screen -wipe 27802\nThere is a screen on:\n\t27802.xxx\t(2018年11月20日 09时44分53秒)\t(Removed)\n1 socket wiped out.\nNo Sockets found in /var/run/screen/S-seven.\n\nseven@TT:~/Desktop$ screen -ls\nThere are screens on:\n\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Detached)\n\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)\n2 Sockets in /var/run/screen/S-seven.\n```\n#### 关闭或杀死窗口\n正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用C-a k，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。\n\n如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。\n\n除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键C-a :，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实C-a :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入split等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些\n#### 会话共享\n> seven@TT:~/Desktop$ screen -x\n\n假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令,\n这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的\n\n#### 会话锁定与解锁\nScreen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。\n\n也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。\n\n#### 屏幕分割\n现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a S将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a 在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。\n\n可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它\n\n#### C/P模式和操作\nscreen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快捷键C-a 或者C-a [可以进入copy/paste模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用/进行搜索，使用y快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。\n\n一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口\n\n#### 更多screen功能\n同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。\n\n以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg...）命令，你可以灵活配置其他用户访问你的screen会话\n\n---\n\n#### 命令查看\n\n> \\# screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n\n##### 命令行参数\n-A 　将所有的视窗都调整为目前终端机的大小。\n\n-d <作业名称> 　将指定的screen作业离线。\n\n-h <行数> 　指定视窗的缓冲区行数。\n\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n\n-r <作业名称> 　恢复离线的screen作业。\n\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n\n-s 　指定建立新视窗时，所要执行的shell。\n\n-S <作业名称> 　指定screen作业的名称。\n\n-v 　显示版本信息。\n\n-x 　恢复之前离线的screen作业。\n\n-ls或--list 　显示目前所有的screen作业。\n\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业\n\n##### 窗口命令\nC-a ? -> 显示所有键绑定信息\nC-a c -> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -> Next，切换到下一个 window \n\nC-a p -> Previous，切换到前一个 window \n\nC-a 0..9 -> 切换到第 0..9 个 window\n\nCtrl+a [Space] -> 由视窗0循序切换到视窗9\n\nC-a C-a -> 在两个最近使用的 window 间切换\n\nC-a x -> 锁住当前的 window，需用用户密码解锁\n\nC-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \n\nC-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\n\nC-a w -> 显示所有窗口列表\n\nC-a t -> time，显示当前时间，和系统的 load \n\nC-a k -> kill window，强行关闭当前的 window\n\nC-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样    \n\nC-b Backward，PageUp     \n\nC-f Forward，PageDown     \n\nH(大写) High，将光标移至左上角     \n\nL Low，将光标移至左下角     \n\n0 移到行首     \n\n$ 行末     \n\nw forward one word，以字为单位往前移     \n\nb backward one word，以字为单位往后移     \n\nSpace 第一次按为标记区起点，第二次按为终点 \n\nEsc 结束 \n\ncopy mode \n\nC-a ] -> paste，把刚刚在 copy mode 选定的内容贴上\n","slug":"screen","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjuv7ppw1001g7rs63s41efdw","content":"<h1 id=\"screen-操作笔记\"><a href=\"#screen-操作笔记\" class=\"headerlink\" title=\"screen 操作笔记\"></a>screen 操作笔记</h1><h3 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h3><p><strong>Screen</strong>是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>\n<h3 id=\"安装screen\"><a href=\"#安装screen\" class=\"headerlink\" title=\"安装screen\"></a>安装screen</h3><p>有些Linux会自带screen，如果没有可以在GNU screen官网下载</p>\n<blockquote>\n<p>[seven@TT ~]# yuminstall screen</p>\n</blockquote>\n<blockquote>\n<p>[seven@TT ~]# sudo apt install screen</p>\n</blockquote>\n<p>也可以从官网下载安装包，解压安装</p>\n<p><a href=\"http://www.gnu.org/software/screen/\" target=\"_blank\" rel=\"noopener\">GNU screen官网</a></p>\n<h3 id=\"操作命令：\"><a href=\"#操作命令：\" class=\"headerlink\" title=\"操作命令：\"></a>操作命令：</h3><h4 id=\"创建一个新窗口\"><a href=\"#创建一个新窗口\" class=\"headerlink\" title=\"创建一个新窗口\"></a>创建一个新窗口</h4><p>安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：</p>\n<blockquote>\n<p>seven@TT:~/Desktop$ screen -S xxx</p>\n</blockquote>\n<p>也可以直接加上所要运行的脚本程序</p>\n<blockquote>\n<p>seven@TT:~/Desktop$ screen vim aaa.txt</p>\n</blockquote>\n<blockquote>\n<p>seven@TT:~/Desktop$ screen -S acac vim bbb.txt</p>\n</blockquote>\n<p>screen创建一个执行vim aaa.txt的单窗口会话，退出vim 将退出该窗口/会话。</p>\n<p>需要长时间运行的后台程序</p>\n<blockquote>\n<p>seven@TT:~/Desktop$ screen python run.py</p>\n</blockquote>\n<h4 id=\"会话分离与恢复\"><a href=\"#会话分离与恢复\" class=\"headerlink\" title=\"会话分离与恢复\"></a>会话分离与恢复</h4><p>screen 的好处就是可以在不中断程序运行的状态,而暂时断开会话窗口,在随后可以重新连接该会话,重新控制运行的程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seven@TT:~/Desktop$ screen -S xxx</span><br><span class=\"line\">[detached from 27802.xxx]</span><br><span class=\"line\">&apos;&apos;&apos;创建并进入会话&apos;&apos;&apos;</span><br><span class=\"line\">&apos;&apos;&apos;在会话窗口按 Ctrl+a+d 可以不中断程序,而暂时退出会话&apos;&apos;&apos;</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 10时15分57秒)\t(Detached)</span><br><span class=\"line\">1 Socket in /var/run/screen/S-seven.</span><br><span class=\"line\">&apos;&apos;&apos;查看会话列表&apos;&apos;&apos;</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -r xxx</span><br><span class=\"line\">&apos;&apos;&apos;重新连接指定会话&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Attached)</span><br><span class=\"line\">\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 10时15分58秒)\t(Detached)</span><br><span class=\"line\">3 Sockets in /var/run/screen/S-seven.</span><br><span class=\"line\">&apos;&apos;&apos;Attached 为未分离的会话&apos;&apos;&apos;</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -d 28018</span><br><span class=\"line\">[28018.awaw detached.]</span><br><span class=\"line\">&apos;&apos;&apos;强制分离会话&apos;&apos;&apos;</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -r 28018</span><br><span class=\"line\">[detached from 28018.awaw]</span><br><span class=\"line\">&apos;&apos;&apos;重新连接会话&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"清除dead-会话\"><a href=\"#清除dead-会话\" class=\"headerlink\" title=\"清除dead 会话\"></a>清除dead 会话</h4><p>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Detached)</span><br><span class=\"line\">\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 10时15分58秒)\t(Detached)</span><br><span class=\"line\">3 Sockets in /var/run/screen/S-seven.</span><br><span class=\"line\">seven@TT:~/Desktop$ kill -9 27802</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">\t28018.awaw\t(2018年11月20日 10时40分50秒)\t(Detached)</span><br><span class=\"line\">\t27869.acac\t(2018年11月20日 10时22分52秒)\t(Detached)</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 09时44分52秒)\t(Dead ???)</span><br><span class=\"line\">Remove dead screens with &apos;screen -wipe&apos;.</span><br><span class=\"line\">3 Sockets in /var/run/screen/S-seven.</span><br><span class=\"line\"></span><br><span class=\"line\">seven@TT:~/Desktop$ screen -wipe 27802</span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 09时44分53秒)\t(Removed)</span><br><span class=\"line\">1 socket wiped out.</span><br><span class=\"line\">No Sockets found in /var/run/screen/S-seven.</span><br><span class=\"line\"></span><br><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Detached)</span><br><span class=\"line\">\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)</span><br><span class=\"line\">2 Sockets in /var/run/screen/S-seven.</span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭或杀死窗口\"><a href=\"#关闭或杀死窗口\" class=\"headerlink\" title=\"关闭或杀死窗口\"></a>关闭或杀死窗口</h4><p>正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用C-a k，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。</p>\n<p>如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。</p>\n<p>除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键C-a :，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实C-a :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入split等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些</p>\n<h4 id=\"会话共享\"><a href=\"#会话共享\" class=\"headerlink\" title=\"会话共享\"></a>会话共享</h4><blockquote>\n<p>seven@TT:~/Desktop$ screen -x</p>\n</blockquote>\n<p>假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令,<br>这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的</p>\n<h4 id=\"会话锁定与解锁\"><a href=\"#会话锁定与解锁\" class=\"headerlink\" title=\"会话锁定与解锁\"></a>会话锁定与解锁</h4><p>Screen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。</p>\n<p>也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。</p>\n<h4 id=\"屏幕分割\"><a href=\"#屏幕分割\" class=\"headerlink\" title=\"屏幕分割\"></a>屏幕分割</h4><p>现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a S将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a 在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。</p>\n<p>可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它</p>\n<h4 id=\"C-P模式和操作\"><a href=\"#C-P模式和操作\" class=\"headerlink\" title=\"C/P模式和操作\"></a>C/P模式和操作</h4><p>screen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快捷键C-a 或者C-a [可以进入copy/paste模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用/进行搜索，使用y快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。</p>\n<p>一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口</p>\n<h4 id=\"更多screen功能\"><a href=\"#更多screen功能\" class=\"headerlink\" title=\"更多screen功能\"></a>更多screen功能</h4><p>同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。</p>\n<p>以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg…）命令，你可以灵活配置其他用户访问你的screen会话</p>\n<hr>\n<h4 id=\"命令查看\"><a href=\"#命令查看\" class=\"headerlink\" title=\"命令查看\"></a>命令查看</h4><blockquote>\n<p># screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</p>\n</blockquote>\n<h5 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h5><p>-A 　将所有的视窗都调整为目前终端机的大小。</p>\n<p>-d &lt;作业名称&gt; 　将指定的screen作业离线。</p>\n<p>-h &lt;行数&gt; 　指定视窗的缓冲区行数。</p>\n<p>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</p>\n<p>-r &lt;作业名称&gt; 　恢复离线的screen作业。</p>\n<p>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</p>\n<p>-s 　指定建立新视窗时，所要执行的shell。</p>\n<p>-S &lt;作业名称&gt; 　指定screen作业的名称。</p>\n<p>-v 　显示版本信息。</p>\n<p>-x 　恢复之前离线的screen作业。</p>\n<p>-ls或–list 　显示目前所有的screen作业。</p>\n<p>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业</p>\n<h5 id=\"窗口命令\"><a href=\"#窗口命令\" class=\"headerlink\" title=\"窗口命令\"></a>窗口命令</h5><p>C-a ? -&gt; 显示所有键绑定信息<br>C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口<br>C-a n -&gt; Next，切换到下一个 window </p>\n<p>C-a p -&gt; Previous，切换到前一个 window </p>\n<p>C-a 0..9 -&gt; 切换到第 0..9 个 window</p>\n<p>Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</p>\n<p>C-a C-a -&gt; 在两个最近使用的 window 间切换</p>\n<p>C-a x -&gt; 锁住当前的 window，需用用户密码解锁</p>\n<p>C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </p>\n<p>C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</p>\n<p>C-a w -&gt; 显示所有窗口列表</p>\n<p>C-a t -&gt; time，显示当前时间，和系统的 load </p>\n<p>C-a k -&gt; kill window，强行关闭当前的 window</p>\n<p>C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样    </p>\n<p>C-b Backward，PageUp     </p>\n<p>C-f Forward，PageDown     </p>\n<p>H(大写) High，将光标移至左上角     </p>\n<p>L Low，将光标移至左下角     </p>\n<p>0 移到行首     </p>\n<p>$ 行末     </p>\n<p>w forward one word，以字为单位往前移     </p>\n<p>b backward one word，以字为单位往后移     </p>\n<p>Space 第一次按为标记区起点，第二次按为终点 </p>\n<p>Esc 结束 </p>\n<p>copy mode </p>\n<p>C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"screen-操作笔记\"><a href=\"#screen-操作笔记\" class=\"headerlink\" title=\"screen 操作笔记\"></a>screen 操作笔记</h1><h3 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h3><p><strong>Screen</strong>是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p>\n<h3 id=\"安装screen\"><a href=\"#安装screen\" class=\"headerlink\" title=\"安装screen\"></a>安装screen</h3><p>有些Linux会自带screen，如果没有可以在GNU screen官网下载</p>\n<blockquote>\n<p>[seven@TT ~]# yuminstall screen</p>\n</blockquote>\n<blockquote>\n<p>[seven@TT ~]# sudo apt install screen</p>\n</blockquote>\n<p>也可以从官网下载安装包，解压安装</p>\n<p><a href=\"http://www.gnu.org/software/screen/\" target=\"_blank\" rel=\"noopener\">GNU screen官网</a></p>\n<h3 id=\"操作命令：\"><a href=\"#操作命令：\" class=\"headerlink\" title=\"操作命令：\"></a>操作命令：</h3><h4 id=\"创建一个新窗口\"><a href=\"#创建一个新窗口\" class=\"headerlink\" title=\"创建一个新窗口\"></a>创建一个新窗口</h4><p>安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：</p>\n<blockquote>\n<p>seven@TT:~/Desktop$ screen -S xxx</p>\n</blockquote>\n<p>也可以直接加上所要运行的脚本程序</p>\n<blockquote>\n<p>seven@TT:~/Desktop$ screen vim aaa.txt</p>\n</blockquote>\n<blockquote>\n<p>seven@TT:~/Desktop$ screen -S acac vim bbb.txt</p>\n</blockquote>\n<p>screen创建一个执行vim aaa.txt的单窗口会话，退出vim 将退出该窗口/会话。</p>\n<p>需要长时间运行的后台程序</p>\n<blockquote>\n<p>seven@TT:~/Desktop$ screen python run.py</p>\n</blockquote>\n<h4 id=\"会话分离与恢复\"><a href=\"#会话分离与恢复\" class=\"headerlink\" title=\"会话分离与恢复\"></a>会话分离与恢复</h4><p>screen 的好处就是可以在不中断程序运行的状态,而暂时断开会话窗口,在随后可以重新连接该会话,重新控制运行的程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seven@TT:~/Desktop$ screen -S xxx</span><br><span class=\"line\">[detached from 27802.xxx]</span><br><span class=\"line\">&apos;&apos;&apos;创建并进入会话&apos;&apos;&apos;</span><br><span class=\"line\">&apos;&apos;&apos;在会话窗口按 Ctrl+a+d 可以不中断程序,而暂时退出会话&apos;&apos;&apos;</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 10时15分57秒)\t(Detached)</span><br><span class=\"line\">1 Socket in /var/run/screen/S-seven.</span><br><span class=\"line\">&apos;&apos;&apos;查看会话列表&apos;&apos;&apos;</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -r xxx</span><br><span class=\"line\">&apos;&apos;&apos;重新连接指定会话&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>当然，如果你在另一台机器上没有分离一个Screen会话，就无从恢复会话了。这时可以使用下面命令强制将这个会话从它所在的终端分离，转移到新的终端上来：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Attached)</span><br><span class=\"line\">\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 10时15分58秒)\t(Detached)</span><br><span class=\"line\">3 Sockets in /var/run/screen/S-seven.</span><br><span class=\"line\">&apos;&apos;&apos;Attached 为未分离的会话&apos;&apos;&apos;</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -d 28018</span><br><span class=\"line\">[28018.awaw detached.]</span><br><span class=\"line\">&apos;&apos;&apos;强制分离会话&apos;&apos;&apos;</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -r 28018</span><br><span class=\"line\">[detached from 28018.awaw]</span><br><span class=\"line\">&apos;&apos;&apos;重新连接会话&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"清除dead-会话\"><a href=\"#清除dead-会话\" class=\"headerlink\" title=\"清除dead 会话\"></a>清除dead 会话</h4><p>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Detached)</span><br><span class=\"line\">\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 10时15分58秒)\t(Detached)</span><br><span class=\"line\">3 Sockets in /var/run/screen/S-seven.</span><br><span class=\"line\">seven@TT:~/Desktop$ kill -9 27802</span><br><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">\t28018.awaw\t(2018年11月20日 10时40分50秒)\t(Detached)</span><br><span class=\"line\">\t27869.acac\t(2018年11月20日 10时22分52秒)\t(Detached)</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 09时44分52秒)\t(Dead ???)</span><br><span class=\"line\">Remove dead screens with &apos;screen -wipe&apos;.</span><br><span class=\"line\">3 Sockets in /var/run/screen/S-seven.</span><br><span class=\"line\"></span><br><span class=\"line\">seven@TT:~/Desktop$ screen -wipe 27802</span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">\t27802.xxx\t(2018年11月20日 09时44分53秒)\t(Removed)</span><br><span class=\"line\">1 socket wiped out.</span><br><span class=\"line\">No Sockets found in /var/run/screen/S-seven.</span><br><span class=\"line\"></span><br><span class=\"line\">seven@TT:~/Desktop$ screen -ls</span><br><span class=\"line\">There are screens on:</span><br><span class=\"line\">\t28018.awaw\t(2018年11月20日 10时40分51秒)\t(Detached)</span><br><span class=\"line\">\t27869.acac\t(2018年11月20日 10时22分53秒)\t(Detached)</span><br><span class=\"line\">2 Sockets in /var/run/screen/S-seven.</span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭或杀死窗口\"><a href=\"#关闭或杀死窗口\" class=\"headerlink\" title=\"关闭或杀死窗口\"></a>关闭或杀死窗口</h4><p>正常情况下，当你退出一个窗口中最后一个程序（通常是bash）后，这个窗口就关闭了。另一个关闭窗口的方法是使用C-a k，这个快捷键杀死当前的窗口，同时也将杀死这个窗口中正在运行的进程。</p>\n<p>如果一个Screen会话中最后一个窗口被关闭了，那么整个Screen会话也就退出了，screen进程会被终止。</p>\n<p>除了依次退出/杀死当前Screen会话中所有窗口这种方法之外，还可以使用快捷键C-a :，然后输入quit命令退出Screen会话。需要注意的是，这样退出会杀死所有窗口并退出其中运行的所有程序。其实C-a :这个快捷键允许用户直接输入的命令有很多，包括分屏可以输入split等，这也是实现Screen功能的一个途径，不过个人认为还是快捷键比较方便些</p>\n<h4 id=\"会话共享\"><a href=\"#会话共享\" class=\"headerlink\" title=\"会话共享\"></a>会话共享</h4><blockquote>\n<p>seven@TT:~/Desktop$ screen -x</p>\n</blockquote>\n<p>假设你在和朋友在不同地点以相同用户登录一台机器，然后你创建一个screen会话，你朋友可以在他的终端上命令,<br>这个命令会将你朋友的终端Attach到你的Screen会话上，并且你的终端不会被Detach。这样你就可以和朋友共享同一个会话了，如果你们当前又处于同一个窗口，那就相当于坐在同一个显示器前面，你的操作会同步演示给你朋友，你朋友的操作也会同步演示给你。当然，如果你们切换到这个会话的不同窗口中去，那还是可以分别进行不同的操作的</p>\n<h4 id=\"会话锁定与解锁\"><a href=\"#会话锁定与解锁\" class=\"headerlink\" title=\"会话锁定与解锁\"></a>会话锁定与解锁</h4><p>Screen允许使用快捷键C-a s锁定会话。锁定以后，再进行任何输入屏幕都不会再有反应了。但是要注意虽然屏幕上看不到反应，但你的输入都会被Screen中的进程接收到。快捷键C-a q可以解锁一个会话。</p>\n<p>也可以使用C-a x锁定会话，不同的是这样锁定之后，会话会被Screen所属用户的密码保护，需要输入密码才能继续访问这个会话。</p>\n<h4 id=\"屏幕分割\"><a href=\"#屏幕分割\" class=\"headerlink\" title=\"屏幕分割\"></a>屏幕分割</h4><p>现在显示器那么大，将一个屏幕分割成不同区域显示不同的Screen窗口显然是个很酷的事情。可以使用快捷键C-a S将显示器水平分割，Screen 4.00.03版本以后，也支持垂直分屏，快捷键是C-a |。分屏以后，可以使用C-a 在各个区块间切换，每一区块上都可以创建窗口并在其中运行进程。</p>\n<p>可以用C-a X快捷键关闭当前焦点所在的屏幕区块，也可以用C-a Q关闭除当前区块之外其他的所有区块。关闭的区块中的窗口并不会关闭，还可以通过窗口切换找到它</p>\n<h4 id=\"C-P模式和操作\"><a href=\"#C-P模式和操作\" class=\"headerlink\" title=\"C/P模式和操作\"></a>C/P模式和操作</h4><p>screen的另一个很强大的功能就是可以在不同窗口之间进行复制粘贴了。使用快捷键C-a 或者C-a [可以进入copy/paste模式，这个模式下可以像在vi中一样移动光标，并可以使用空格键设置标记。其实在这个模式下有很多类似vi的操作，譬如使用/进行搜索，使用y快速标记一行，使用w快速标记一个单词等。关于C/P模式下的高级操作，其文档的这一部分有比较详细的说明。</p>\n<p>一般情况下，可以移动光标到指定位置，按下空格设置一个开头标记，然后移动光标到结尾位置，按下空格设置第二个标记，同时会将两个标记之间的部分储存在copy/paste buffer中，并退出copy/paste模式。在正常模式下，可以使用快捷键C-a ]将储存在buffer中的内容粘贴到当前窗口</p>\n<h4 id=\"更多screen功能\"><a href=\"#更多screen功能\" class=\"headerlink\" title=\"更多screen功能\"></a>更多screen功能</h4><p>同大多数UNIX程序一样，GNU Screen提供了丰富强大的定制功能。你可以在Screen的默认两级配置文件/etc/screenrc和$HOME/.screenrc中指定更多，例如设定screen选项，定制绑定键，设定screen会话自启动窗口，启用多用户模式，定制用户访问权限控制等等。如果你愿意的话，也可以自己指定screen配置文件。</p>\n<p>以多用户功能为例，screen默认是以单用户模式运行的，你需要在配置文件中指定multiuser on 来打开多用户模式，通过acl*（acladd,acldel,aclchg…）命令，你可以灵活配置其他用户访问你的screen会话</p>\n<hr>\n<h4 id=\"命令查看\"><a href=\"#命令查看\" class=\"headerlink\" title=\"命令查看\"></a>命令查看</h4><blockquote>\n<p># screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</p>\n</blockquote>\n<h5 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h5><p>-A 　将所有的视窗都调整为目前终端机的大小。</p>\n<p>-d &lt;作业名称&gt; 　将指定的screen作业离线。</p>\n<p>-h &lt;行数&gt; 　指定视窗的缓冲区行数。</p>\n<p>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</p>\n<p>-r &lt;作业名称&gt; 　恢复离线的screen作业。</p>\n<p>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</p>\n<p>-s 　指定建立新视窗时，所要执行的shell。</p>\n<p>-S &lt;作业名称&gt; 　指定screen作业的名称。</p>\n<p>-v 　显示版本信息。</p>\n<p>-x 　恢复之前离线的screen作业。</p>\n<p>-ls或–list 　显示目前所有的screen作业。</p>\n<p>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业</p>\n<h5 id=\"窗口命令\"><a href=\"#窗口命令\" class=\"headerlink\" title=\"窗口命令\"></a>窗口命令</h5><p>C-a ? -&gt; 显示所有键绑定信息<br>C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口<br>C-a n -&gt; Next，切换到下一个 window </p>\n<p>C-a p -&gt; Previous，切换到前一个 window </p>\n<p>C-a 0..9 -&gt; 切换到第 0..9 个 window</p>\n<p>Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</p>\n<p>C-a C-a -&gt; 在两个最近使用的 window 间切换</p>\n<p>C-a x -&gt; 锁住当前的 window，需用用户密码解锁</p>\n<p>C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </p>\n<p>C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</p>\n<p>C-a w -&gt; 显示所有窗口列表</p>\n<p>C-a t -&gt; time，显示当前时间，和系统的 load </p>\n<p>C-a k -&gt; kill window，强行关闭当前的 window</p>\n<p>C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样    </p>\n<p>C-b Backward，PageUp     </p>\n<p>C-f Forward，PageDown     </p>\n<p>H(大写) High，将光标移至左上角     </p>\n<p>L Low，将光标移至左下角     </p>\n<p>0 移到行首     </p>\n<p>$ 行末     </p>\n<p>w forward one word，以字为单位往前移     </p>\n<p>b backward one word，以字为单位往后移     </p>\n<p>Space 第一次按为标记区起点，第二次按为终点 </p>\n<p>Esc 结束 </p>\n<p>copy mode </p>\n<p>C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjuv7ppk100007rs683k3ucg5","category_id":"cjuv7ppki00047rs6sbroz2cx","_id":"cjuv7ppl2000g7rs64ojd6928"},{"post_id":"cjuv7ppkc00027rs63ozjphbb","category_id":"cjuv7ppkw000b7rs6yiyxgz67","_id":"cjuv7ppl9000m7rs684vn45vo"},{"post_id":"cjuv7ppl5000j7rs6xo6md4j6","category_id":"cjuv7ppl4000h7rs6dx0huktn","_id":"cjuv7pplc000s7rs60ztiocgz"},{"post_id":"cjuv7ppkm00067rs6hrio5mga","category_id":"cjuv7ppl4000h7rs6dx0huktn","_id":"cjuv7ppld000w7rs69l6k5dm5"},{"post_id":"cjuv7ppla000q7rs637esvqzk","category_id":"cjuv7ppl4000h7rs6dx0huktn","_id":"cjuv7ppll000y7rs6vsnzctxz"},{"post_id":"cjuv7ppkp00087rs6lhi0x4zh","category_id":"cjuv7ppl9000n7rs69gx5bel9","_id":"cjuv7ppln00107rs6isr2joel"},{"post_id":"cjuv7ppkt000a7rs6gp703mrz","category_id":"cjuv7ppkw000b7rs6yiyxgz67","_id":"cjuv7pplq00147rs6h2pfjrv5"},{"post_id":"cjuv7ppky000e7rs6e0xq4tlv","category_id":"cjuv7ppl9000n7rs69gx5bel9","_id":"cjuv7ppls00187rs63ygu79gb"},{"post_id":"cjuv7ppl1000f7rs6zci4dmns","category_id":"cjuv7ppl9000n7rs69gx5bel9","_id":"cjuv7pplt001b7rs62yrq7jre"},{"post_id":"cjuv7ppl7000l7rs6hfo7q71v","category_id":"cjuv7ppl9000n7rs69gx5bel9","_id":"cjuv7pplu001d7rs6ce6b8uhm"},{"post_id":"cjuv7ppvw001e7rs6xyjlyrh6","category_id":"cjuv7ppl9000n7rs69gx5bel9","_id":"cjuv7ppw6001k7rs64559orkf"},{"post_id":"cjuv7ppw1001g7rs63s41efdw","category_id":"cjuv7ppw5001i7rs6itjbtbu1","_id":"cjuv7ppwa001m7rs6m2oftck8"}],"PostTag":[{"post_id":"cjuv7ppk100007rs683k3ucg5","tag_id":"cjuv7ppkl00057rs6zrg2cyfs","_id":"cjuv7ppky000d7rs6hy70x7j2"},{"post_id":"cjuv7ppkc00027rs63ozjphbb","tag_id":"cjuv7ppkw000c7rs6b8hua3u2","_id":"cjuv7ppl6000k7rs6dds5xe30"},{"post_id":"cjuv7ppl5000j7rs6xo6md4j6","tag_id":"cjuv7ppl4000i7rs6ama6vk8w","_id":"cjuv7ppla000p7rs64yvrkfg5"},{"post_id":"cjuv7ppkm00067rs6hrio5mga","tag_id":"cjuv7ppl4000i7rs6ama6vk8w","_id":"cjuv7pplc000r7rs6h1bl2xcm"},{"post_id":"cjuv7ppla000q7rs637esvqzk","tag_id":"cjuv7ppl4000i7rs6ama6vk8w","_id":"cjuv7pplc000t7rs6008a0udq"},{"post_id":"cjuv7ppkp00087rs6lhi0x4zh","tag_id":"cjuv7ppla000o7rs6qe7wdg5r","_id":"cjuv7ppll000x7rs6khyqpth2"},{"post_id":"cjuv7ppkt000a7rs6gp703mrz","tag_id":"cjuv7ppld000v7rs63ux7xuiw","_id":"cjuv7pplp00127rs6giwmui17"},{"post_id":"cjuv7ppky000e7rs6e0xq4tlv","tag_id":"cjuv7ppla000o7rs6qe7wdg5r","_id":"cjuv7pplr00167rs6mco0dh4w"},{"post_id":"cjuv7ppl1000f7rs6zci4dmns","tag_id":"cjuv7ppla000o7rs6qe7wdg5r","_id":"cjuv7pplt001a7rs6leud3z8d"},{"post_id":"cjuv7ppl7000l7rs6hfo7q71v","tag_id":"cjuv7ppls00197rs65nb9qc2u","_id":"cjuv7pplu001c7rs6xy9jlcn6"},{"post_id":"cjuv7ppvw001e7rs6xyjlyrh6","tag_id":"cjuv7ppla000o7rs6qe7wdg5r","_id":"cjuv7ppw4001h7rs6np6y8knv"},{"post_id":"cjuv7ppw1001g7rs63s41efdw","tag_id":"cjuv7ppw5001j7rs6r6rtl5cr","_id":"cjuv7ppw9001l7rs6f4bzv1he"}],"Tag":[{"name":"组件","_id":"cjuv7ppkl00057rs6zrg2cyfs"},{"name":"学习笔记","_id":"cjuv7ppkw000c7rs6b8hua3u2"},{"name":"mysql","_id":"cjuv7ppl4000i7rs6ama6vk8w"},{"name":"python","_id":"cjuv7ppla000o7rs6qe7wdg5r"},{"name":"docker","_id":"cjuv7ppld000v7rs63ux7xuiw"},{"name":"密码","_id":"cjuv7ppls00197rs65nb9qc2u"},{"name":"Linux","_id":"cjuv7ppw5001j7rs6r6rtl5cr"}]}}